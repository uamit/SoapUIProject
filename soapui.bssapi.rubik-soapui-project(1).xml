<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="RUBIK" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" id="e6113ce9-051d-4fad-ac00-0b5f6c627912" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.actions.iface.tools.soapui.TestRunnerAction@values-local"><![CDATA[<xml-fragment xmlns:con="http://eviware.com/soapui/config">
  <con:entry key="Environment" value="Default"/>
  <con:entry key="Global Properties" value=""/>
  <con:entry key="TestSuite" value="BSS API Validations"/>
  <con:entry key="Password" value=""/>
  <con:entry key="TestRunner Path" value=""/>
  <con:entry key="Tool Args" value=""/>
  <con:entry key="Ignore Errors" value="false"/>
  <con:entry key="Host:Port" value="3010"/>
  <con:entry key="user-settings.xml Password" value=""/>
  <con:entry key="WSS Password Type" value=""/>
  <con:entry key="Save Project" value="false"/>
  <con:entry key="Enable UI" value="false"/>
  <con:entry key="System Properties" value=""/>
  <con:entry key="Domain" value=""/>
  <con:entry key="Coverage Report" value="false"/>
  <con:entry key="Export JUnit Results" value="true"/>
  <con:entry key="Export JUnit Results with test properties" value="true"/>
  <con:entry key="Open Report" value="false"/>
  <con:entry key="Project Properties" value=""/>
  <con:entry key="Export All" value="true"/>
  <con:entry key="Project Password" value=""/>
  <con:entry key="Report Format(s)" value=""/>
  <con:entry key="TestCase" value="Create Organization"/>
  <con:entry key="Print Report" value="true"/>
  <con:entry key="Username" value=""/>
  <con:entry key="Root Folder" value="C:\Temp\SoapUiTemp"/>
  <con:entry key="Select Report Type" value=""/>
  <con:entry key="Save After" value="false"/>
  <con:entry key="Add Settings" value="true"/>
  <con:entry key="Endpoint" value="http://217.78.216.195"/>
</xml-fragment>]]></con:setting></con:settings><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://217.78.216.195:3010" type="rest" id="3481b716-3d38-4b14-bc37-b3ff3e06a77f" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://217.78.216.195:3010</con:endpoint></con:endpoints><con:resource name="Organizations-create" path="/api/organizations-create" id="f71e7bad-6520-4009-83d0-8165bb4c8191"><con:settings/><con:parameters/><con:method name="Organizations-create" method="POST" id="b57e7c2e-bc0f-435d-9fad-cd5820154ccf"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations-create">org:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations-create">org:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" mediaType="application/json" postQueryString="false" id="dcc8b480-cffa-4bee-9115-91ae79a16972"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "Building Company",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "291512345-2",
"identification-type": "business-identity-code",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="process" path="/api/async-functions/628e726d-ba02-40b0-ba4e-735c6796e690/process" id="f0028ef8-d42a-4921-99cf-51e01541c4be"><con:settings/><con:parameters/><con:method name="Method 1" method="GET" id="a7b314b1-fc75-4dbc-a254-183b71fc97d7"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:proc="http://217.78.216.195/api/async-functions/628e726d-ba02-40b0-ba4e-735c6796e690/process">proc:Response</con:element></con:representation><con:request name="Request 1" mediaType="application/json" id="d5d1dd2b-559e-4b66-9a8d-f965e4439093"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/async-functions/628e726d-ba02-40b0-ba4e-735c6796e690/process</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="customer-accounts-create" path="/api/customer-accounts-create" id="3c0d36b1-710c-4494-838d-6e759409f502"><con:settings/><con:parameters/><con:method name="Method 1" id="fcbee7e4-91f2-4c10-a0be-a03b07c747e1" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:cus="http://217.78.216.195/api/customer-accounts-create">cus:Response</con:element></con:representation><con:request name="Request 1" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "Super Cusotmer",
                "account-type": "corporate",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "c39a737e-0571-41ca-88ce-6b395469bbe0"
                    }
                }
            }  
        }
    ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="organizations" path="/api/organizations" id="16a3e786-4613-423d-a53c-8d67989baedc"><con:settings/><con:parameters/><con:resource name="4c3a48f2-6ea2-41f7-85a4-41940c6427af" path="{org_uuid}" id="ec075666-b64a-47fa-8ac5-2d2e33a66497"><con:settings/><con:parameters><con:parameter><con:name>include</con:name><con:value>identifications,contact-media</con:value><con:style>QUERY</con:style><con:default>identifications,contact-media</con:default></con:parameter><con:parameter><con:name>org_uuid</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="77200d0c-560a-4ed9-be52-6465d4741074" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:dcef="http://217.78.216.195/api/organizations/dcef65d4-e97a-45f3-b91f-6947efc4de48">dcef:Response</con:element></con:representation><con:request name="Request 1" id="d5743f05-1d64-4dc0-b461-bc43b603e263" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="${#Project#org_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>include</con:entry><con:entry>org_uuid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="related-parties" path="{org_uuid}/related-parties" id="df91adfe-406b-45e9-a01b-86f0dafa4659"><con:settings/><con:parameters><con:parameter><con:name>org_uuid</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="a6577ddc-98a6-4538-93dd-7e278ca4d989" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:rel="http://217.78.216.195/api/organizations/2d403bb1-d51c-4cac-a69d-1e381466d9a6/related-parties">rel:Response</con:element></con:representation><con:request name="Request 1" id="948a74c0-7292-427f-8049-3c6a696c7706" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="1234" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>org_uuid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="Method 1" id="bcd69c39-9397-456a-95db-55169b9f03c3" method="GET"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ identifications.identification-id "7777777-7")</con:value><con:style>QUERY</con:style><con:default>(EQ identifications.identification-id "7777777-7")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations">org:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>404 422</con:status><con:params/><con:element xmlns:ns="http://217.78.216.195/">ns:Fault</con:element></con:representation><con:request name="Request 1" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;75369021&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="customer-accounts" path="/api/customer-accounts" id="43277472-a8ea-4755-99fe-cdc7eaafd72d"><con:settings/><con:parameters/><con:method name="Method 1" id="135c8e19-282a-43be-bfcd-53eac17d8f67" method="GET"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ customer-account.name "API-CA-AUYTg")</con:value><con:style>QUERY</con:style><con:default>(EQ customer-account.name "API-CA-AUYTg")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:cus="http://217.78.216.195/api/customer-accounts">cus:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>422 500</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations">org:Fault</con:element></con:representation><con:request name="Get customer account with name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method><con:method name="Method 2" id="54c081ba-5d57-4be3-93ac-f69ebaafd89e" method="GET"><con:settings/><con:parameters><con:parameter><con:name>include</con:name><con:value>agreements</con:value><con:style>QUERY</con:style><con:default>agreements</con:default><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>filter</con:name><con:value>(EQ customer-account.name "API-CA-AUYTg")</con:value><con:style>QUERY</con:style><con:default>(EQ customer-account.name "API-CA-AUYTg")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations">org:Response</con:element></con:representation><con:request name="Get Customer account with filters" id="758d8d8d-95d4-472a-9f4b-8500be05dca4" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry><con:entry>include</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="billing-accounts-create" path="/api/billing-accounts-create" id="93f0795e-4e02-49e0-ba50-16db459245f6"><con:settings/><con:parameters/><con:method name="Method 1" id="fea4568e-bd2c-441e-8c18-e60ab34600b4" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:bil="http://217.78.216.195/api/billing-accounts-create">bil:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:bil="http://217.78.216.195/api/billing-accounts-create">bil:Response</con:element></con:representation><con:request name="Request 1" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Get billing-accounts" path="/api/billing-accounts" id="58e81e73-0779-4cd7-ae34-fcc320b72fc5"><con:settings/><con:parameters/><con:method name="Method 1" id="4179d90a-656d-4bd8-9e70-b5cf42b401a2" method="GET"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ customer-account.name "API-CA-AUYTg")</con:value><con:style>QUERY</con:style><con:default>(EQ customer-account.name "API-CA-AUYTg")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:bil="http://217.78.216.195/api/billing-accounts">bil:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="individuals-create" path="/api/individuals-create" id="9a0ca1e3-0655-464c-8d45-7a525a207473"><con:settings/><con:parameters/><con:method name="Method 1" id="fc4f39f0-7d8b-4e81-b396-c42e8c14e51b" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:ind="http://217.78.216.195/api/individuals-create">ind:Response</con:element></con:representation><con:request name="Request 1" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="individuals" path="/api/individuals" id="2ac67f80-0878-4791-9d62-9cc0fbbf622e"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ identifications.identification-id "SSN-870676449")</con:value><con:style>QUERY</con:style><con:default>(EQ identifications.identification-id "SSN-870676449")</con:default></con:parameter></con:parameters><con:method name="Method 1" id="39aaff5d-961d-4cd9-9637-6ad7a751665f" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ind="http://217.78.216.195/api/individuals">ind:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations">org:Fault</con:element></con:representation><con:request name="Request 1" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="party-relationships-create" path="/api/party-relationships-create" id="8ead2ad2-a104-4156-8106-ba4eb163cb32"><con:settings/><con:parameters/><con:method name="Method 1" id="4bee67af-83f5-4ce1-949d-f0531c349ad4" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:par="http://217.78.216.195/api/party-relationships-create">par:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:par="http://217.78.216.195/api/party-relationships-create">par:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="orders-create" path="/api/orders-create" id="8044660d-8393-4bf6-82a7-437bbc22e3ce"><con:settings/><con:parameters/><con:method name="Method 1" id="41198cd3-560e-46d1-8c06-727de8c6531e" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/vnd.api+json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:ord="http://217.78.216.195/api/orders-create">ord:Response</con:element></con:representation><con:request name="optimi" id="104a0849-05b7-4041-8112-7b3282f15a8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "orders-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "orders",
          "id": "tmpOrderId_5006015251"
        }
      }
    }
  },
  "included": [
    {
      "type": "orders",
      "id": "tmpOrderId_5006015251",
      "attributes": {
        "reference-number": "Release9#Order156",
        "order-date": "2016-06-29T15:18:37",
        "sales-info": {
          "chain-id": "3432345",
          "dealer-id": "634635346",
          "salesperson-id": "69393593",
          "channel": "webshop",
          "sales-type": "upsell"
        }
      },
      "relationships": {
        "order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId45723"
            }
          ]
        },
        "customer-account": {
          "data": {
            "type": "customer-accounts",
            "id": "ce754b01-8fab-4967-bd6a-018f61d7d9b1"
          }
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId45723",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
              },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_11498283961"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "8cc08223-4ccd-4b97-b383-d5c8b1961f22"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "6c3098a3-8a12-4e4c-8567-4c0b2f2f3dc0"
          }
        },
        "child-order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId11545"
            }
          ]
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId11545",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_2336760781"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "8cc08223-4ccd-4b97-b383-d5c8b1961f22"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "6c3098a3-8a12-4e4c-8567-4c0b2f2f3dc0"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_11498283961",
      "attributes": {
        "inputted-characteristics": {
          "CH_Nickname": "Tiinan liittymä",
          "CH_MSISDN": "358449990939",
          "CH_ICC": "8935806151010000939"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": [
            {
              "type": "order-prices",
              "id": "P_PO_OPTA_OT10437"
            },
            {
              "type": "order-prices",
              "id": "P_PO_OPT_R49266"
            }
          ]
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_Optimi"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_2336760781",
      "attributes": {
        "inputted-characteristics": {
          "CH_MSISDN": "358449990939",
          "CH_ICC": "8935806151010000939"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": []
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PS_BasicSim"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTA_OT10437",
      "attributes": {
        "price": {
          "tax-free-amount": 2.0,
          "tax-rate": 24,
          "tax-amount": 2.0,
          "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPTA_OT"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPT_R49266",
      "attributes": {
        "price": {
          "tax-free-amount": 3.0,
          "tax-rate": 24,
          "tax-amount": 5.0,         
		  "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPT_R"
          }
        }
      }
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:request></con:method><con:method name="Method 2" id="58c8f324-ab73-4e60-acd3-17ca189bbea6" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:ord="http://217.78.216.195/api/orders-create">ord:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/vnd.api+json</con:mediaType><con:params/></con:representation><con:request name="optimi basic" id="ffd57ed8-cc7f-4acb-9a2d-0f3a36dd5c20" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "orders-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "orders",
          "id": "tmpOrderId_5006015251"
        }
      }
    }
  },
  "included": [
    {
      "type": "orders",
      "id": "tmpOrderId_5006015251",
      "attributes": {
        "reference-number": "Release9#Order152",
        "order-date": "2016-06-29T15:18:37",
        "sales-info": {
          "chain-id": "3432345",
          "dealer-id": "634635346",
          "salesperson-id": "69393593",
          "channel": "webshop",
          "sales-type": "upsell"
        }
      },
      "relationships": {
        "order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId45723"
            }
          ]
        },
        "customer-account": {
          "data": {
            "type": "customer-accounts",
            "id": "e8f77e17-ae61-4c42-a774-3997c9f1bfa0"
          }
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId45723",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_11498283961"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "8e30aa54-fecc-4191-8c32-0088f0a1e855"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "bb77cbab-746b-4ae5-a1be-7d0e77371e65"
          }
        },
        "child-order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId11545"
            }
          ]
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId11545",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_2336760781"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "8e30aa54-fecc-4191-8c32-0088f0a1e855"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "bb77cbab-746b-4ae5-a1be-7d0e77371e65"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_11498283961",
      "attributes": {
        "inputted-characteristics": {
          "CH_Nickname": "Tiinan liittymä",
          "CH_MSISDN": "358449990943",
          "CH_ICC": "8935806151010000943"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": [
            {
              "type": "order-prices",
              "id": "P_PO_OPTPERA_OT10437"
            },
            {
              "type": "order-prices",
              "id": "P_PO_OPTPER_R49266"
            }
          ]
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_OptimiBasic"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_2336760781",
      "attributes": {
        "inputted-characteristics": {
          "CH_MSISDN": "358449990943",
          "CH_ICC": "8935806151010000943"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": []
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PS_BasicSim"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTPERA_OT10437",
      "attributes": {
        "price": {
          "tax-free-amount": 2.0,
          "tax-rate": 24,
          "tax-amount": 2.0,
          "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPTPERA_OT"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTPER_R49266",
      "attributes": {
        "price": {
          "tax-free-amount": 3.0,
          "tax-rate": 24,
          "tax-amount": 5.0,         
		  "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPTPER_R"
          }
        }
      }
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method><con:method name="Method 3" id="39e2c293-05d6-4f9a-b8e2-d84951923f88" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="get available msisdns" path="/api/msisdns" id="14fee47d-27f5-4dfa-9236-34eb501832c1"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ lifecycle-status "available")</con:value><con:style>QUERY</con:style><con:default>(EQ lifecycle-status "available")</con:default></con:parameter></con:parameters><con:method name="Method 1" id="8a823807-d374-41da-b887-8f7b03bb5fe3" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="sim-cards" path="/api/sim-cards" id="6d792350-ba4b-4ec6-88be-318ca5c8ba22"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ lifecycle-status "available")</con:value><con:style>QUERY</con:style><con:default>(EQ lifecycle-status "available")</con:default></con:parameter></con:parameters><con:method name="Method 1" id="d0f38648-446d-4524-b194-d32e342ea75b" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:sim="http://217.78.216.195/api/sim-cards">sim:Response</con:element></con:representation><con:request name="Request 1" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="async-functions" path="/${#Project#async_function_status_link}" id="bc0b1df1-103b-4d3a-8128-8092812cda73"><con:settings/><con:parameters/><con:method name="Method 3" id="26cf6593-5ceb-4ef9-9872-8d2a746ead85" method="GET"><con:settings/><con:parameters><con:parameter><con:name>org_async_uuid</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="8b326af7-b534-4b26-92d9-2940f6faa2dd" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/async-functions/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_async_uuid" value="${#Project#org_async_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>org_async_uuid</con:entry></con:parameterOrder></con:request></con:method><con:method name="Tracking async process status" id="c8e29f9d-aded-4762-8e03-41029f87279b" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://217.78.216.195/">ns:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/vnd.api+json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://217.78.216.195/">ns:Response</con:element></con:representation><con:request name="Request 1" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method><con:method name="Tracking async process status by related link" id="c8e29f9d-aded-4762-8e03-41029f87279b" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://217.78.216.195/">ns:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/vnd.api+json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://217.78.216.195/">ns:Response</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Request 1" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="Get organizations" path="/api/organizations" id="4127ba3c-985e-453c-97f1-54db0a892299"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ identifications.identification-id "${#Project#identification_id}")</con:value><con:style>QUERY</con:style><con:default>(EQ identifications.identification-id "${#Project#identification_id}")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="ae45d2cf-764a-40d7-a769-32dda7e5f4f6" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get Customer Account" path="/api/customer-accounts" id="4127ba3c-985e-453c-97f1-54db0a892299"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ identifications.identification-id "${#Project#identification_id}")</con:value><con:style>QUERY</con:style><con:default>(EQ identifications.identification-id "${#Project#identification_id}")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="ae45d2cf-764a-40d7-a769-32dda7e5f4f6" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>422 500</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations">org:Fault</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:org="http://217.78.216.195/api/organizations">org:Response</con:element></con:representation><con:request name="Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ account-id &quot;${#Project#account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="async-functions links validation" path="/" id="0ec4f50f-25be-428e-be60-d55417b3ffc0"><con:settings/><con:parameters/><con:method name="Method 1" id="c795005f-2dd4-465c-a19e-a264a1fc0ee7" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:bil="http://217.78.216.195/api/billing-accounts">bil:Fault</con:element></con:representation><con:request name="Request 1" id="00657e3a-9e96-426c-8f25-4ce34ba23eb3" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get Party Relationships" path="/api/party-relationships" id="4127ba3c-985e-453c-97f1-54db0a892299"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ party-id "${#Project#party_id}")</con:value><con:style>QUERY</con:style><con:default>(EQ party-id "${#Project#party_id}")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="ae45d2cf-764a-40d7-a769-32dda7e5f4f6" method="GET"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>422</con:status><con:params/><con:element xmlns:par="http://217.78.216.195/api/party-relationships">par:Fault</con:element></con:representation><con:request name="Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="Get Contact Media" path="/api/contact-media" id="4127ba3c-985e-453c-97f1-54db0a892299"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ party-id "${#Project#party_id}")</con:value><con:style>QUERY</con:style><con:default>(EQ party-id "${#Project#party_id}")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="ae45d2cf-764a-40d7-a769-32dda7e5f4f6" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="things" path="/api/things-create" id="5df6a1ba-6cfe-4f51-ba59-b99694a5dee3"><con:settings/><con:parameters/><con:method name="Method 1" id="4a4ba0a0-5e98-4aca-ba36-f7a910018040" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:thin="http://217.78.216.195/api/things">thin:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:thin="http://217.78.216.195/api/things">thin:Response</con:element></con:representation><con:request name="Request 1" id="0122f544-4c95-46ea-98d5-1cc223878342" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "things-create",
    "relationships": {
      "new-instance": {
        "data": {
            "type": "things",
            "id": "temp-id-1"
          }
      }
    }
  },
  "included": [
    {
     "type": "things",
      "id": "temp-id-1",
      "attributes": {
        "formatted-name": "Data Modem-Series-M1",
        "characteristics": {
          "operator": "DNA Modems-4-you"
        }
      },
      
      "relationships": {
        "contact-media": {
          "data": [
            { "type": "contact-media", "id": "temp-id-9" }
          ]
        }
      }
    },
    {
      "type": "identifications",
      "id": "temp_5",
      "attributes": {
        "identification-id": "9177777-3",
        "identification-type": "business-identity-code",
        "valid-for": {
         "start-datetime": "2000-10-06T07:49:37Z"
        }
      }
    },
    {
      "type": "contact-media",
      "id": "temp-id-9",
      "attributes": {
        "medium": {
          "city": "Vantaa",
          "country": "FI",
          "postal-code": "01760",
          "street": "Kajaaninkatu 13",
          "address-register-id":"12341155123"
        },
        "medium-type": "postal-address",
        "role": "work",
        "valid-for": {
          "start-datetime": "2012-12-06T07:49:37Z"
        }
      }
    }
  ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="contact-media-create" path="/api/contact-media-create" id="759157f9-a47e-4a81-abee-7b829471a716"><con:settings/><con:parameters/><con:method name="Method 1" id="0ffdfbae-6891-4f7a-81e0-ef30f62239fb" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="b31e0a89-4608-4ebc-9e75-889d0395a235" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "contact-media-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "contact-media", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "contact-media",
      "id": "temp-id-1",
      "attributes": {
        "role": "primary",
        "medium-type": "telephone-number",
        "medium": {
          "msisdn": "0441234567"
        },
        "valid-for": {
          "start-datetime": "2015-11-28T10:16:42.000Z"
        }
      },
      "relationships": {
        "party": {
          "data": { "type": "organizations", "id": "3c8b4b52-da04-4626-82fa-f3e103c4a5df" }
        }
      }
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="identifications-create" path="/api/identifications-create" id="1023e31a-216a-4734-b634-fab08ba0bf3a"><con:settings/><con:parameters/><con:method name="Method 1" id="ce0933f4-0ae8-4263-ac0a-6521ebb3258e" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="75cdf76f-409b-4a57-af8a-a00c151244c9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "identifications-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "identifications", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "identifications",
      "id": "temp-id-1",
      "attributes": {
        "identification-id": "02112016",
        "identification-type": "business-identity-code",
        "valid-for": {
          "start-datetime": "2015-10-06T07:49:37Z"
        }
      },
      "relationships": {
        "party": {
          "data": { "type": "organizations", "id": "3c8b4b52-da04-4626-82fa-f3e103c4a5df" }
        }
      }
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="sales-agreements-create" path="/api/sales-agreements-create" id="accf2c12-f0c5-43cf-b71c-fd2b59fec722"><con:settings/><con:parameters/><con:method name="Method 1" id="4d5db34d-a610-46e9-b204-4d9a50b5db5a" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:sal="http://217.78.216.195/api/sales-agreements-create">sal:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:sal="http://217.78.216.195/api/sales-agreements-create">sal:Fault</con:element></con:representation><con:request name="Request 1" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "07112016test123",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "organizations",
            "id": "31ef3064-f0a5-45f9-8c10-96e45d6ab93a"
          }
        }
      }
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="customer-accounts-terminate" path="/api/customer-accounts-terminate" id="fc0e4b31-f230-45ca-8c82-17824d55e5a5"><con:settings/><con:parameters/><con:method name="Method 1" id="d97f1313-a6be-443c-8a17-94916cdb93ae" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="cb1378db-6a77-40d6-b718-01fa73f0add9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "customer-accounts-terminate",

    "attributes": {
      "end-datetime": "2020-04-23T18:25:43.511Z"
    },
    "relationships": {
      "instance": {
        "data": { "type": "customer-accounts", "id": "1" }
      }
    }
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="product-offerings" path="/api/product-offerings" id="b86e440e-2402-4aad-b6cb-9022b899517e"><con:settings/><con:parameters/><con:method name="Method 1" id="d6010530-7980-44e1-9aa7-3392a6ef59e9" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="883ea21b-4c1f-4185-af72-acfe244691f6" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:request></con:method></con:resource><con:resource name="PO_Optimi" path="/api/specifications/PO_Optimi" id="9c833fa4-4b02-464f-a158-c958afab00be"><con:settings/><con:parameters/><con:method name="Method 1" id="78d7341c-4cb6-4791-b7e4-828f425248c2" method="GET"><con:settings/><con:parameters><con:parameter><con:name>include</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:po="http://217.78.216.195/api/specifications/PO_Optimi">po:Response</con:element></con:representation><con:request name="Request 1" id="53c6849e-2517-49c7-b5f5-6a7926f09222" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>include</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="catalog-prices" path="/api/catalog-prices" id="2aad314a-34b8-4da4-bba9-5e76ba512b20"><con:settings/><con:parameters/><con:method name="Method 1" id="201941f0-f0dc-4f83-985f-63620bcfb0fa" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="08e56f10-00c3-4a98-b773-6690f65d67b8" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="commercial-enrichments" path="/api/commercial-enrichments" id="1d5abe13-550e-4ad8-bb57-bfb83e3761c1"><con:settings/><con:parameters/><con:method name="Method 1" id="07e7f275-6b54-40b6-9ae3-d51b9db841f1" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="57355ead-a957-41e1-a830-9cffbccc97cb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="compatibility-limitations" path="/api/compatibility-limitations" id="23598af1-d714-41ff-9452-6e885daa7568"><con:settings/><con:parameters/><con:method name="Method 1" id="f4a41ce3-776f-4a8d-9055-ebee2e475aac" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="1ca98f63-f8af-4470-bcbd-1fd5329221c9" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="price-specifications" path="/api/price-specifications" id="8fc537f9-4c51-4718-8faf-857ebd0b8adf"><con:settings/><con:parameters/><con:method name="Method 1" id="588e3777-0c2b-484c-8566-0e709633c6a0" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="f65995f0-0718-4e6a-8d92-87da79e84c8e" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="product-offering-groups" path="/api/product-offering-groups" id="0a3ac59d-ea32-4121-9478-ddade7157e23"><con:settings/><con:parameters/><con:method name="Method 1" id="b4e256d5-4fb7-4902-91fb-d3a838331480" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="8a65d01c-79aa-457a-a8c7-9f66bdb8f9d0" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="specifications" path="/api/specifications" id="fc30b305-4480-4794-baf8-a344400b43b7"><con:settings/><con:parameters/><con:method name="Method 1" id="1aad799d-bef1-4255-a21c-17b1de1259d7" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="a41cba65-8466-453e-8dab-ca5303f4091a" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Get agreement-items" path="/api/agreement-items" id="a2a799a6-2545-459b-87c5-da8d715b9b9d"><con:settings/><con:parameters/><con:method name="Method 1" id="90064ea6-398e-47f2-af25-e3c41b1f115b" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="663eb752-c82f-42f3-b81a-ede52b9f7e0b" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Get agreements" path="/api/agreements" id="ebb046a4-5b0e-414f-8679-cc42c59a531b"><con:settings/><con:parameters/><con:method name="Method 1" id="5b5170ee-4857-48f2-a04d-ffa5c83c50e7" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="d5edc407-5828-4fd6-b8ef-f04ae2d6ae69" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="Get charging-relationships" path="/api/charging-relationships" id="cf33ea04-c55c-4272-b33f-1c6fa0b83d69"><con:settings/><con:parameters/><con:method name="Method 1" id="cf32291b-8b43-46dd-984e-76f5f5b8a1e9" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="1c0214e6-e2e3-449e-8299-54e4f9a505b2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="spec-to-sales-agreement-relationships-create" path="/api/spec-to-sales-agreement-relationships-create" id="7a158ca0-a8dd-4b64-bcd2-b60b74640710"><con:settings/><con:parameters/><con:method name="Method 1" id="f9678453-41f8-438c-938c-a5790c24a73d" method="POST"><con:settings/><con:parameters/><con:representation type="FAULT"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:spec="http://217.78.216.195/api/spec-to-sales-agreement-relationships-create">spec:Fault</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="ae9618f7-cc95-440f-b29c-f6b3d2777624" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "spec-to-sales-agreement-relationships-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "spec-to-sales-agreement-relationships", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "spec-to-sales-agreement-relationships",
      "id": "temp-id-1",
      "attributes": {
        "valid-for": {
          "start-datetime": "2017-07-15T07:49:37Z"
        }
      },
      "relationships": {
        "agreement": {
          "data": {
            "type": "sales-agreements",
            "id": "9d5fa219-8575-49f7-9764-a05caff776cf"
          }
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_OptimiPackage"
           }
        }
      }
    }
  ]
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="sales-prices-create" path="/api/sales-prices-create" id="6d124405-f16a-48bf-ad18-93e90abca9c5"><con:settings/><con:parameters/><con:method name="Method 1" id="3e0d3fa9-a9eb-4b89-aa1f-ce33122d015d" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="65377458-2625-4142-a87a-e5329b708b3b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "sales-prices-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-prices", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-prices",
      "id": "temp-id-1",
      "attributes": {
        "price": {
          "currency": "EUR",
          "tax-free-amount": 5.95
        },
        "valid-for": {
          "meta": {
            "type": "valid-for-datetime"
          },
          "start-datetime": "2017-10-06T07:49:37Z"
        }
      },
      "relationships": {
        "target": {
          "data": {
            "type": "sales-agreements",
            "id": "67d86eb0-fdd7-41e9-ac98-ec176503620d"
          }
        },
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "ff1ea6fd-15df-4203-baf0-baae0677f128"
           }
        }
      }
    }
  ]
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="products" path="/api/products" id="3a947486-56eb-4c25-a6e2-896e769cc7e6"><con:settings/><con:parameters/><con:resource name="Get Products With UUID" path="{product_uuid}" id="153584ca-4f61-4b06-8424-f73e730f2a55"><con:settings/><con:parameters><con:parameter><con:name>product_uuid</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="7e891b49-98cb-4a9a-bb6c-0bedb573e47a" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:fd32="http://217.78.216.195/api/products/6690fd32-7dc9-4bef-9034-65bbdc2eff9c">fd32:Response</con:element></con:representation><con:request name="Request 1" id="ab004a11-b115-4d4c-9e5e-16fdf41805a6" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>product_uuid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:method name="Method 1" id="8e0d1f98-d23d-4f78-91b7-d3e90f97ec9d" method="GET"><con:settings/><con:parameters><con:parameter><con:name>filter</con:name><con:value>(EQ specification.id "PO_OptimiBasic")</con:value><con:style>QUERY</con:style><con:default>(EQ specification.id "PO_OptimiBasic")</con:default><con:description xsi:nil="true"/></con:parameter></con:parameters><con:request name="Request 1" id="2f78827a-056a-49c4-ad5c-b4c84cf30ad7" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="products-update" path="/api/products-update" id="7a17a4ff-23fd-48e7-9fba-22592d5a6e36"><con:settings/><con:parameters/><con:method name="Method 1" id="52c9cf0f-8d1a-4b66-aea5-68257183d4b9" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/vnd.api+json</con:mediaType><con:status>202</con:status><con:params/><con:element xmlns:prod="http://52.51.43.237/api/products-update">prod:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="abcb5a69-c544-4da6-9fcd-4033c40a7078" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="things-update" path="/api/things-update" id="3a343b56-0f74-4328-8359-ec0fa2d4d916"><con:settings/><con:parameters/><con:method name="Method 1" id="0b5220dc-949f-4771-99f9-234779acecfc" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="de2644f7-bc2a-4e5a-b415-38b13ccd6a3e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "things-update",
    "attributes": {
      "formatted-name": "Cola automat, near elevators, 11th floor"
    },
    "relationships": {
      "instance": {
        "data": { "type": "things", "id": "1" }
      }
    }
  }
}
</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource><con:resource name="things" path="/api/things/{things_uuid}" id="e2e5531a-650b-424b-ad7d-936623c60a7d"><con:settings/><con:parameters><con:parameter><con:name>things_uuid</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Method 1" id="2d13b7af-0264-4b08-a5b1-f68002118eee" method="GET"><con:settings/><con:parameters/><con:request name="Request 1" id="2e0ed89c-550f-4287-9009-965d3ee1ce82" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="things_uuid" value="${#Project#things_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>things_uuid</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="products-update" path="/api/products-update" id="1d782613-6deb-4be2-8d57-48a9526a22be"><con:settings/><con:parameters/><con:method name="Method 1" id="f88513ba-b5d9-4670-a844-1216b0f94fb1" method="POST"><con:settings/><con:parameters/><con:request name="Request 1" id="19d4fa44-38f5-4156-838c-479bb9216bea" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "products-update",
    "attributes": {
    "lifecycle-status": "active",
      "characteristics": {
      "CH_Nickname":"Test123"
      }
    },
    "relationships": {
      "instance": {
        "data": { "type": "products", "id": "6986e74e-6896-400e-aa98-b92904a89df7" }
      }
    }
  }
}</con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="c9f4e6cc-e8de-45b8-87b2-5a15f8ee1156" wadlVersion="http://wadl.dev.java.net/2009/02" name="RUBIK" type="rest" definitionUrl="METADATA::" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints/></con:interface><con:testSuite name="API Test Suite" id="2b2c61e1-833e-439b-aa90-e521fada9415"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Organization" searchProperties="true" id="2b92f7c9-0bbe-47c1-bbc2-6e495b3ad977"><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="184ce557-3327-4ebd-837f-b84c87210fbf"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "organizations-create",
    "relationships": {
      "new-instance": {
        "data": {
            "type": "organizations",
            "id": "75369021"
          }
      }
    }
   },
  "included": [
    {
     "type": "organizations",
      "id": "75369021",
      "attributes": {
        "trading-name": "Europe-Asia Technologies",
        "formatted-name": "${#Project#formattedName}",
        "organization-type": "public-company",
         "language": "fin",
        "is-legal-entity": true,
        "valid-for": {
          "start-datetime": "2016-08-03T08:00:00Z",
          "end-datetime": "2999-09-03T08:00:00Z"
        }
      },
      "relationships": {
	  "party":{
        "contact-media": {
          "data": [
            { "type": "contact-media", "id": "temp_9" },
            { "type": "contact-media", "id": "temp_6" },
			{ "type": "contact-media", "id": "temp_11" },
	        { "type": "contact-media", "id": "temp_12" },
            { "type": "contact-media", "id": "temp_13" }
          ]
        },
        "identifications": {
          "data": [
            { "type": "identifications", "id": "temp_5" }
          ]
        }
		}
      }
    },
    {
      "type": "identifications",
      "id": "temp_5",
      "attributes": {
        "identification-id": "${#Project#identification_id}",
        "identification-type": "business-identity-code",
        "valid-for": {
         "start-datetime": "2000-10-06T07:49:37Z",
         "end-datetime": "2017-10-06T07:49:37Z"
        }
      }
    },
{
      "type": "contact-media",
      "id": "temp_12",
      "attributes": {
        "medium-type": "fax-number",
        "role": "home",
        "medium": {
          "msisdn": "46123456789"
        },
        "valid-for": {
          "start-datetime": "2010-04-03T08:00:00Z"
        }
      }
    },

    {
      "type": "contact-media",
      "id": "temp_9",
      "attributes": {
        "medium-type": "telephone-number",
        "role": "work",
        "medium": {
          "msisdn": "0123456789"
        },
        "valid-for": {
          "start-datetime": "2010-04-03T08:00:00Z",
          "end-datetime": "2999-04-03T08:00:00Z"
        }
      }
    },
    {
      "type": "contact-media",
      "id": "temp_11",
      "attributes": {
        "medium-type": "email-address",
        "role": "billing",
        "medium": {
          "email": "shyamson.Jyväskylä@onlinemicrosoft.qvantel.com"
        },
        "valid-for": {
          "start-datetime": "2010-04-03T08:00:00Z",
          "end-datetime": "2999-12-06T07:49:37Z"
        }
      }
    },
    {
      "type": "contact-media",
      "id": "temp_6",
      "attributes": {
        "medium": {
          "city": "Helsinki",
          "country": "FI",
          "co-address": "None",         
          "postal-code": "00575",
          "street": "10, Downing Street, Near White Church Senate Square,7th Block, 135 A"
        },
        "medium-type": "postal-address",
        "role": "billing",
        "valid-for": {
          "start-datetime": "1994-12-06T07:49:37Z",
          "end-datetime": "2999-12-06T07:49:37Z"
        }
      }
    },
    
 {
      "type": "contact-media",
      "id": "temp_13",
      "attributes": {
        "medium": {
          "city": "Helsinki",
          "country": "FI",
          "co-address": "Near Central Railyway Station",         
          "postal-code": "00575",
          "street": "10 Downing Street, Near Silver Springs, Nordenskiöldinkatu, 175 A"
        },
        "medium-type": "postal-address",
        "role": "primary",

        "valid-for": {
          "start-datetime": "1994-12-06T07:49:37Z",
          "end-datetime": "2999-12-06T07:49:37Z"
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="465c43fd-0443-4b2a-a15c-33b21dbf6542" disabled="true"><con:settings/><con:config><delay>12000</delay></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="dcc5ec64-24b8-4b09-b8e7-76d9497bee2e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("Organization Async UUID:: "+holder.getNodeValue("//*:id"))
log.info("Organization Async links.related: "+holder.getNodeValue("//*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("org_async_status_link", holder.getNodeValue("//*:related"))</script></con:config></con:testStep><con:testStep type="groovy" name="Poll async request status completion" id="e1e23bf6-69e3-47f3-a73f-e38cf02ab07c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("Organization Async UUID:: "+holder.getNodeValue("//*:id"))
log.info("Organization Async lifecycle-status: "+holder.getNodeValue("//*:lifecycle-status"))

def functionStatus = holder.getNodeValue("//*:lifecycle-status")
def i = 0
while (functionStatus != "completed") {
	log.info("Iteration " + i)
	//sleep( new Random().nextInt(5) * 1000)
	sleep(3000)
	i++
	if (i == 20) {
		assert false, "BSS API async function have not been completed in 60 seconds. Timeout in test."
	}
	def testCase = testRunner.testCase;
	def testStep = testCase.getTestStepByName("Get life-cycle status");
	testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null)
	testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep)
	testStep.run(testRunner, testStepContext)
	holder = groovyUtils.getXmlHolder("Get life-cycle status#ResponseAsXml")
	log.info("Organization Async UUID:: "+holder.getNodeValue("//*:id"))
	log.info("Organization Async lifecycle-status: "+holder.getNodeValue("//*:lifecycle-status"))
	functionStatus = holder.getNodeValue("//*:lifecycle-status")
	if (functionStatus == "completed") {
		break;
	}
}
</script></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="eb69684c-458a-4319-a7d1-eb44f0dfc55a" disabled="true"><con:settings/><con:config><delay>10000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Get_Organization_UUID_Request" id="59fd022b-1414-4070-8afb-b3aa9d625d80"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Organization_UUID_Request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4152a659-2512-4b94-a9cb-f81cb0dca6a6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0cbc3a41-fe38-42c7-8524-8d117486f2e3" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="086b218b-f5e7-491a-95a5-8d7c7c41f989" name="Script Assertion"><con:configuration><scriptText/></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_uuid" id="d69f38b1-89ea-4fa1-8ce2-e305cf3cdd9f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_Organization_UUID_Request#ResponseAsXml")

log.info("Organization UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Organization and Contact Media" id="c29ed8cd-be52-4440-b257-f2fff617e3af"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations/{org_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Organization and Contact Media" id="d5743f05-1d64-4dc0-b461-bc43b603e263" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations/dcef65d4-e97a-45f3-b91f-6947efc4de48</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="858cc535-4163-4118-9499-1ac4e93982d4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e55fc275-80a7-406a-899a-bb17f4cf625d" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>include</con:entry><con:entry>org_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_uuid" id="58997a80-5d28-40fc-b2f4-10e2fc742584"><con:settings/><con:config><script>//@Grab(groupId="com.jayway.jsonpath",artifactId="json-path",version="2.2.0")
import static com.jayway.jsonpath.JsonPath.parse
def jsonResponse=testRunner.testCase.testSteps["Get Organization and Contact Media"].testRequest.response.contentAsString

def contact_media_uuid = parse(jsonResponse).read('$.included[?(@.attributes.role==\'billing\')].id')
log.info("Organization_Contact media UUID where role is billing:: "+contact_media_uuid)
testRunner.testCase.testSuite.project.setPropertyValue("org_contact_media_billing",contact_media_uuid[0])</script></con:config></con:testStep><con:testStep type="restrequest" name="Get life-cycle status" id="8264d9fb-c908-4404-a62a-40c5b73081f3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d78ead1a-fcc7-4d80-8ec8-d00ad78cea7e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="28cb5d11-89e5-45f9-9aa2-94a69ca7b651"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "corporate",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.requestContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
holder["exists(//*:meta[1]/*:version)"]=='true'?log.info("assertion pass. meta-->version exist"):assertionList.add("meta--version is missing")
holder["exists(//*:meta[1]/*:created-at)"]=='true'?log.info("assertion pass. meta-->created-at exist"):assertionList.add("meta-->created-at is missing")
holder["exists(//*:meta[1]/*:created-by/*:actor-type)"]=='true'?log.info("assertion pass. meta-->created-by exist"):assertionList.add("meta-->created-by-->actor-type is missing")
holder["exists(//*:meta[1]/*:created-by/*:actor-id)"]=='true'?log.info("assertion pass. meta-->created-by-->actor-id exist"):assertionList.add("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null



assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="0fbfc838-a6ac-4d85-bc7f-68dad5a5dd2b"><con:settings/><con:config><delay>9000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account With Name" id="959d4df3-c543-430a-acee-608ea03692a5"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account With Name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/customer-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fb443920-4ed9-4eab-bb2a-cca87580b3a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2df4b4-2999-4df2-a255-a6279cbf3fb9" name="Contains"><con:configuration><token>account-id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e37a91b9-0167-4dfe-bea4-603635e03871" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["private", "soho", "corporate", "government"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_uuid" id="207e6df9-ae5d-4f8a-bcbe-478fffccd5a8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account With Name#ResponseAsXml")

log.info("Customer Account UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("customer_account_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cc87e5a8-1085-4e24-8661-082a291b1191" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Billing Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Billing Account_Request" id="93a5c71e-e2df-42e5-8c35-c6bd0953330e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
  "type": "billing-accounts-create",
  "relationships": {
   "new-instance": {
    "data": {
     "type": "billing-accounts",
     "id": "temp-id-1"
    }
   }
  }
},
"included": [
  {
   "type": "billing-accounts",
   "id": "temp-id-1",
   "attributes": {
    "lifecycle-status": "active",
    "payment-method": "bank-transfer",
    "billing-format": "corporate-layout-summary",
    "billing-language": "fin",
    "invoice-group": "corporate-1",
    "billing-cycle": 1,
    "billing-interval": 1,
    "billing-permissions": {
                                 "billing-allowed": "true",
                                 "overtime-interest-allowed": "true",
                                  "service-number-itemization": "true"
                },
     "characteristics": {
                                "invoice-reference-text": "pa1",
                                "description": "DNA Test"
      },
    "payment-term": 14,
    "bill-delivery-method": "e-mail",
    "tax-region": "domestic",
    "currency": "EUR",
    "name": "${#Project#customer_account_name}",
    "valid-for": {
     "start-datetime": "2011-08-03T08:33:37+02:00",
     "end-datetime": "2021-08-03T08:33:37+02:00"
    }
   },
   "relationships": {
    "customer-account": {
     "data": {
      "type": "customer-accounts",
      "id": "${#Project#customer_account_uuid}"
     }
    },
    "bill-delivery-medium": {
     "data": {
      "type": "contact-media",
      "id": "${#Project#org_contact_media_billing}"
     }
    },
    "associated-customer-account": {
     "data": {
      "type": "customer-accounts",
      "id": "${#Project#customer_account_uuid}"
     }
    }
   }
  }
]
}
</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay2" id="9dad45d2-c818-4ce0-b2b4-e01a82d9b912"><con:settings/><con:config><delay>12000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account_Request" id="d96174b4-0905-46b7-b2cb-341897dbe8d2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account_Request" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="5b22f5fc-0af8-4ac2-be02-e1c54899ae44" name="Contains"><con:configuration><token>invoice-group</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_uuid" id="e486dbea-dbba-463e-84e8-07393be7b860"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account_Request#ResponseAsXml")

log.info("Billing Account UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("billing_account_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="87e9a5ac-f559-430f-8e30-ba709c34b8ca" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Individual" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="b15b6817-b431-4dfc-830e-4c989e9a0c9c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay3" id="128e7cad-c1c8-4942-b4e3-a23515861ee7"><con:settings/><con:config><delay>12000</delay></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="0a5b68b4-8fff-469d-8814-994c337e5a37"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="0e82c5a1-6510-4eca-84ee-9979bad39c55"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="32696ed2-86a7-44db-a504-9805d95fba0d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Party Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Party Releationships_Request" id="2c2af0a6-b495-4a58-9e3a-283b54338e44"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "contact",
                "sub-role":"main",
                "rank": "1"
                              },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6107f775-0387-433a-911c-3817ca56edd9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetListOfAvailableMSISDN" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="5c489fec-7380-4ab7-a70a-20c8ac4d89ae"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://52.19.166.241:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="0c9de970-22c5-46b5-b8e7-d8589561c227"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b9510574-a605-4ea0-84b2-80837e07b4db" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetListOfAvailableSimCards" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="42665862-661f-4e85-855c-4758426a6e94"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="4ed295f4-41c6-46c9-856c-fe67c648a927"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4878ca4f-2b31-4ac0-825d-1537ce283401" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Product Order" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="OptimiProduct" id="3fc2f84e-5467-4e2a-bede-46dea50ce2fe"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OptimiProduct" id="104a0849-05b7-4041-8112-7b3282f15a8b" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "orders-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "orders",
          "id": "tmpOrderId_5006015251"
        }
      }
    }
  },
  "included": [
    {
      "type": "orders",
      "id": "tmpOrderId_5006015251",
      "attributes": {
        "reference-number": "${#Project#reference_number}",
        "order-date": "2016-06-29T15:18:37",
        "sales-info": {
          "chain-id": "3432345",
          "dealer-id": "634635346",
          "salesperson-id": "69393593",
          "channel": "webshop",
          "sales-type": "upsell"
        }
      },
      "relationships": {
        "order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId45723"
            }
          ]
        },
        "customer-account": {
          "data": {
            "type": "customer-accounts",
            "id": "${#Project#customer_account_uuid}"
          }
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId45723",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
              },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_11498283961"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "${#Project#billing_account_uuid}"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        },
        "child-order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId11545"
            }
          ]
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId11545",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_2336760781"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "${#Project#billing_account_uuid}"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_11498283961",
      "attributes": {
        "inputted-characteristics": {
          "CH_Nickname": "Tiinan liittymä",
          "CH_MSISDN": "${#Project#msisdn_available_optimi}",
          "CH_ICC": "${#Project#simcard_available_optimi}"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": [
            {
              "type": "order-prices",
              "id": "P_PO_OPTA_OT10437"
            },
            {
              "type": "order-prices",
              "id": "P_PO_OPT_R49266"
            }
          ]
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_Optimi"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_2336760781",
      "attributes": {
        "inputted-characteristics": {
          "CH_MSISDN": "${#Project#msisdn_available_optimi}",
          "CH_ICC": "${#Project#simcard_available_optimi}"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": []
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PS_BasicSim"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTA_OT10437",
      "attributes": {
        "price": {
          "tax-free-amount": 2.0,
          "tax-rate": 24,
          "tax-amount": 2.0,
          "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPTA_OT"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPT_R49266",
      "attributes": {
        "price": {
          "tax-free-amount": 3.0,
          "tax-rate": 24,
          "tax-amount": 5.0,         
		  "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPT_R"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3f47b689-4193-4a15-a2c3-1ebafc907778" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="787579d1-94bd-4aee-b2de-87cd7a42e1d4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Basic Product Order" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="OptimiBasic" id="fa0635ca-bff4-49a7-a474-01b3bbf7385b"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="OptimiBasic" id="ffd57ed8-cc7f-4acb-9a2d-0f3a36dd5c20" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "orders-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "orders",
          "id": "tmpOrderId_5006015251"
        }
      }
    }
  },
  "included": [
    {
      "type": "orders",
      "id": "tmpOrderId_5006015251",
      "attributes": {
        "reference-number": "${#Project#reference_number}",
        "order-date": "2016-06-29T15:18:37",
        "sales-info": {
          "chain-id": "3432345",
          "dealer-id": "634635346",
          "salesperson-id": "69393593",
          "channel": "webshop",
          "sales-type": "upsell"
        }
      },
      "relationships": {
        "order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId45723"
            }
          ]
        },
        "customer-account": {
          "data": {
            "type": "customer-accounts",
            "id": "${#Project#customer_account_uuid}"
          }
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId45723",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_11498283961"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "${#Project#billing_account_uuid}"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        },
        "child-order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId11545"
            }
          ]
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId11545",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_2336760781"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "${#Project#billing_account_uuid}"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_11498283961",
      "attributes": {
        "inputted-characteristics": {
          "CH_Nickname": "Tiinan liittymä",
          "CH_MSISDN": "${#Project#msisdn_available_optimi}",
          "CH_ICC": "${#Project#simcard_available_optimi}"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": [
            {
              "type": "order-prices",
              "id": "P_PO_OPTPERA_OT10437"
            },
            {
              "type": "order-prices",
              "id": "P_PO_OPTPER_R49266"
            }
          ]
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_OptimiBasic"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_2336760781",
      "attributes": {
        "inputted-characteristics": {
          "CH_MSISDN": "${#Project#msisdn_available_optimi}",
          "CH_ICC": "${#Project#simcard_available_optimi}"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": []
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PS_BasicSim"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTPERA_OT10437",
      "attributes": {
        "price": {
          "tax-free-amount": 2.0,
          "tax-rate": 24,
          "tax-amount": 2.0,
          "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPTPERA_OT"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTPER_R49266",
      "attributes": {
        "price": {
          "tax-free-amount": 3.0,
          "tax-rate": 24,
          "tax-amount": 5.0,         
		  "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_OPTPER_R"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="5b2e1cdc-3041-4e3c-abf4-568b66bd3b2d" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1235e634-e805-4e89-b7ad-9d20c29bc9c4" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create LLL Product Order" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Likuvaproduct" id="8f8074bd-9b5e-48a0-8a4e-841807be98e1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Likuvaproduct" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
  "data": {
    "type": "orders-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "orders",
          "id": "tmpOrderId_5006015251"
        }
      }
    }
  },
  "included": [
    {
      "type": "orders",
      "id": "tmpOrderId_5006015251",
      "attributes": {
        "reference-number": "${#Project#reference_number}",
        "order-date": "2016-07-07T15:18:37",
        "sales-info": {
          "chain-id": "3432345",
          "dealer-id": "634635346",
          "salesperson-id": "69393593",
          "channel": "webshop",
          "sales-type": "upsell"
        }
      },
      "relationships": {
        "order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId45723"
            }
          ]
        },
        "customer-account": {
          "data": {
            "type": "customer-accounts",
            "id": "${#Project#customer_account_uuid}"
          }
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId45723",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
        
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_11498283961"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "${#Project#billing_account_uuid}"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        },
        "child-order-items": {
          "data": [
            {
              "type": "order-items",
              "id": "tmpOrderItemsId11545"
            },
			{
				"type":"order-items",
				"id":"Orderitem_89865"
			},
			{
				"type":"order-items",
				"id":"Orderitem_89866"
			}
          ]
        }
      }
    },
    {
      "type": "order-items",
      "id": "tmpOrderItemsId11545",
      "attributes": {
        "lifecycle-status": "acknowledged",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "type": "order-products",
            "id": "tmpOrderId_2336760781"
          }
        },
        "billing-account": {
          "data": {
            "type": "billing-accounts",
            "id": "${#Project#billing_account_uuid}"
          }
        },
        "user": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    },
	{
"type": "order-items",
"id": "Orderitem_89865",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_89865"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_89866",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_89866"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
    {
      "type": "order-products",
      "id": "tmpOrderId_11498283961",
      "attributes": {
        "inputted-characteristics": {
          "CH_Nickname": "Tiinan liittymä",
          "CH_MSISDN": "${#Project#msisdn_available_optimi}",
          "CH_ICC": "${#Project#simcard_available_optimi}"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": [
            {
              "type": "order-prices",
              "id": "P_PO_OPTPAKA_OT10437"
            },
            {
              "type": "order-prices",
              "id": "P_PO_OPTPAK_R49266"
            }
          ]
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_LLL"
          }
        }
      }
    },
    {
      "type": "order-products",
      "id": "tmpOrderId_2336760781",
      "attributes": {
        "inputted-characteristics": {
          "CH_MSISDN": "${#Project#msisdn_available_optimi}",
          "CH_ICC": "${#Project#simcard_available_optimi}"
        }
      },
      "relationships": {
        "custom-prices": {
          "data": []
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PS_BasicSim"
          }
        }
      }
    },
	{
"type": "order-products",
"id": "OrderProduct_89865",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "none"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_DirectoryServices_Owner"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_89866",
"attributes": {
"inputted-characteristics": {
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_DirectoryServices_User"
}
}
}
},
    {
      "type": "order-prices",
      "id": "P_PO_OPTPAKA_OT10437",
      "attributes": {
        "price": {
          "tax-free-amount": 9,
          "tax-rate": 24,
          "tax-amount": 2.0,
          "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_LLLA_OT"
          }
        }
      }
    },
    {
      "type": "order-prices",
      "id": "P_PO_OPTPAK_R49266",
      "attributes": {
        "price": {
          "tax-free-amount": 7,
          "tax-rate": 24,
          "tax-amount": 5.0,
          "currency": "EUR"
        }
      },
      "relationships": {
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "P_PO_LLL_R"
          }
        }
      }
    }
  ]
}</con:request><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a3138a5f-1099-43ae-b572-4fd1badca855" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Organisation async resource link validation" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase id="0380e59e-bd64-4ce8-b746-e8654f1a3e48" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Organisation async link process validation" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase id="01132217-5d25-41fe-bdef-4213e634bf2a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Individual async process link validation" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase id="5af776d8-1d43-433f-8583-44514bf256c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using identifications.identification-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="e7641c27-4126-48db-beaa-59f1e7ea3e24"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-type &quot;${#Project#identificationType}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info(customerAccountName)


String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info(individualName)

def formattedNames = ['Mars','Hyderabad','Qva','Google','Lenova','Salt','Rubik','Sony','Qvantel']
def random = new Random()
def randomKey =random.nextInt(formattedNames.size()) 
testSuite.project.setPropertyValue("formattedName","${formattedNames[randomKey]}")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)</con:setupScript><con:tearDownScript>// path for the testSuite
import java.text.SimpleDateFormat

def date = new Date()
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
//sdf = new SimpleDateFormat("MM/dd/yyyy")
//log.info("date" + date)
log.info(dts)
//log.info sdf.format(date)

//Write Request to XML File 
//def folderPath = "D:/Testsuite/"+testSuite.name+'_'+dts+".xml" 
def folderPath =  'C:/bssapi_request_response/' + testSuite.name + '_' + ""+dts+ File.separator
new File(folderPath).mkdirs()

// for each testCase in the testSuite
testSuite.testCases.each { testCaseName, testCase ->

    // path for this testCase
    def folderPathSuite = folderPath + testCaseName + File.separator
    new File(folderPathSuite).mkdir()

    // for each testStep
    testCase.testSteps.each { testStepName, testStep ->
       
       def steptype = testStep.config.type
        if(steptype=="restrequest"){
               def methodtype= testStep.getHttpRequest().getMethod().toString()
               //log.info(methodtype.toString())
       if(methodtype=="POST"){
               log.info(methodtype)
        def req = new File(folderPathSuite + testStepName + '_request.xml')
        req.write(testStep.getProperty('Request').getValue())
       }
        def file = new File(folderPathSuite + testStepName + '_response.xml')
        // get the response and write to file
                
        file.write(testStep.getProperty('Response').getValue())
        }else log.info( testStep.config.type)
    }
}</con:tearDownScript></con:testSuite><con:testSuite id="0728c481-ca09-4609-85b4-322258b5096a" name="Customers Domain Entity Validations"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Organization" searchProperties="true" id="0a692f76-f2c7-47b3-8676-f8dba35c2598" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="4ff45193-5b5a-48f4-bf59-5738e0f48560"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "${#Project#formattedName}",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "${#Project#identification_id}",
"identification-type": "${#Project#identificationType}",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="75ecf376-f074-454a-bc8c-713d95b09671"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="e3419566-4025-4708-b0a9-ee7f2932ff63"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="803d4bfd-369b-4468-af98-e1175733e1dd"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="c3dd1d09-8ae7-466d-8062-8b0cfad3ac1c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="f9812b2d-f25f-4f2c-832b-1cd9522cc0a2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_link_response" id="9a7c11cb-c575-4b45-8335-f8382c63dfee"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Contact Media link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="3ea17425-ca2b-4897-8217-55cb2d8fd3a7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_details" id="043836de-fe4b-4567-afbd-a9b7587d2422"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("organization contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="14009c6f-c64b-42f3-bf8d-06a56ff55bec"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_external_references_details" id="6cffee02-d1f0-4f55-a892-17dcc106caaa"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("organization external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="91b12ec9-3933-44ae-86cb-0407b5628b1f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_related_parties_details" id="dcb20b59-90af-4180-9af6-55783153383c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("organization related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("org_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_Organization_UUID_Request" id="350eea94-abbc-40a7-a19f-84a4a3aa5c27"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Organization_UUID_Request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4152a659-2512-4b94-a9cb-f81cb0dca6a6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0cbc3a41-fe38-42c7-8524-8d117486f2e3" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="086b218b-f5e7-491a-95a5-8d7c7c41f989" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_uuid" id="39389d1d-4273-4a76-83cd-a95538b73050"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_Organization_UUID_Request#ResponseAsXml")

log.info("Organization UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Organization and Contact Media" id="519b3167-4550-4d7e-acaf-f984b01852b6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations/{org_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Organization and Contact Media" id="d5743f05-1d64-4dc0-b461-bc43b603e263" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="15162eec-a97c-4944-af24-40304d407e38-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations/dcef65d4-e97a-45f3-b91f-6947efc4de48</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="858cc535-4163-4118-9499-1ac4e93982d4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e55fc275-80a7-406a-899a-bb17f4cf625d" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bb783a90-4fa8-4815-a4a1-abf5d0e66563" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="${#Project#org_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>include</con:entry><con:entry>org_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_uuid" id="3e8b42a2-ddc9-46b7-b9ee-a0d2340bc660"><con:settings/><con:config><script>//@Grab(groupId="com.jayway.jsonpath",artifactId="json-path",version="2.2.0")
import static com.jayway.jsonpath.JsonPath.parse
def jsonResponse=testRunner.testCase.testSteps["Get Organization and Contact Media"].testRequest.response.contentAsString

def contact_media_uuid = parse(jsonResponse).read('$.included[?(@.attributes.role==\'billing\')].id')
log.info("Organization_Contact media UUID where role is billing:: "+contact_media_uuid)
testRunner.testCase.testSuite.project.setPropertyValue("org_contact_media_billing",contact_media_uuid[0])</script></con:config></con:testStep><con:setupScript/><con:properties><con:property><con:name>Get Organization and Contact Media-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0015</con:value></con:property><con:property><con:name>Get async function life-cycle status-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0003</con:value></con:property><con:property><con:name>Get Contact Media link response-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0007</con:value></con:property><con:property><con:name>Get async function resource response-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0005</con:value></con:property><con:property><con:name>Get Related Parties link response-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0011</con:value></con:property><con:property><con:name>Get External References link response-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0009</con:value></con:property><con:property><con:name>Create Organizations-Request-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0000</con:value></con:property><con:property><con:name>Get_Organization_UUID_Request-x-trace-token</con:name><con:value>d5c1d308-0744-43c9-b786-975ad3d04553-0013</con:value></con:property></con:properties></con:testCase><con:testCase id="8b789032-2000-498d-a3bd-bd7f67dfe519" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="d02e8d97-400f-42eb-91fe-794abe58c667"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "CONS",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get customer account async uuid" id="b3b2c510-6243-4edd-83dc-0d36b5e00cc7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create_Customer_Account#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="7ab43762-7da4-47a4-bb3c-32fbd2b7792c"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="602850db-ab6e-4d34-af0f-bff592e7810d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="092d9d4c-dde4-476b-9ae6-e9e18b55e748"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="93e06559-290e-41ea-9c67-0162f6f08d1e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer account_details" id="028a11fe-64d6-4370-bfbc-d520faeeae6a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("customer account type " + holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("customer account lifecycle status " + holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("customer account name " + holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("External References link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="6722f825-f966-4d0a-ac73-05d83198f48a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_external_references_details" id="87813301-6503-469a-8307-27045c02d45e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("customer account external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))

log.info("billing accounts link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account link response" id="f4f2cf65-44a8-4bca-b467-bd3e95eb7903"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="27a7e357-52db-4c7a-bef2-2f4cb1c1741e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account related billing account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))

log.info("agreements link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_related_billing_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Agreements link response" id="9b13155a-51a4-4aee-80e1-7ad1969e1597"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Agreements link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_agreement_details" id="13e90671-650f-4dda-8ecd-967897060df3"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Agreements link response#ResponseAsXml")


log.info("customer account -agreements.document-id" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
log.info("customer account -agreements.lifecycle-status" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
log.info("customer account -agreements.reference-number" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))


testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_id", holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_ref_number", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account With Name" id="6baeb904-f639-4257-a430-d5b1b3e11db5"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account With Name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="67845db2-118c-4de8-82b8-125b142d240b-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/customer-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fb443920-4ed9-4eab-bb2a-cca87580b3a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2df4b4-2999-4df2-a255-a6279cbf3fb9" name="Contains"><con:configuration><token>account-id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e37a91b9-0167-4dfe-bea4-603635e03871" name="Script Assertion"><con:configuration><scriptText>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account value is [" + holder.getNodeValue('//*:attributes[1]/*:account') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_uuid" id="7f66ebae-22bb-4eec-abff-811e782205d8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account With Name#ResponseAsXml")

log.info("Customer Account UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("customer_account_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="c1c1b250-2422-4394-b938-7276e24127d8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Billing Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Billing Account_Request" id="f6411f2b-db67-4bb6-b312-40b14d194c87"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
       "characteristics": {
       "account-description": "product usage in prepaid manned"
                            }
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
    "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
    },
        "billing-profile":{
          "data": { "type": "billing-profiles", "id": "temp-id-2" }
        }
      }
    },
    {
      "type": "billing-profiles",
      "id": "temp-id-2",
      "attributes": {
        "payment-method": "bank-transfer",
        "billing-format": "B2B_S",
        "payment-term": 14,
        "billing-cycle": 1,
    "overtime-interest-rate": 0,
    "invoice-group": "INV1",
    "billing-permissions": {
        "billing-allowed": "True",
        "service-number-itemization-allowed": "False",
        "overtime-interest-allowed": "False"
    },
    "characteristics": {
                             "edi-code": "0037987650004",
                             "einvoice-operator-id": "0037333222113",
                             "einvoice-reference": "0037000111224",
                             "billing-interval-start-date": "2016-12-19T16:00:37+02:00",
                             "billing-contract-description": "subscription activation"},
        "billing-interval": {
          "interval": "month",
          "count": 1
        },
        "billing-language": "fin",
        "bill-delivery-method": "f-invoice"
      },
      "relationships": {
        "bill-delivery-medium":{
          "data": { "type": "contact-media", "id": "${#Project#org_contact_media_billing}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get billing account async uuid" id="8d2de9a7-5c09-4805-a816-d8460eddca81"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Billing Account_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("billing_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="0b23bdfe-d7bd-465b-93ca-65496b0772b0"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="ea2a3f95-679d-4643-916d-9a7df894dcb6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="554acb60-6617-4d2d-af22-3ba183aa9643"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="9249d982-5418-40ac-96f9-d684725d7269"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="8f725324-5719-4a1d-9cd1-af4411335f40"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account UUID:: "+holder.getNodeValue("//*:id"))
log.info("Billing Accountid: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing account lifecycle status: "+holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("Billing account async customer account link: "+holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
log.info("Billing account async associated customer account link: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("billing_account_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_lifescycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_CustomerAccountLink_Validation" id="129f4865-eee2-4ab7-8c70-42427137a83a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_CustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0007" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_details" id="7a54fa51-9403-432a-b476-406824ee6773"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_CustomerAccountLink_Validation#ResponseAsXml")

log.info("billing account - Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("billing account - Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("billing account - Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

</script></con:config></con:testStep><con:testStep type="groovy" name="get_billing_associated_customer_account_details_link" id="3059567d-a2d6-4159-b933-e1d914dc6b0d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Customer Accountid:: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="0e97e5f4-5292-4905-8ffe-4f1400cc0287"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0010" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_associated_customer_account_details" id="0a55f1b1-e231-48ed-9314-c88daa589f54"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_AssociatedCustomerAccountLink_Validation#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account - Associated Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing Account - Associated Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("Billing Account - Associated Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("Billing account async external references link: "+holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_External_ReferencesLink_Validation" id="b02889f7-ae7e-4de2-beca-783e8b9fb130"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_External_ReferencesLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_external_references_details_of_biiling_account" id="7314349e-62b5-4c5f-9a69-6922ceaca943"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_External_ReferencesLink_Validation#ResponseAsXml")

log.info("Billing Account - External References id:: "+holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("Billing Account - External References type:: "+holder.getNodeValue("//*:attributes[1]/*:reference-type"))


testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_id", "1")
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_type","test")

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account_Request" id="b6ff460a-3d45-4907-a9a6-a2f128642ea9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account_Request" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="718807b0-0c64-493f-8309-d02f7d775d39-0014" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("currency value is [" + holder.getNodeValue('//*:attributes[1]/*:currency') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("tax-region value is [" + holder.getNodeValue('//*:attributes[1]/*:tax-region') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("customer-account value is [" + holder.getNodeValue('//*:relationships[1]/*:customer-account') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="97652ff5-0134-49e9-aa0d-b3fc57008f8e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Individual" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="8f286457-ceea-4a61-a9fa-64b712acc00f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get individual async uuid" id="0e51443a-1edd-4950-b6e4-6397b944d595"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Individual_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="b8b1a820-86f2-4133-9de9-fefe291e564f"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="74aa8824-ba7f-4c57-b6ec-3270004a7e7f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="195e7141-9990-4977-be19-60571ba5b3c0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="04e7e08c-ad20-49c4-94e7-31546efac54e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_formattedname" id="d0a394ba-f33d-441d-ab3d-2486b3edb245"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual formatted Name " + holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
log.info("Identification link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_formattedName", holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get identifications link response" id="34e7f439-0ac5-4a4a-931c-11b24fa77b85"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get identifications link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_identification_details" id="b2812434-b443-4d46-b2f5-ef8e7786e850"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get identifications link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual identification id " + holder.getNodeValue("//*:attributes[1]/*:identification-id"))
log.info("individual identification type " + holder.getNodeValue("//*:attributes[1]/*:identification-type"))
log.info("Contact Media link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_identification_id", holder.getNodeValue("//*:attributes[1]/*:identification-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_identificationType", holder.getNodeValue("//*:attributes[1]/*:identification-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="504bb930-9939-4cde-b4ce-ab19291fcfc3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_contact_media_details" id="4dbcdd58-069b-478d-9677-989052530e69"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("individual contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="b58c23a2-9ce8-498e-84be-4ddd23671d39"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_external_references_details" id="336ccf83-21d6-41d2-b117-eb221dddfd5b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("individual external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="a366e757-9bfa-4a5b-b4d6-9f1e46a7abdd"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0013"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_related_parties_details" id="49c0c49e-1ae6-4858-ab89-d9355c197119"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("individual related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="472b675a-153f-44eb-941e-36d060f76af2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="48e3cb07-691c-42f8-98ff-b5667a8a241d-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="7b7f3a0e-f492-4f1b-9b51-05b3b93a9238"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="929c80ac-4700-48ab-8067-bb8fe0fd112d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Party Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Party Releationships_Request" id="182fecd4-4df8-441e-9417-b619c07796d2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="7e68a05f-44f9-401d-8862-ca34b8b6438e-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "contact",
                "sub-role":"main",
                "rank": "1"
                              },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4793c1f1-3d8b-4816-8327-447cc7804960" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get party relationships async uuid" id="0c31201b-fe69-49d6-854d-207048f8ae94"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("party_rel_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="809e9f4a-cd9b-4701-8bb6-772a59ac91f6"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Party Releationships_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="3974f765-8061-4e13-bd2a-d9ffb6298cbb"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_async_resource_link_response" id="ba94b336-a0a3-48da-b0d2-f4876fd3205f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_async_resource_link_response" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="7e68a05f-44f9-401d-8862-ca34b8b6438e-0004" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get party relatiionship details" id="1acab11b-68f1-4824-9446-8f8577b5e371"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_async_resource_link_response#ResponseAsXml")

log.info("party relationship role: "+holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))


testRunner.testCase.testSuite.project.setPropertyValue("party_relationship_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("party_id", holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("target_id", holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="8b49bb79-4ca9-4003-8954-b396f62cf944" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create things" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create things_Request" id="7a860559-e49c-4e7d-8876-54e39ebca25a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create things_Request" id="0122f544-4c95-46ea-98d5-1cc223878342" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e67d0319-d324-4920-9628-345f2acd1737-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "things-create",
    "relationships": {
      "new-instance": {
        "data": {
            "type": "things",
            "id": "temp-id-1"
          }
      }
    }
  },
  "included": [
    {
     "type": "things",
      "id": "temp-id-1",
      "attributes": {
        "formatted-name": "${#Project#formattedName_things}",
        "characteristics": {
          "operator": "DNA Modems-4-you"
        }
      },
      
      "relationships": {
        "contact-media": {
          "data": [
            { "type": "contact-media", "id": "temp-id-9" }
          ]
        }
      }
    },
    {
      "type": "identifications",
      "id": "temp_5",
      "attributes": {
        "identification-id": "${#Project#identification_id_things}",
        "identification-type": "${#Project#identificationType}",
        "valid-for": {
         "start-datetime": "2000-10-06T07:49:37Z"
        }
      }
    },
    {
      "type": "contact-media",
      "id": "temp-id-9",
      "attributes": {
        "medium": {
          "city": "Vantaa",
          "country": "FI",
          "postal-code": "01760",
          "street": "Kajaaninkatu 13",
          "address-register-id":"12341155123"
        },
        "medium-type": "postal-address",
        "role": "work",
        "valid-for": {
          "start-datetime": "2012-12-06T07:49:37Z"
        }
      }
    }
  ]
}
</con:request><con:originalUri>http://217.78.216.195/api/things</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7b1d8842-35d3-457e-bdc5-de0053cbbe7c" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get things async uuid" id="8bad4640-9660-4594-9f8b-f19a0986b360"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create things_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("things_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="5f1f9d21-ac15-48e6-bce5-7ed94f215773"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create things_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="22c18479-d7f6-42ca-94d3-b1dec3051c9d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e67d0319-d324-4920-9628-345f2acd1737-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="0431ca7c-c52a-4eb9-9cc4-de8c0833f37f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="cac6cdf7-d4a0-4b24-ae83-40155b38ad25"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e67d0319-d324-4920-9628-345f2acd1737-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_contact_media_link_response" id="46913734-b412-4097-996d-1d07eb498ae8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Contact Media link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="e6816a4f-c55d-4aec-b397-fd3a5fee7193"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e67d0319-d324-4920-9628-345f2acd1737-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_contact_media_details" id="70dd7f65-3156-4725-b5c6-b814688a8099"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("things contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("things contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("things_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("things_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="bb5ba5fe-8775-49c4-a709-7c7abb142fda"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e67d0319-d324-4920-9628-345f2acd1737-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_external_references_details" id="292894c1-3a9b-46a6-9699-ee66754221eb"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("things external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("things external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("things_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("things_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="25a8ea52-1871-4c65-9181-8276a309888d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e67d0319-d324-4920-9628-345f2acd1737-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_related_parties_details" id="9a261ab4-338a-4419-83ec-e163a303fe75"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("things related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("things_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="5d91ee71-d0bb-45e9-8b41-15ec249a16d7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Contact Media" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Contact Media_Request" id="64721234-96c6-4d50-a04d-aeced93913f0"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/contact-media-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Contact Media_Request" id="b31e0a89-4608-4ebc-9e75-889d0395a235" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="ec32ff22-11e2-4444-a26b-c0c5e8e43301-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "contact-media-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "contact-media", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "contact-media",
      "id": "temp-id-1",
      "attributes": {
        "role": "primary",
        "medium-type": "telephone-number",
        "medium": {
          "msisdn": "0441234567"
        },
        "valid-for": {
          "start-datetime": "2015-11-28T10:16:42.000Z"
        }
      },
      "relationships": {
        "party": {
          "data": { "type": "organizations", "id": "${#Project#org_uuid}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/contact-media-create</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get contact media async uuid" id="4526b530-8697-4143-97bd-b5ff0009258d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Contact Media_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("contact_media_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="dae3752e-d707-4df8-adbe-086879598e4f"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Contact Media_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="dc145fb1-4f75-47ef-859e-e1cc27726ed7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="ec32ff22-11e2-4444-a26b-c0c5e8e43301-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="6c63cba1-be56-47c3-b0ed-32b649adbcda"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="bd075f58-fb54-4c37-8977-e6bc03bb268d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="ec32ff22-11e2-4444-a26b-c0c5e8e43301-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_details" id="b262fe17-b398-4239-ae22-2ff9be7c91ef"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Party link of Contact Media in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:party[1]/*:links[1]/*:related"))
log.info("create contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("create contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))


testRunner.testCase.testSuite.project.setPropertyValue("create_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("create_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:party[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Party link response" id="793440ec-e9c0-4d1a-afac-01a03c0d5e3a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Party link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="ec32ff22-11e2-4444-a26b-c0c5e8e43301-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_party_details" id="3dc9de3a-d874-4e72-9d2d-a6527a9d0669"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Party link response#ResponseAsXml")


log.info("create contact media party id   " + holder.getNodeValue("//*:id"))
log.info("create contact media party formatted name  " + holder.getNodeValue("//*:attributes[1]/*:formatted-name"))


testRunner.testCase.testSuite.project.setPropertyValue("create_contactmedia_party_id", holder.getNodeValue("//*:attributes[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("create_contactmedia_party_formattedname", holder.getNodeValue("//*:attributes[1]/*:formatted-name"))

</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="5bddb1aa-2ccf-4d7c-b1ca-52cd1a1e326e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Identification" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="create identification_Request" id="a1a656c2-c6ed-47c2-a313-bb3da85dc722"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/identifications-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create identification_Request" id="75cdf76f-409b-4a57-af8a-a00c151244c9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="302ee2f6-e6da-4b82-b1d7-7b4ea113ca71-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "identifications-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "identifications", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "identifications",
      "id": "temp-id-1",
      "attributes": {
        "identification-id": "${#Project#createidentification_id}",
        "identification-type": "${#Project#identificationType}",
        "valid-for": {
          "start-datetime": "2015-10-06T07:49:37Z"
        }
      },
      "relationships": {
        "party": {
          "data": { "type": "organizations", "id": "${#Project#org_uuid}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/identifications-create</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get identification async uuid" id="b7a43249-dd7d-44d0-86aa-2224e2127818"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create identification_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("identification_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="f0133121-19df-49fb-a803-41770493f557"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create identification_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="dc146477-8c6c-409f-b552-424804cd25cf"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="302ee2f6-e6da-4b82-b1d7-7b4ea113ca71-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="7af550f5-3c96-4fc8-9b47-4479951f213d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="f09709af-109f-4846-800b-6fd1916ed0c0"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="302ee2f6-e6da-4b82-b1d7-7b4ea113ca71-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_identifications_details" id="275d0c92-5f3f-48ce-a0db-09ebd55014ff"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Party link of create identification in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:party[1]/*:links[1]/*:related"))
log.info("create identifications - id " + holder.getNodeValue("//*:attributes[1]/*:identification-id"))
log.info("create identifications - type " + holder.getNodeValue("//*:attributes[1]/*:identification-type"))


testRunner.testCase.testSuite.project.setPropertyValue("create_identification_id", holder.getNodeValue("//*:attributes[1]/*:identification-id"))
testRunner.testCase.testSuite.project.setPropertyValue("create_identification_type", holder.getNodeValue("//*:attributes[1]/*:identification-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:party[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Party link of Create identification response" id="8808424e-93fd-449e-bfaa-d0d6ea40003e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Party link of Create identification response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="302ee2f6-e6da-4b82-b1d7-7b4ea113ca71-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_identifications_party_details" id="dd5a4ff0-ec09-4582-90de-0a6172ae5d58"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Party link of Create identification response#ResponseAsXml")


log.info("create identification - party id   " + holder.getNodeValue("//*:id"))
log.info("create identification - party formatted name  " + holder.getNodeValue("//*:attributes[1]/*:formatted-name"))


testRunner.testCase.testSuite.project.setPropertyValue("create_identification_party_id", holder.getNodeValue("//*:attributes[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("create_identification_party_formattedname", holder.getNodeValue("//*:attributes[1]/*:formatted-name"))

</script></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="59b7371b-9707-486c-98f1-fa97be9c28fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Package Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create optimi package order" id="7c2e4ad0-68e0-4e26-9e04-bf7fac58c720"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi package order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_10815"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_10815",
"attributes": {
"reference-number": "${#Project#reference_number}",
"order-date": "2016-07-07T15:04:43",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_10815"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_10815",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10815"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_10975"
},
{
"type":"order-items",
"id":"Orderitem_10976"
},
{
"type":"order-items",
"id":"Orderitem_10977"
},
{
"type":"order-items",
"id":"Orderitem_10978"
},
{
"type":"order-items",
"id":"Orderitem_10979"
},
{
"type":"order-items",
"id":"Orderitem_10980"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_10975",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10975"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10976",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10976"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10977",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10977"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10978",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10978"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10979",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10979"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
}
,
{
"type": "order-items",
"id": "Orderitem_10980",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10980"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10815",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10815"
}]
},
"specification": {
"data": {
"type": "specifications",
"id": "PO_OptimiPackage"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10975",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10967"
}]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_Voice1400"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10976",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10968"
}]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_Sms300"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10977",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10969"
},
{
"type": "order-prices",
"id": "OrderPrice_10970"
}]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_Data50M"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10978",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10979",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10980",
"attributes": {
"inputted-characteristics": {
"CH_Nickname": "Qvantel"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"specification": {
"data": {
"type": "specifications",
"id": "PS_Nickname"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10815",
"attributes": {
"price": {
"tax-free-amount": 2,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTPAKA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10967",
"attributes": {
"price": {
"tax-free-amount": 3.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_OPTV1400_R"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10968",
"attributes": {
"price": {
"tax-free-amount": 1,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_OPTS300_R"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10969",
"attributes": {
"price": {
"tax-free-amount": 2,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_DAT50MA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10970",
"attributes": {
"price": {
"tax-free-amount": 14.5,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_DAT50M_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)
log.info("TestSuite Setup Script setting identification_id = '" + randomNumber + "'")

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info("TestSuite Setup Script setting customer_account_name = '" + customerAccountName + "'")

String formattedNames  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName",formattedNames)
log.info("TestSuite Setup Script setting formattedName = '" + formattedNames + "'")

String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info("TestSuite Setup Script setting individual_name = '" + individualName + "'")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)
log.info("TestSuite Setup Script setting reference_number = '" + refNumber + "'")

def identificationTypes = ['business-identity-code']
def random = new Random()
def randomKey =random.nextInt(identificationTypes.size()) 
testSuite.project.setPropertyValue("identificationType","${identificationTypes[randomKey]}")
log.info("TestSuite Setup Script setting identificationType = '" + "${identificationTypes[randomKey]}" + "'")

String randomNumber1 = org.apache.commons.lang.RandomStringUtils.random(7, false, true)
testSuite.project.setPropertyValue("identification_id_things",randomNumber1)
log.info("TestSuite Setup Script setting identification_id_things = '" + randomNumber1 + "'")

String formattedNames1  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName_things",formattedNames1)
log.info("TestSuite Setup Script setting formattedName_things = '" + formattedNames1 + "'")

String randomNum = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("createidentification_id",randomNum)
log.info("TestSuite Setup Script setting createidentification_id = '" + randomNum + "'")

// FEATURE RUBT-XXXX
// Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript><con:tearDownScript><![CDATA[// FEATURE: Store all used property values to a given location for later use
//
def  props = new Properties()
def names = testSuite.project.getPropertyNames()
log.info("Storing properties to a file")
if (names) {
	names.each { name -> 
     	if (!name.equals("bssapi_runtime_properties")) {
          	def pValue = testSuite.project.getPropertyValue(name)
               log.info("   Save: " + name + " = " + pValue)
               if (pValue == null) {
               	pValue = ""
               }
               props.setProperty(name, pValue)
          }
	}
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     def projectPath = groovyUtils.projectPath
     def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
     def loc = propsFileLoc.replaceAll('"', '')
     propsFileLoc = loc
     if (!(new File(propsFileLoc)).exists()) {
     	if (projectPath.trim().length() > 0) {
          	propsFileLoc = projectPath + "\\" + propsFileLoc
         	}
	} else {
     	//log.info("Using given propertied file from: " + propsFileLoc)
     }
     testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
     File propFile = new File(propsFileLoc)
     props.store(propFile.newWriter(), null)
     log.info("Used properties saved to a file: " + propsFileLoc)
} else {
     log.info("There does not seem to have any project properties to write, check it.")
}

// FEATURE: Store requests and responses to a file for debugging purposes to given location
//
import java.text.SimpleDateFormat
def loggingEnabled = testSuite.project.getPropertyValue('message_logging_enabled')
if (loggingEnabled.length() > 0 && loggingEnabled.toLowerCase().equals("true")) {
	log.info("Message logging enabled.")
	def date = new Date()
	def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	projectPath = groovyUtils.projectPath
	if (projectPath.trim().length() > 0) {
		projectPath += "/"
	}
	//Write Request to XML File 
	def folderPath =  projectPath + 'bssapi_messaging_logs/' + testSuite.name.replaceAll(' ', '_') + '_' + dts + File.separator
	log.info("Available requests and responses stored as files to: " + folderPath) 
	new File(folderPath).mkdirs()
	
	// for each testCase in the testSuite
	testSuite.testCases.each { testCaseName, testCase ->
		// path for this testCase
	    	if (testCase != null && testCase.disabled == false) {
		    	def folderPathSuite = folderPath + testCaseName.replaceAll(' ', '_') + File.separator
		    	new File(folderPathSuite).mkdir()
		
		    	// for each testStep
		    	testCase.testSteps.each { testStepName, testStep ->       
		    		def idx = testCase.getTestStepIndexByName(testStepName)
		    		//log.info("TEST STEP INDEX: " + idx)
		    		if (testStep != null && testStep.disabled == false) {
			    		def steptype = testStep.config.type
			        	if(steptype == "restrequest") {
			          	def methodtype = testStep.getHttpRequest().getMethod().toString()
			               //log.info(methodtype.toString())
			       		if(methodtype == "POST") {
			        			def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_request.json')
			        			def value = testStep.getProperty('Request').getValue()
			        			if (value != null) {
			        				log.info("   Write: " + file.name)
			        				file.write(value)
			        			} else {
			        				log.info("   Skip : Value was NULL for POST response content: " + testCaseName + "." + testStepName)
			        			}
			       		}
			       		if (testStep != null) {
				        		if (testStep.getProperty('Response') != null) {
					        		// get the response and write to file 
					        		def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_response.json')
					        		def value = testStep.getProperty('Response').getValue()
					        		if (value != null) {
					        			log.info("   Write: " + file.name)
					        			file.write(value)
					        		} else {
					        			log.info("   Skip : Value was NULL for GET response content: " + testCaseName + "." + testStepName)
					        		}
				        		} else {
				        			log.info("No response available for " + testCaseName + "." + testStepName)
				        		}
			       		}
			        	}
		        	} else {
		       		//log.info(testStep.config.type)
		        	}
		    	}
	    }
	}
} else {
	log.info("Message logging disable by default. Set 'message_logging_enabled' to 'true', if request/responses is wanted to be stored as JSON files.")
}

// FEATURE RUBT-XXXX
// Removing X-Trace-Token headers from REST requests
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
log.info("Clearing X-Trace-Token headers from REST requests")
testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null && testCase.disabled == false) {
		testCase.testSteps.each { testStepName, testStep ->       
			if (testStep != null && testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					// Clearing X-Trace-Token header
				     def headers = testStep.getHttpRequest().getRequestHeaders()
			     	headers.remove("X-Trace-Token")
			     	testStep.getHttpRequest().setRequestHeaders(headers)
				}
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
]]></con:tearDownScript></con:testSuite><con:testSuite id="63f5c777-c270-4364-94dc-ac89397374fe" name="Management Order"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Organization" searchProperties="true" id="7c558461-0fb1-482c-9287-382f66d2b397" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="f50d9874-e2bf-4c01-8012-5f844c850892"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "${#Project#formattedName}",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "${#Project#identification_id}",
"identification-type": "${#Project#identificationType}",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="d3058995-3e2e-414e-ae1b-edfe848ca9ce"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="9a31d2c0-e377-4d21-a41a-4d84c219fdbb"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="9af060c9-5482-4d4f-80c3-77769f898bf9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="d7340162-a00f-480f-a6f2-f76c7a5ef29e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="26aeafae-a33e-45fc-9f24-f14a36c93ac4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_link_response" id="30e76a52-a197-4128-9d22-cfba68d699f7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Contact Media link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="d67cb1e9-0d0f-45cc-8a36-7259eb71fcd8"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_details" id="19c82977-33c8-4071-922e-b7a253e482ee"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("organization contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="4d121c08-2bd0-44ee-baaa-ba8b1a4f2e0a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_external_references_details" id="37196a29-4ae3-4d70-a33a-8057b4736cfb"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("organization external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="223f6aef-4c09-4f8c-aec6-132f185598a4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_related_parties_details" id="10565087-e10f-42ab-9f70-8d2662678aa8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("organization related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("org_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_Organization_UUID_Request" id="6eb27aec-225d-4798-9e83-a68d8cb0b2a7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Organization_UUID_Request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4152a659-2512-4b94-a9cb-f81cb0dca6a6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0cbc3a41-fe38-42c7-8524-8d117486f2e3" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="086b218b-f5e7-491a-95a5-8d7c7c41f989" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_uuid" id="41c39472-f505-41cf-8ec7-84cf3f6c3208"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_Organization_UUID_Request#ResponseAsXml")

log.info("Organization UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Organization and Contact Media" id="cd93662e-dc3c-4146-bde7-6739193214b5"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations/{org_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Organization and Contact Media" id="d5743f05-1d64-4dc0-b461-bc43b603e263" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fd058ac0-11ca-437f-9ad5-0d657166de6e-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations/dcef65d4-e97a-45f3-b91f-6947efc4de48</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="858cc535-4163-4118-9499-1ac4e93982d4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e55fc275-80a7-406a-899a-bb17f4cf625d" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bb783a90-4fa8-4815-a4a1-abf5d0e66563" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="${#Project#org_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>include</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_uuid" id="f1bbec06-5ee1-48b7-bb79-3e4c760c79c2"><con:settings/><con:config><script>//@Grab(groupId="com.jayway.jsonpath",artifactId="json-path",version="2.2.0")
import static com.jayway.jsonpath.JsonPath.parse
def jsonResponse=testRunner.testCase.testSteps["Get Organization and Contact Media"].testRequest.response.contentAsString

def contact_media_uuid = parse(jsonResponse).read('$.included[?(@.attributes.role==\'billing\')].id')
log.info("Organization_Contact media UUID where role is billing:: "+contact_media_uuid)
testRunner.testCase.testSuite.project.setPropertyValue("org_contact_media_billing",contact_media_uuid[0])</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e9eab508-450d-4a3b-8c22-1ee8abc4a218" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="23507c1e-aebf-4969-963a-031053122eb7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "CONS",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get customer account async uuid" id="46769361-e0fd-4b16-ad50-cbdb561d2f1c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create_Customer_Account#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="9940cf29-79ce-4bdd-91a9-139c052f229d"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="93820882-cf51-4365-be93-fb420a4decf2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="cddc0f36-fd0d-445c-a92c-ad4a0af22af1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="8565ed1d-ef90-4e4e-a437-df93410f3b76"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer account_details" id="e99c69a0-4eb2-49a4-a091-f9cd5360700f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("customer account type " + holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("customer account lifecycle status " + holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("customer account name " + holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("External References link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="1cf4fab7-5c80-4fe8-b3c7-10baae62787a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_external_references_details" id="e296f345-31fd-4bb5-8227-2a023260b8c2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("customer account external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))

log.info("billing accounts link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account link response" id="c28d8f4d-11dc-4fdb-ad6d-2ab9a7675b17"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="5c6d3cd6-e563-4e65-86e4-da2932392e62"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account related billing account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))

log.info("agreements link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_related_billing_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Agreements link response" id="a0031121-3904-4617-8ef8-b4249dfaf862"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Agreements link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_agreement_details" id="30bb81ac-8599-44a1-9f54-bbb9ac91c9e5"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Agreements link response#ResponseAsXml")


log.info("customer account -agreements.document-id" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
log.info("customer account -agreements.lifecycle-status" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
log.info("customer account -agreements.reference-number" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))


testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_id", holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_ref_number", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account With Name" id="6a1a0e07-f726-4cd1-bfe1-6703cf49e289"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account With Name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="f1012b4d-52c0-4380-a5c6-be702dc1d41a-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/customer-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fb443920-4ed9-4eab-bb2a-cca87580b3a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2df4b4-2999-4df2-a255-a6279cbf3fb9" name="Contains"><con:configuration><token>account-id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e37a91b9-0167-4dfe-bea4-603635e03871" name="Script Assertion"><con:configuration><scriptText>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account value is [" + holder.getNodeValue('//*:attributes[1]/*:account') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_uuid" id="5392a1f0-c741-4bd1-a9ed-7086474d5f80"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account With Name#ResponseAsXml")

log.info("Customer Account UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("customer_account_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="252e6196-398b-41c2-a17a-3f66c38fefd3" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Billing Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Billing Account_Request" id="701a91a0-c5e6-48d5-a0ca-c35aab3c4c77"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
       "characteristics": {
       "account-description": "product usage in prepaid manned"
                            }
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
    "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
    },
        "billing-profile":{
          "data": { "type": "billing-profiles", "id": "temp-id-2" }
        }
      }
    },
    {
      "type": "billing-profiles",
      "id": "temp-id-2",
      "attributes": {
        "payment-method": "bank-transfer",
        "billing-format": "B2B_S",
        "payment-term": 14,
        "billing-cycle": 1,
    "overtime-interest-rate": 0,
    "invoice-group": "INV1",
    "billing-permissions": {
        "billing-allowed": "True",
        "service-number-itemization-allowed": "False",
        "overtime-interest-allowed": "False"
    },
    "characteristics": {
                             "edi-code": "0037987650004",
                             "einvoice-operator-id": "0037333222113",
                             "einvoice-reference": "0037000111224",
                             "billing-interval-start-date": "2016-12-19T16:00:37+02:00",
                             "billing-contract-description": "subscription activation"},
        "billing-interval": {
          "interval": "month",
          "count": 1
        },
        "billing-language": "fin",
        "bill-delivery-method": "f-invoice"
      },
      "relationships": {
        "bill-delivery-medium":{
          "data": { "type": "contact-media", "id": "${#Project#org_contact_media_billing}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get billing account async uuid" id="bbe29263-a664-4086-9722-bf467556b9ea"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Billing Account_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("billing_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="87b6f082-b289-403c-87bc-d8a055c3a94a"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="20ba6db3-54c0-4d66-8aee-ca94d243c5c7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="ee06a388-6050-425a-9055-b359e80b6042"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="6234d9f1-73ae-476b-8d5f-86d5a54d8f8a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="dd0637f1-d131-423b-a960-d86c3e1ea605"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account UUID:: "+holder.getNodeValue("//*:id"))
log.info("Billing Accountid: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing account lifecycle status: "+holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("Billing account async customer account link: "+holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
log.info("Billing account async associated customer account link: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("billing_account_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_lifescycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_CustomerAccountLink_Validation" id="d809ef72-581e-48d2-b0a1-c208559ecbda"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_CustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0007" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_details" id="ad59d45b-34f4-408b-8dcf-d7d039d053e1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_CustomerAccountLink_Validation#ResponseAsXml")

log.info("billing account - Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("billing account - Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("billing account - Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

</script></con:config></con:testStep><con:testStep type="groovy" name="get_billing_associated_customer_account_details_link" id="3947f9d6-7275-4692-aaea-c21ab415654c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Customer Accountid:: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="14185425-21d2-4ca7-9a17-dd174dedc1e4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0010" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_associated_customer_account_details" id="201acf26-3859-40d3-8f80-23543120051f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_AssociatedCustomerAccountLink_Validation#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account - Associated Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing Account - Associated Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("Billing Account - Associated Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("Billing account async external references link: "+holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_External_ReferencesLink_Validation" id="50f189e2-9c22-4c26-94e6-eaf341349136"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_External_ReferencesLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_external_references_details_of_biiling_account" id="a7582999-d57a-4109-8349-ca874e01770a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_External_ReferencesLink_Validation#ResponseAsXml")

log.info("Billing Account - External References id:: "+holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("Billing Account - External References type:: "+holder.getNodeValue("//*:attributes[1]/*:reference-type"))


testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_id", "1")
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_type","test")

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account_Request" id="9ce84da3-e6ff-4cac-927d-3afa17d70b5f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account_Request" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e350426b-48cc-4e66-b2a1-6727ffd5b953-0014" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("currency value is [" + holder.getNodeValue('//*:attributes[1]/*:currency') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("tax-region value is [" + holder.getNodeValue('//*:attributes[1]/*:tax-region') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("customer-account value is [" + holder.getNodeValue('//*:relationships[1]/*:customer-account') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c482c536-b13f-4bfa-9d5d-94663fa0335e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Individual" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="bbe7df8c-4c6e-447a-8f3c-66a7ee241eee"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "number": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get individual async uuid" id="63bf6041-b4ae-477e-9fc3-8df61fc4c818"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Individual_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="bc81ca0d-d409-4d17-9c67-4fd72902b2e6"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="d836709e-086f-4613-af75-b142459613d2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="e11aaf5c-9772-4a96-97c7-2391b99cdf86"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="8f49ea5f-dc61-427e-8197-39cac9314bf2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_formattedname" id="61988d28-f84a-4eb0-99d1-ff91d9583da6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual formatted Name " + holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
log.info("Identification link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_formattedName", holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get identifications link response" id="3664ac4a-02cf-4d57-bb68-6ede035b4a3f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get identifications link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_identification_details" id="579984d2-de86-44c7-81c4-5faf13501c04"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get identifications link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual identification id " + holder.getNodeValue("//*:attributes[1]/*:identification-id"))
log.info("individual identification type " + holder.getNodeValue("//*:attributes[1]/*:identification-type"))
log.info("Contact Media link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_identification_id", holder.getNodeValue("//*:attributes[1]/*:identification-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_identificationType", holder.getNodeValue("//*:attributes[1]/*:identification-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="d14e1746-e095-476b-bc5e-7601f53b7779"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_contact_media_details" id="5bf19423-03a6-4d7c-a39f-57075a7e18a4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("individual contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="d4e2cefb-a5c5-49c7-aaf4-0dae92d4c850"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_external_references_details" id="e134fff6-ea0e-42b4-a836-a4be3da8b31a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("individual external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="201d6fb8-4747-42ea-8af6-b42b4750a7b7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0013"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_related_parties_details" id="f083306b-ec3d-449d-8bd4-c4dd0cd4beae"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("individual related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="4a3c1e69-8d3a-4077-8046-d24357209844"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="7d269d46-5a02-4651-98ec-2ccbd508f1e1-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="f1472a5a-1f2b-4c7c-a948-bec47d23a54d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="18ea1a6b-1e77-43af-8fc0-143b51791633" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Party Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Party Releationships_Request" id="ab7662f2-45aa-4138-b8dc-8a06ec62dea7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="2e954754-8e66-47fc-ac22-1feb533db4c7-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "contact",
                "sub-role":"main",
                "rank": "1"
                              },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4793c1f1-3d8b-4816-8327-447cc7804960" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get party relationships async uuid" id="ed148d4d-208e-4c20-93fc-f534b774bed0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("party_rel_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="b4fffc35-dea3-4b91-855b-bc7f2e675323"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Party Releationships_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="b2cd4f33-beb9-4e38-b556-eb23b6947ab1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_async_resource_link_response" id="1b619375-1405-4f43-b177-5f056dd828e1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_async_resource_link_response" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="2e954754-8e66-47fc-ac22-1feb533db4c7-0004" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get party relatiionship details" id="8e4544ea-e08f-40ce-9f49-baf3a2f6830f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_async_resource_link_response#ResponseAsXml")

log.info("party relationship role: "+holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))


testRunner.testCase.testSuite.project.setPropertyValue("party_relationship_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("party_id", holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("target_id", holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="18aa8680-d7b7-4a91-aee1-ff3ac99b3afc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create things" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Create things_Request" id="81026d54-e986-43dd-972a-08193a475936"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create things_Request" id="0122f544-4c95-46ea-98d5-1cc223878342" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="604c80b4-a23d-4cac-8403-58f6d36d9732-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "things-create",
    "relationships": {
      "new-instance": {
        "data": {
            "type": "things",
            "id": "temp-id-1"
          }
      }
    }
  },
  "included": [
    {
     "type": "things",
      "id": "temp-id-1",
      "attributes": {
        "formatted-name": "${#Project#formattedName_things}",
        "characteristics": {
          "operator": "DNA Modems-4-you"
        }
      },
      
      "relationships": {
        "contact-media": {
          "data": [
            { "type": "contact-media", "id": "temp-id-9" }
          ]
        }
      }
    },
    {
      "type": "identifications",
      "id": "temp_5",
      "attributes": {
        "identification-id": "${#Project#identification_id_things}",
        "identification-type": "${#Project#identificationType}",
        "valid-for": {
         "start-datetime": "2000-10-06T07:49:37Z"
        }
      }
    },
    {
      "type": "contact-media",
      "id": "temp-id-9",
      "attributes": {
        "medium": {
          "city": "Vantaa",
          "country": "FI",
          "postal-code": "01760",
          "street": "Kajaaninkatu 13",
          "address-register-id":"12341155123"
        },
        "medium-type": "postal-address",
        "role": "work",
        "valid-for": {
          "start-datetime": "2012-12-06T07:49:37Z"
        }
      }
    }
  ]
}
</con:request><con:originalUri>http://217.78.216.195/api/things</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d0f87388-f51d-4d63-8ab6-c4d5e9d752b6" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="34a5a88b-e4e4-4d7e-ace8-ca838274ddeb" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get things async uuid" id="1d6e89aa-409a-4046-ad4e-6af9a680e43e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create things_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("things_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="98064692-e29d-49ed-839d-f8980b4d42ac"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create things_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="b3bea765-f403-4b29-967e-e15e0ef7b920"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="604c80b4-a23d-4cac-8403-58f6d36d9732-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="b24e2ca2-b6a9-4438-92fe-56de30fd585b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="d900fc77-7321-4b93-a66e-bb4424614f55"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="604c80b4-a23d-4cac-8403-58f6d36d9732-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_contact_media_link_response" id="c96dcaa8-3195-40bd-acc4-e7d4eba6de73"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Contact Media link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="e987c9f4-1a7f-4f8d-ba62-08fb191d2d88"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="604c80b4-a23d-4cac-8403-58f6d36d9732-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_contact_media_details" id="ee1699db-256b-49d7-9b02-029e58bf1f3a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("things contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("things contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("things_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("things_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="ad1821eb-8b1d-4c0c-9199-7424ba1f7db8"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="604c80b4-a23d-4cac-8403-58f6d36d9732-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_external_references_details" id="c2a9ec50-3463-4a20-a834-6e2854c27e47"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("things external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("things external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("things_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("things_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="98b8facc-aded-4830-9909-a09bd9890d7e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="604c80b4-a23d-4cac-8403-58f6d36d9732-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_related_parties_details" id="f7d73870-4481-4629-9ab7-423e872252fa"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("things related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("things_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fb773ac7-63e0-4b96-abdc-0f802a81b18c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Sales Agreement" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create sales agreement_request" id="fbf8873a-23ae-45e9-9b10-0c824686c8ad"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="9e8f7c66-b45e-4341-a716-233a2a10ab34-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "organizations",
            "id": "${#Project#org_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement async uuid" id="bdd2843e-b24c-48df-bf90-c0b1b4310e39"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="2bba08eb-98a2-4c63-a445-b0e56e70d6de"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)
log.info("TestSuite Setup Script setting identification_id = '" + randomNumber + "'")

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info("TestSuite Setup Script setting customer_account_name = '" + customerAccountName + "'")

String formattedNames  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName",formattedNames)
log.info("TestSuite Setup Script setting formattedName = '" + formattedNames + "'")

String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info("TestSuite Setup Script setting individual_name = '" + individualName + "'")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)
log.info("TestSuite Setup Script setting reference_number = '" + refNumber + "'")

def identificationTypes = ['business-identity-code']
def random = new Random()
def randomKey =random.nextInt(identificationTypes.size()) 
testSuite.project.setPropertyValue("identificationType","${identificationTypes[randomKey]}")
log.info("TestSuite Setup Script setting identificationType = '" + "${identificationTypes[randomKey]}" + "'")

String randomNumber1 = org.apache.commons.lang.RandomStringUtils.random(7, false, true)
testSuite.project.setPropertyValue("identification_id_things",randomNumber1)
log.info("TestSuite Setup Script setting identification_id_things = '" + randomNumber1 + "'")

String formattedNames1  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName_things",formattedNames1)
log.info("TestSuite Setup Script setting formattedName_things = '" + formattedNames1 + "'")

String randomNum = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("createidentification_id",randomNum)
log.info("TestSuite Setup Script setting createidentification_id = '" + randomNum + "'")

// FEATURE RUBT-XXXX: Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript><con:tearDownScript><![CDATA[// FEATURE: Store all used property values to a given location for later use
//
def  props = new Properties()
def names = testSuite.project.getPropertyNames()
log.info("Storing properties to a file")
if (names) {
	names.each { name -> 
     	if (!name.equals("bssapi_runtime_properties")) {
          	def pValue = testSuite.project.getPropertyValue(name)
               log.info("   Save: " + name + " = " + pValue)
               if (pValue == null) {
               	pValue = ""
               }
               props.setProperty(name, pValue)
          }
	}
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     def projectPath = groovyUtils.projectPath
     def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
     def loc = propsFileLoc.replaceAll('"', '')
     propsFileLoc = loc
     if (!(new File(propsFileLoc)).exists()) {
     	if (projectPath.trim().length() > 0) {
          	propsFileLoc = projectPath + "\\" + propsFileLoc
         	}
	} else {
     	//log.info("Using given propertied file from: " + propsFileLoc)
     }
     testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
     File propFile = new File(propsFileLoc)
     props.store(propFile.newWriter(), null)
     log.info("Used properties saved to a file: " + propsFileLoc)
} else {
     log.info("There does not seem to have any project properties to write, check it.")
}

// FEATURE: Store requests and responses to a file for debugging purposes to given location
//
import java.text.SimpleDateFormat
def loggingEnabled = testSuite.project.getPropertyValue('message_logging_enabled')
if (loggingEnabled.length() > 0 && loggingEnabled.toLowerCase().equals("true")) {
	log.info("Message logging enabled.")
	def date = new Date()
	def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	projectPath = groovyUtils.projectPath
	if (projectPath.trim().length() > 0) {
		projectPath += "/"
	}
	//Write Request to XML File 
	def folderPath =  projectPath + 'bssapi_messaging_logs/' + testSuite.name.replaceAll(' ', '_') + '_' + dts + File.separator
	log.info("Available requests and responses stored as files to: " + folderPath) 
	new File(folderPath).mkdirs()
	
	// for each testCase in the testSuite
	testSuite.testCases.each { testCaseName, testCase ->
		// path for this testCase
	    	if (testCase != null && testCase.disabled == false) {
		    	def folderPathSuite = folderPath + testCaseName.replaceAll(' ', '_') + File.separator
		    	new File(folderPathSuite).mkdir()
		
		    	// for each testStep
		    	testCase.testSteps.each { testStepName, testStep ->       
		    		def idx = testCase.getTestStepIndexByName(testStepName)
		    		//log.info("TEST STEP INDEX: " + idx)
		    		if (testStep != null && testStep.disabled == false) {
			    		def steptype = testStep.config.type
			        	if(steptype == "restrequest") {
			          	def methodtype = testStep.getHttpRequest().getMethod().toString()
			               //log.info(methodtype.toString())
			       		if(methodtype == "POST") {
			        			def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_request.json')
			        			def value = testStep.getProperty('Request').getValue()
			        			if (value != null) {
			        				log.info("   Write: " + file.name)
			        				file.write(value)
			        			} else {
			        				log.info("   Skip : Value was NULL for POST response content: " + testCaseName + "." + testStepName)
			        			}
			       		}
			       		if (testStep != null) {
				        		if (testStep.getProperty('Response') != null) {
					        		// get the response and write to file 
					        		def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_response.json')
					        		def value = testStep.getProperty('Response').getValue()
					        		if (value != null) {
					        			log.info("   Write: " + file.name)
					        			file.write(value)
					        		} else {
					        			log.info("   Skip : Value was NULL for GET response content: " + testCaseName + "." + testStepName)
					        		}
				        		} else {
				        			log.info("No response available for " + testCaseName + "." + testStepName)
				        		}
			       		}
			        	}
		        	} else {
		       		//log.info(testStep.config.type)
		        	}
		    	}
	    }
	}
} else {
	log.info("Message logging disable by default. Set 'message_logging_enabled' to 'true', if request/responses is wanted to be stored as JSON files.")
}

// FEATURE RUBT-XXXX
// Removing X-Trace-Token headers from REST requests
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
log.info("Clearing X-Trace-Token headers from REST requests")
testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null && testCase.disabled == false) {
		testCase.testSteps.each { testStepName, testStep ->       
			if (testStep != null && testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					// Clearing X-Trace-Token header
				     def headers = testStep.getHttpRequest().getRequestHeaders()
			     	headers.remove("X-Trace-Token")
			     	testStep.getHttpRequest().setRequestHeaders(headers)
				}
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
]]></con:tearDownScript></con:testSuite><con:testSuite name="BSS API  Regression Test Suite" id="bb453129-2f14-49ce-a365-aec21ec51599"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="77364f7f-8274-444d-8415-ba885ae814d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetListOfAvailableMSISDN" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="b9e1a950-8b64-4ca5-8353-13929c48f169"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="dfc98551-c100-4b31-a00c-a6853df86125"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4c3335ff-a11b-4198-a831-4a9c3ce513fa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetListOfAvailableSimCards" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="bd716437-dff9-40be-82ca-a2c8a9674459"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="8dac0c72-91cc-4047-9eed-0a77d761ec6c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f6826ca0-792a-4acd-be6b-a6010a3a18d0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using identifications.identification-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="3ffd444e-e6a1-4856-a6b9-2b03a4c62504"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d07bc0b7-28fc-4d7e-a148-d377d9f32913-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1c717af9-e8ef-4a08-b1a4-f7e9042b5432" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using identifications.identification-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="58cca7c3-a25d-4133-b6ba-aad66fde4e72"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="4d64d22f-775b-48da-a6b4-4d007383de1a-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-type &quot;${#Project#identificationType}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="07a08088-29f2-48ef-8ef7-133ff73d78aa" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using formatted-name" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="ff9cdb21-0bff-402e-b9ec-c94e747ac5e5"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="0e5d3c65-2b73-49a9-944e-7e4360242948-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6d086728-70f2-42c3-85e0-f6f519b27344" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e61a6e4d-543f-482b-8dd8-e132b0e9a0ef" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ formatted-name &quot;${#Project#formattedName}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d6d46c03-a028-4cbc-90c8-5513631ed5b5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using contact-media.medium-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="1c397a2b-8c21-41c6-aa01-f75b94f3ddec"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="c4c11f1d-a382-48cf-b5d8-a120dc577b2e-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ contact-media.medium-type &quot;${#Project#org_contactmedia_mediumtype}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="86e0f411-c92c-4fcf-84a8-305e7c149bc6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using contact-media.role" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="35cb7403-70b9-413f-b265-6d53673435be"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="78bfe8a4-7448-4567-b744-d272997ddc35-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ contact-media.role &quot;${#Project#org_contactmedia_role}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="36dffd0f-6213-4adc-9edb-f457f7ac70a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using external-references.reference-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="b57ceaed-1355-489b-bc84-aee2a44190e9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="12599d01-33f9-46b9-8ca9-17c7a51d3aa7-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-id  &quot;${#Project#org_ext_ref_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3242ce8d-ac72-4153-b222-244124e27e90" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using external-references.reference-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="6652bb94-c5e0-405b-808c-c8c06ea89de1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="c496efe2-b801-4e37-91ae-d99475b75814-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-type  &quot;${#Project#org_ext_ref_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cd260526-f717-4105-9e20-aa8bebb73e45" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Organisation using related-parties.role" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="d4ba8c2d-1cee-4890-ba74-2cd187c2b968"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="988d5432-2a40-41e1-9d3b-0cfbfa0ff717-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ related-parties.role &quot;${#Project#org_related_party_role}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="6f49a2e2-2e5c-4b1b-8def-3b3b6e359539" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using account-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="7278cee5-ed83-45bd-9e8c-dd6d0bb42f70"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="0fc1db80-4c79-4076-9964-5ca991457496-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ account-id  &quot;${#Project#billing_account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c4f41f52-b3ff-44f0-b4e4-e35d978745f1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using customer account-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="3cdfc6ea-6ba5-4add-b9ec-cea60f9b14da"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="33ece278-dda5-4876-9eb8-c1a8575393ee-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.account-id  &quot;${#Project#billingaccount_customer_account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0f7422f0-b0d8-49db-98af-1b5dc084aa0c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using customer account-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="3ef45fd9-4bff-4104-b5d8-f1f8235141e2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5554fd71-1292-48eb-a269-b0008dda80fe-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.account-type  &quot;${#Project#billingaccount_customer_account_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1bdc8fcb-6a59-4567-b284-ef6a5f3930f7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using customer account-name" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="d3c3ed66-6e98-4c3a-ba8d-a069b037abbc"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="402c9392-8e97-45c3-8c41-11f75beaf83f-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name  &quot;${#Project#billingaccount_customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a8909199-5a2a-4f9f-88da-10885c01f700" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using lifecycle-status" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="d639c391-66c7-4deb-a368-1c15e4187b6d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="8e4a20cb-deee-40e1-9c6c-22cb60e47356-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ lifecycle-status  &quot;${#Project#billing_lifescycle_status}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5a6e9c51-18f4-4510-bdf0-c9fb5db8a327" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using external-references.reference-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="24b0e439-b2d5-426d-b935-ba55f4f0c763"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="c928c410-2e9a-4b64-a688-43bd39e31907-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ad7ec799-b90f-46f5-8126-d85edeb3d6d2" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-id  &quot;${#Project#billingaccount_ext_ref_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b7872dd4-3ba0-4454-b0fd-9bcb03367d6a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using external-references.reference-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="38c4c945-7a35-4a4c-a4e2-7dccfb0b8966"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d7ae75b4-d118-46d3-8c4f-67632db455a8-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f3c744e1-8826-4709-ad8e-356822fbd5d3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-type  &quot;${#Project#billingaccount_ext_ref_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8b6e1391-2b5c-43a9-b267-21767c2e9239" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using associated customer account-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="7b42a5eb-4e44-463a-8a0c-52d4857840d1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="54049fff-59a3-44ee-ba64-c75552745819-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.account-id  &quot;${#Project#billingaccount_associatedcustomer_account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="0fc760d6-4377-4ad7-8fe9-e8c52a115b9b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using associated customer account-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="0912518c-149a-4e8c-b11e-898dc6faace6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="69d6e67a-7fb6-4ed0-9675-e916abc4b65f-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.account-type  &quot;${#Project#billingaccount_associatedcustomer_account_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="23cb30de-63a7-485c-bf38-671dc4871837" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Billing Account using associated customer account-name" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="8c8acdba-c516-4ed7-a0a9-5b1a7c0f80a4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="c1af01ff-1a58-4430-afdd-09e4d171a7ee-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name  &quot;${#Project#billingaccount_associatedcustomer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="2f034b7e-8291-4ea1-bf9d-f44d3ae09d84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using account-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="3ddabdbc-9e27-4997-bf64-9b8e3b3b1eaf"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b1d548e9-f32f-4b02-964f-7ce015e5d56b-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ account-id &quot;${#Project#cust_account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b8954513-e87b-4ebc-8756-1b5667dc5cce" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using customer account-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="d1d891e3-1b23-40bd-bdec-d1e71465df3e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b969bd8b-973e-4522-a6a0-8a68228376bc-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ account-type &quot;${#Project#cust_account_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b55d8ba3-d047-423e-acad-1f556d47b01a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using customer account-name" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="2c05546a-d8a5-4176-9f04-bce75eb242de"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="8f6f93b6-e572-417e-a71f-0347b131ef11-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#cust_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3a1ef65f-7340-4404-8024-7decc753c25a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using billing account-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="1a99592b-dae0-44b2-8c03-05de866947d3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="7c2d2d21-9e35-4906-ba97-16b2fede0c9b-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ billing-accounts.account-id &quot;${#Project#billing_account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9c97d421-775f-40a6-8546-ea0de7e44581" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using lifecycle-status" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="efbbf97f-c6b1-4575-ab75-e3314bcce87d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5a566ada-c4f2-44e0-9708-254a506e843e-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ lifecycle-status &quot;${#Project#customer_lifescycle_status}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bd433081-6919-4eeb-9195-098627a7706d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using external-references.reference-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="fe796785-a6b1-438b-887e-9f495da6bc3f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="4c0ff9d1-cc2e-46be-b6a6-2ee54b3d1ac3-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-id  &quot;${#Project#cust_acc_ext_ref_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c273993c-e7ea-47cf-964d-9bde54af8d38" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using external-references.reference-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="ecfc4536-ef98-4073-a83d-622f32eeed47"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="0c524d18-c2b7-48c2-859e-867a34fe60ac-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-type &quot;${#Project#cust_acc_ext_ref_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ec51085c-37d7-474f-a61f-38490ecacf35" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using agreements.document-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="f081ce60-2ddc-4e10-9ab6-33cc26646e9e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1dcc583c-7799-4278-bced-76c4ea9bb1de-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ agreements.document-id &quot;${#Project#cust_acc_agreement_id&quot;" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4e24c5e4-f19d-4962-935b-d50debbc5cdc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using agreements.lifecycle-status" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="e23ea1c0-1681-44dd-b65e-8512d0b0cdcf"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d7214e08-b826-4f54-8732-7d80e940b2e3-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ agreements.document-id &quot;${#Project#cust_acc_agreement_lifecycle_status&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="b9b427be-bcd9-4739-9331-48eabb819df9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using agreements.reference-number" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="663b8269-738b-4992-b877-c2145dd813aa"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="87706753-6a76-4743-9875-62219435fc5d-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ agreements.document-id &quot;${#Project#cust_acc_agreement_ref_number&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f196710f-7f0b-4fdb-8309-abdb41b2a8da" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using contact-media.medium-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="ebc63680-1a8d-43de-b265-ebaa5fabed97"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5c69b2eb-ac26-4368-862e-97b6ce434991-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ contact-media.medium-type &quot;${#Project#ind_contactmedia_mediumtype}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f4474065-1cf1-49fc-bb39-3683fc3ea275" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using contact-media.role" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="3bad1d83-8cdd-441c-ab0c-57b510340e3e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="796a6e51-e876-4aea-9a37-9ed76c5969f7-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ contact-media.role &quot;${#Project#ind_contactmedia_role}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="9b1e745e-cd18-4820-9730-ca697e34f388" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using external-references.reference-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="92061f1e-794c-4cfc-b18b-471262d743a7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="030ac85b-fbe5-4932-b365-fae32d2fbd6e-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-id  &quot;${#Project#ind_ext_ref_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5e9c8901-b8a5-4785-85e9-a47e3b7f27e0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using external-references.reference-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="e249b629-e9ae-42c9-8ec9-59430fc21304"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d1704cd2-f061-4e84-a24a-42dc9669b019-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ external-references.reference-type  &quot;${#Project#ind_ext_ref_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="573443de-379d-497d-913f-7bd53fecb417" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using formatted-name" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="fab0a972-ed23-4b28-925b-a4943366a3d2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="4828b52c-a513-40d5-9a02-c495e15761ac-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6d086728-70f2-42c3-85e0-f6f519b27344" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e61a6e4d-543f-482b-8dd8-e132b0e9a0ef" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ formatted-name &quot;${#Project#ind_formattedName}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f7067d5d-cd5f-4ab5-84c9-72d50258960e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using identifications.identification-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="f3a741c6-daab-4e12-a70f-7448f7c4f9bb"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e6db13e3-8f4a-4840-b0a7-9c4805e52ad8-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#ind_identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cd0b03d3-da98-4758-83cf-cde6a6c83d73" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using identifications.identification-type" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="a8eb73b0-644c-4e7b-9095-a48bfdabb5af"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="757bd3ae-7df9-407e-b733-71bd10c221c3-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-type &quot;${#Project#identificationType}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a2ffe23d-2023-483f-9829-41b65059d8a7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Individual using related-parties.role" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="6539e311-275a-4199-99b9-41f22f2cc9bf"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="da3288cd-f267-4d51-bdd9-d4dfc63b6ed5-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ related-parties.role &quot;${#Project#ind_related_party_role}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c591a9cd-0c4d-4ab7-8902-ee3af1853316" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get party relationships using party.id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="6c2433ae-1a27-431a-b7d4-b55ed66ea178"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="3eff499c-dd22-4f70-9ce0-80f3046e9751-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:relationships[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:relationships[1]/*:target)"]=='true'? log.info("assertion pass. attributes-->target exist"):assertionList.add("attributes-->target is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ party.id &quot;${#Project#party_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a30cc8bc-2227-4c17-9a6e-b32c2b5d613a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get party relationships using target.id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="e4fc0236-3360-4c9f-9760-9e327efea44e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="8791646b-a63a-4d3e-a763-916cefccbe07-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:relationships[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:relationships[1]/*:target)"]=='true'? log.info("assertion pass. attributes-->target exist"):assertionList.add("attributes-->target is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ target.id &quot;${#Project#target_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1b92d270-deff-4db2-a743-e88d5f2b82f8" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get party relationships using role" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="d278dc78-ee80-4fe3-bec9-9daf0fd2de93"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="c5e53403-42b9-4dab-b549-40cfc9f5a5cd-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:relationships[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:relationships[1]/*:target)"]=='true'? log.info("assertion pass. attributes-->target exist"):assertionList.add("attributes-->target is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ role &quot;${#Project#party_relationship_role}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="ae339250-edc2-4009-aa9d-54cc4f2c8be5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Contact Media Using party.id" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="b3945710-4865-4b88-b3e8-3d55c447a152"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/contact-media" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/contact-media</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fcf0e0e9-7f44-46a3-90da-6231b81b934b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b14170f1-baf1-4b2d-803c-89f4c4b53933" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:attributes[1]/*:medium)"]=='true'? log.info("assertion pass. attributes-->medium exist"):assertionList.add("attributes-->medium is missing")
holder["exists(//*:attributes[1]/*:medium-type)"]=='true'? log.info("assertion pass. attributes-->medium-type exist"):assertionList.add("attributes-->medium-type is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ party.id &quot;${#Project#contactmedia_party_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="01af9e83-dbca-4677-8bc6-9fe40b097665" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Contact Media Using medium-type" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="756a132d-f707-4160-8363-206d36da0bce"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/contact-media" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/contact-media</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fcf0e0e9-7f44-46a3-90da-6231b81b934b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b14170f1-baf1-4b2d-803c-89f4c4b53933" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:attributes[1]/*:medium)"]=='true'? log.info("assertion pass. attributes-->medium exist"):assertionList.add("attributes-->medium is missing")
holder["exists(//*:attributes[1]/*:medium-type)"]=='true'? log.info("assertion pass. attributes-->medium-type exist"):assertionList.add("attributes-->medium-type is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ medium-type &quot;${#Project#contact_media_medium_type}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="69422840-2787-4bc1-b118-8c75689a83df" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Contact Media Using party.formatted-name" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="5a168c6b-9a9c-4535-a0ff-a0e3f5f4500b"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/contact-media" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/contact-media</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fcf0e0e9-7f44-46a3-90da-6231b81b934b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b14170f1-baf1-4b2d-803c-89f4c4b53933" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:attributes[1]/*:medium)"]=='true'? log.info("assertion pass. attributes-->medium exist"):assertionList.add("attributes-->medium is missing")
holder["exists(//*:attributes[1]/*:medium-type)"]=='true'? log.info("assertion pass. attributes-->medium-type exist"):assertionList.add("attributes-->medium-type is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ party.formatted-name &quot;${#Project#party_formatted_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="90c3cef8-1494-4230-a6e2-9c209929bdb6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Contact Media Using role" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="63e6e586-9c53-4779-a98c-14f2034d882a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/contact-media" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings/><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/contact-media</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fcf0e0e9-7f44-46a3-90da-6231b81b934b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b14170f1-baf1-4b2d-803c-89f4c4b53933" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:party)"]=='true'? log.info("assertion pass. attributes-->party exist"):assertionList.add("attributes-->party is missing")
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:attributes[1]/*:medium)"]=='true'? log.info("assertion pass. attributes-->medium exist"):assertionList.add("attributes-->medium is missing")
holder["exists(//*:attributes[1]/*:medium-type)"]=='true'? log.info("assertion pass. attributes-->medium-type exist"):assertionList.add("attributes-->medium-type is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ role &quot;${#Project#contactmedia_role}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
def props = new Properties()
def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
log.info("testing the print of property values **************" + propsFileLoc)
def loc = propsFileLoc.replaceAll('"', '')
log.info("testing the print of property values" + loc)
propsFileLoc = loc
if (!(new File(propsFileLoc)).exists()) propsFileLoc = projectPath + "\\" + propsFileLoc else log.info("Using given propertied file from: " + propsFileLoc)
testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
File propsFile = new File(propsFileLoc)
if (propsFile.exists()) {
	log.info("Loading properties from a file: " + propsFileLoc)
	propsFile.withInputStream {
	    props.load(it)
	}
	props.each {
	  log.info("   Set: " + it.key + " = " + it.value)
	  testSuite.project.setPropertyValue(it.key,it.value)
	}
} else {
	//log.info("Generating properties or using defaults")
	//
	// Running BSS API Validations test suite first generates needed random data.
}

// FEATURE RUBT-XXXX: Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript><con:tearDownScript><![CDATA[// FEATURE: Store all used property values to a given location for later use
//
def  props = new Properties()
def names = testSuite.project.getPropertyNames()
log.info("Storing properties to a file")
if (names) {
	names.each { name -> 
     	if (!name.equals("bssapi_runtime_properties")) {
          	def pValue = testSuite.project.getPropertyValue(name)
               log.info("   Save: " + name + " = " + pValue)
               if (pValue == null) {
               	pValue = ""
               }
               props.setProperty(name, pValue)
          }
	}
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     def projectPath = groovyUtils.projectPath
     def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
     def loc = propsFileLoc.replaceAll('"', '')
     propsFileLoc = loc
     if (!(new File(propsFileLoc)).exists()) {
     	if (projectPath.trim().length() > 0) {
          	propsFileLoc = projectPath + "\\" + propsFileLoc
         	}
	} else {
     	//log.info("Using given propertied file from: " + propsFileLoc)
     }
     testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
     File propFile = new File(propsFileLoc)
     props.store(propFile.newWriter(), null)
     log.info("Used properties saved to a file: " + propsFileLoc)
} else {
     log.info("There does not seem to have any project properties to write, check it.")
}

// FEATURE: Store requests and responses to a file for debugging purposes to given location
//
import java.text.SimpleDateFormat
def loggingEnabled = testSuite.project.getPropertyValue('message_logging_enabled')
if (loggingEnabled.length() > 0 && loggingEnabled.toLowerCase().equals("true")) {
	log.info("Message logging enabled.")
	def date = new Date()
	def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	projectPath = groovyUtils.projectPath
	if (projectPath.trim().length() > 0) {
		projectPath += "/"
	}
	//Write Request to XML File 
	def folderPath =  projectPath + 'bssapi_messaging_logs/' + testSuite.name.replaceAll(' ', '_') + '_' + dts + File.separator
	log.info("Available requests and responses stored as files to: " + folderPath) 
	new File(folderPath).mkdirs()
	
	// for each testCase in the testSuite
	testSuite.testCases.each { testCaseName, testCase ->
		// path for this testCase
	    	if (testCase != null && testCase.disabled == false) {
		    	def folderPathSuite = folderPath + testCaseName.replaceAll(' ', '_') + File.separator
		    	new File(folderPathSuite).mkdir()
		
		    	// for each testStep
		    	testCase.testSteps.each { testStepName, testStep ->       
		    		def idx = testCase.getTestStepIndexByName(testStepName)
		    		//log.info("TEST STEP INDEX: " + idx)
		    		if (testStep != null && testStep.disabled == false) {
			    		def steptype = testStep.config.type
			        	if(steptype == "restrequest") {
			          	def methodtype = testStep.getHttpRequest().getMethod().toString()
			               //log.info(methodtype.toString())
			       		if(methodtype == "POST") {
			        			def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_request.json')
			        			def value = testStep.getProperty('Request').getValue()
			        			if (value != null) {
			        				log.info("   Write: " + file.name)
			        				file.write(value)
			        			} else {
			        				log.info("   Skip : Value was NULL for POST response content: " + testCaseName + "." + testStepName)
			        			}
			       		}
			       		if (testStep != null) {
				        		if (testStep.getProperty('Response') != null) {
					        		// get the response and write to file 
					        		def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_response.json')
					        		def value = testStep.getProperty('Response').getValue()
					        		if (value != null) {
					        			log.info("   Write: " + file.name)
					        			file.write(value)
					        		} else {
					        			log.info("   Skip : Value was NULL for GET response content: " + testCaseName + "." + testStepName)
					        		}
				        		} else {
				        			log.info("No response available for " + testCaseName + "." + testStepName)
				        		}
			       		}
			        	}
		        	} else {
		       		//log.info(testStep.config.type)
		        	}
		    	}
	    }
	}
} else {
	log.info("Message logging disable by default. Set 'message_logging_enabled' to 'true', if request/responses is wanted to be stored as JSON files.")
}

// FEATURE RUBT-XXXX
// Removing X-Trace-Token headers from REST requests
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
log.info("Clearing X-Trace-Token headers from REST requests")
testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null && testCase.disabled == false) {
		testCase.testSteps.each { testStepName, testStep ->       
			if (testStep != null && testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					// Clearing X-Trace-Token header
				     def headers = testStep.getHttpRequest().getRequestHeaders()
			     	headers.remove("X-Trace-Token")
			     	testStep.getHttpRequest().setRequestHeaders(headers)
				}
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
]]></con:tearDownScript></con:testSuite><con:testSuite id="b11caf30-3b7c-4474-b08d-d62b3cd5b951" name="BSSAPI Helper Test Suite"><con:description>TestSuite generated for REST Service [http://217.78.216.195:3010]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="474f4f3e-b3a9-462a-a2af-be0a4d819834" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Helper: Poll async function completion" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Poll async request status completion" id="6a6425ad-7036-4ebc-9470-4ca9c169c3fd"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 
import groovy.time.*

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def link = testRunner.testCase.testSuite.project.getPropertyValue("async_function_status_link")
def callerTestCaseName = testRunner.testCase.testSuite.project.getPropertyValue("current_poller_testcase_name")

def MANAGEMENT_ORDER_PROCESSING_TIME_LOWER_LIMIT = 5000 // milliseconds

def elapsedTime(Closure closure){
    def timeStart = new Date()
    closure()
    def timeStop = new Date()
    TimeCategory.minus(timeStop, timeStart)
}

List samples = []
def stdDev = { def sample ->
    samples &lt;&lt; sample
    def sum = samples.sum()
    def sumSq = samples.sum { it * it }
    def count = samples.size()
    (sumSq/count - (sum/count)**2)**0.5
}

List statusResponseTimes = []
def i = 0

TimeDuration timeDuration = elapsedTime {
	def functionStatus = "start_polling"

	while (functionStatus != "completed") {
		def proj = testRunner.testCase.testSuite.project
		def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
		def testStep = testCase.getTestStepByName("Get async function life-cycle status")
		testStep.getHttpRequest().setEndpoint(testRunner.testCase.testSuite.project.getPropertyValue("endpoint"))
		testRunner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testCase, null)
		testStepContext = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestRunContext(testStep)
		testStep.run(testRunner, testStepContext)
		def timeTaken = testRunner.testCase.testSteps["Get async function life-cycle status"].testRequest.response.timeTaken
		statusResponseTimes.add(timeTaken)
		log.info("PERF::" + callerTestCaseName + "::async-function::quality.measure.response.time.second = " + (timeTaken / 1000))
		log.info("PERF::" + callerTestCaseName + "::async-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps["Get async function life-cycle status"].testRequest.response.rawResponseData.length))
		holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")
		functionStatus = holder.getNodeValue("//*:lifecycle-status")
		log.info("Poll iteration " + i + ": Async function lifecycle-status: " + functionStatus)
		if (functionStatus == "completed") {
			break;
		}
		if (functionStatus == "failed") {
			log.info("Poll iteration " + i + ": ERROR[" + callerTestCaseName + "]: BSS API async function status is failed. Failing the test.")
			assert false, "[" + callerTestCaseName + "]: BSS API async function status is failed. Failing the test."
		}
		
		if (i == 60) {
			log.info("Poll iteration " + i + ": ERROR[" + callerTestCaseName + "]: BSS API async function have not been completed in 30 seconds. Timeout in test.")
			assert false, "[" + callerTestCaseName + "]: BSS API async function have not been completed in 30 seconds. Timeout in test."
		}
		i++
		sleep(500)
		//log.info("Poll iteration " + i + ": Approx. " + (i * 3) + " second(s) elapsed.")
	}
}

log.info("PERF::" + callerTestCaseName + "::async-function::quality.measure.processing.time.second = " + timeDuration.toMilliseconds() / 1000)

def min = statusResponseTimes.min()
def max = statusResponseTimes.max()
def standardDev = 0
def med = 0

statusResponseTimes.each {
	standardDev = "${stdDev(it)}"
}

log.info("STAT::" + callerTestCaseName + "::async-function::quality.measure.processing.time.second.minimum = " + (min / 1000))
log.info("STAT::" + callerTestCaseName + "::async-function::quality.measure.processing.time.second.maximum = " + (max / 1000))
log.info("STAT::" + callerTestCaseName + "::async-function::quality.measure.processing.time.second.median = " + med)
log.info("STAT::" + callerTestCaseName + "::async-function::quality.measure.processing.time.second.standarddeviation = " + standardDev)

if (timeDuration.toMilliseconds() > MANAGEMENT_ORDER_PROCESSING_TIME_LOWER_LIMIT) {
	log.info("PERF-WARNING::" + callerTestCaseName + "::async-function process took longer than expected. Actual = " + timeDuration.toMilliseconds().toString() + "ms, Expected &lt;= " + MANAGEMENT_ORDER_PROCESSING_TIME_LOWER_LIMIT + "ms")
} else {
	log.info("PERF-ACCEPTABLE::" + callerTestCaseName + "::async-function processing time as expected. Actual = " + timeDuration.toMilliseconds().toString() + "ms, Expected &lt;= " + MANAGEMENT_ORDER_PROCESSING_TIME_LOWER_LIMIT + "ms")	
}


</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="e0fdf39c-cb71-4773-bb1a-0ab44e3e65a2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="707e383d-5fe2-486f-854c-b689d1a99f08" name="Management Order including Product Order"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Organization" searchProperties="true" id="ede828bb-ec4e-4f56-900e-b2d6aef15fcd" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="e97a22b6-2f33-4a5f-a7c2-e6fca8e9dd0c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "${#Project#formattedName}",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "${#Project#identification_id}",
"identification-type": "${#Project#identificationType}",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="04f74787-6462-4e50-98cd-34f5eb80b2d4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("Organization Async UUID:: " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="0bec213a-2fda-4b20-b8d3-33e53aae5612"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="fb959475-2c2a-4829-b950-b0efc2d825e6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="ba867ca9-a343-45ba-ac87-300e4b77f437"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="6c4ac6f2-659b-47e8-ad22-ea99d77ffe37"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_link_response" id="6a9d6400-af24-4391-913a-c7492d25278e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Contact Media link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="49119fa2-ad94-46be-bfde-326386ff84eb"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_details" id="68767fc0-88c6-4a96-a5c1-6d172c0e6fd4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("organization contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="eb8afe0b-7033-4498-989b-76bdda31b38a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_external_references_details" id="9ea94cb4-794e-4fe0-9c4c-b491f97ed919"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("organization external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="b6e908e6-d523-4141-a3ea-05e8f24a2fda"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_related_parties_details" id="7022a265-86c6-4214-a236-526ce148688b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("organization related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("org_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_Organization_UUID_Request" id="297f56fa-b677-4d10-b531-84e97918de1d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Organization_UUID_Request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4152a659-2512-4b94-a9cb-f81cb0dca6a6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0cbc3a41-fe38-42c7-8524-8d117486f2e3" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="086b218b-f5e7-491a-95a5-8d7c7c41f989" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_uuid" id="52ab6879-ec5c-4ded-8da1-561e1920de92"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_Organization_UUID_Request#ResponseAsXml")

log.info("Organization UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Organization and Contact Media" id="cd39ce03-404b-4cc6-80d0-afbf958163a6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations/{org_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Organization and Contact Media" id="d5743f05-1d64-4dc0-b461-bc43b603e263" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5df95b7e-33a2-4760-9986-e86c35562a45-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations/dcef65d4-e97a-45f3-b91f-6947efc4de48</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="858cc535-4163-4118-9499-1ac4e93982d4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e55fc275-80a7-406a-899a-bb17f4cf625d" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bb783a90-4fa8-4815-a4a1-abf5d0e66563" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="${#Project#org_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>include</con:entry><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_uuid" id="cf165a3d-b02b-4d0b-8e86-04d21d6ca821"><con:settings/><con:config><script>//@Grab(groupId="com.jayway.jsonpath",artifactId="json-path",version="2.2.0")
import static com.jayway.jsonpath.JsonPath.parse
def jsonResponse=testRunner.testCase.testSteps["Get Organization and Contact Media"].testRequest.response.contentAsString

def contact_media_uuid = parse(jsonResponse).read('$.included[?(@.attributes.role==\'billing\')].id')
log.info("Organization_Contact media UUID where role is billing:: "+contact_media_uuid)
testRunner.testCase.testSuite.project.setPropertyValue("org_contact_media_billing",contact_media_uuid[0])</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4082c2ce-e8b0-4f08-b350-ad687417a5dd" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="ee1ef8ba-81d0-44f3-ae22-8f5eab7cd968"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "CONS",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="154324fb-f52f-43ef-a18f-df1d413e15bd"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="11ed34cd-5b6d-40da-8fae-c415d932f74f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0002"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="3652b4e8-03a6-4811-84dd-5672af161a7e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="c395c799-5f2f-4317-b864-fbc9a1ce27ef"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer account_details" id="acd786ae-097a-4781-86bd-a3cbedc5f5b1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("customer account type " + holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("customer account lifecycle status " + holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("customer account name " + holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("External References link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="f2faf3b3-7988-4f88-8bb2-8198950fb337"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0006"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_external_references_details" id="f3491164-9695-440a-b787-79f8b749d7bc"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("customer account external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))

log.info("billing accounts link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account link response" id="efb3a8ad-f477-450d-a0ad-ffd57c231b72"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0008"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="f51381fa-be12-4d18-9f5c-ce31a276d62e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account related billing account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))

log.info("agreements link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_related_billing_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Agreements link response" id="760317cb-3476-45ee-a2b4-c46ac223200f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Agreements link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_agreement_details" id="2d2adefa-240c-4e90-b35f-8af35a9b60a9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Agreements link response#ResponseAsXml")


log.info("customer account -agreements.document-id" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
log.info("customer account -agreements.lifecycle-status" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
log.info("customer account -agreements.reference-number" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))


testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_id", holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_ref_number", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account With Name" id="a822f326-d5cc-4a25-b263-a970ede08477"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account With Name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1f1a03dc-8edd-4c32-a9dd-45ca83bba877-0012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/customer-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fb443920-4ed9-4eab-bb2a-cca87580b3a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2df4b4-2999-4df2-a255-a6279cbf3fb9" name="Contains"><con:configuration><token>account-id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e37a91b9-0167-4dfe-bea4-603635e03871" name="Script Assertion"><con:configuration><scriptText>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account value is [" + holder.getNodeValue('//*:attributes[1]/*:account') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_uuid" id="c4624338-bcdf-4722-aac4-01f3630a0a58"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account With Name#ResponseAsXml")

log.info("Customer Account UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("customer_account_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="54fb96d2-7e29-4ff1-bf4c-31968ded056b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Billing Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Billing Account_Request" id="16043eee-249d-4a5b-9248-f2e829236a01"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
       "characteristics": {
       "account-description": "product usage in prepaid manned"
                            }
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
    "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
    },
        "billing-profile":{
          "data": { "type": "billing-profiles", "id": "temp-id-2" }
        }
      }
    },
    {
      "type": "billing-profiles",
      "id": "temp-id-2",
      "attributes": {
        "payment-method": "bank-transfer",
        "billing-format": "B2B_S",
        "payment-term": 14,
        "billing-cycle": 1,
    "overtime-interest-rate": 0,
    "invoice-group": "INV1",
    "billing-permissions": {
        "billing-allowed": "True",
        "service-number-itemization-allowed": "False",
        "overtime-interest-allowed": "False"
    },
    "characteristics": {
                             "edi-code": "0037987650004",
                             "einvoice-operator-id": "0037333222113",
                             "einvoice-reference": "0037000111224",
                             "billing-interval-start-date": "2016-12-19T16:00:37+02:00",
                             "billing-contract-description": "subscription activation"},
        "billing-interval": {
          "interval": "month",
          "count": 1
        },
        "billing-language": "fin",
        "bill-delivery-method": "f-invoice"
      },
      "relationships": {
        "bill-delivery-medium":{
          "data": { "type": "contact-media", "id": "${#Project#org_contact_media_billing}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="b86f6428-1620-4c4f-a665-8e6a3260803f"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="25d63607-f0fd-4d41-bf12-9f904d940049"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0002"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="24af7f5c-2da9-49fd-ae75-10d154537c03"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="c51da644-8573-4882-956f-fefbe8032a87"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="0feb20b9-acf7-4897-a80f-68bf719c90ed"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account UUID:: "+holder.getNodeValue("//*:id"))
log.info("Billing Accountid: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing account lifecycle status: "+holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("Billing account async customer account link: "+holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
log.info("Billing account async associated customer account link: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("billing_account_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_lifescycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_CustomerAccountLink_Validation" id="c17925ac-6688-425e-aede-4bf759bfcf3a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_CustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0006" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_details" id="29183475-cfe4-474f-be99-569c9e831398"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_CustomerAccountLink_Validation#ResponseAsXml")

log.info("billing account - Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("billing account - Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("billing account - Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

</script></con:config></con:testStep><con:testStep type="groovy" name="get_billing_associated_customer_account_details_link" id="7c5f0742-5ae9-4c4f-b9b3-6bdd8284eaa5"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Customer Accountid:: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="670669e5-0328-4ad3-9414-1a464e8e2694"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0009" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_associated_customer_account_details" id="3151700f-041a-484a-a613-491dd8736f13"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_AssociatedCustomerAccountLink_Validation#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account - Associated Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing Account - Associated Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("Billing Account - Associated Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("Billing account async external references link: "+holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_External_ReferencesLink_Validation" id="faef55ac-ef3a-4c62-848a-abca2e473922"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_External_ReferencesLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0011" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_external_references_details_of_biiling_account" id="78cea6a8-b7e1-4a16-9ae9-26b8f086d429"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_External_ReferencesLink_Validation#ResponseAsXml")

log.info("Billing Account - External References id:: "+holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("Billing Account - External References type:: "+holder.getNodeValue("//*:attributes[1]/*:reference-type"))


testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_id", "1")
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_type","test")

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account_Request" id="81fc7143-02ac-469d-9ffc-dedbbd4e5a25"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account_Request" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="251216ff-9022-4e5a-b37b-97bc137d52a4-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("currency value is [" + holder.getNodeValue('//*:attributes[1]/*:currency') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("tax-region value is [" + holder.getNodeValue('//*:attributes[1]/*:tax-region') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("customer-account value is [" + holder.getNodeValue('//*:relationships[1]/*:customer-account') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bb2fd2fd-93bf-47c0-8ef3-d3712553c6fb" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Individual" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="672b7aa3-955e-4800-a7a7-1844ec7b4d8e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="e9e7b7e3-d935-4484-8e2b-3401e4a2917f"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="7d14c1dd-de1d-443e-9d3a-165f9d6a7d55"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0002"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="8ba7965e-8c0a-4f7f-bfd5-59221ab21da9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="47759974-e717-41d0-aa85-7b6d07449314"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_formattedname" id="420cab9b-0681-4330-b42f-3db2d8853154"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual formatted Name " + holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
log.info("Identification link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_formattedName", holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get identifications link response" id="4b627e30-88d0-4f1d-8c82-74b16799b6c0"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get identifications link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0006"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_identification_details" id="0ddab7a5-6054-4a33-98a5-f0ed6219fb22"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get identifications link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual identification id " + holder.getNodeValue("//*:attributes[1]/*:identification-id"))
log.info("individual identification type " + holder.getNodeValue("//*:attributes[1]/*:identification-type"))
log.info("Contact Media link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_identification_id", holder.getNodeValue("//*:attributes[1]/*:identification-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_identificationType", holder.getNodeValue("//*:attributes[1]/*:identification-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="de6a149a-337b-4e0b-8625-b4b30e49fa61"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0008"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_contact_media_details" id="02a89dfd-f543-4d83-9e9e-fe878391f20a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("individual contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="ca32ac5f-f0d9-4c41-bbc1-1dc83a624237"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_external_references_details" id="7f13777c-baf7-4b62-b7b1-cb100f6551b1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("individual external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="6be9ebef-2844-4875-b64e-291bdf5aa321"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0012"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_related_parties_details" id="f564a441-1512-4133-8920-b2a75f44adee"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("individual related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="fbd912ec-523f-48c1-bee1-18a4ffbbdb18"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="a709122b-c56a-4f9f-a10b-13d1bdeac978-0014" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="2ff2c12e-067b-4eb6-a9e7-30a72f3f78e2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="691175b4-4127-43c8-9da8-cb175275e720" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Party Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Party Releationships_Request" id="6652328e-1b56-4a3b-87f2-68cd077f505a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="3616aa42-7773-4100-b978-401a0f57e11c-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "contact",
                "sub-role":"main",
                "rank": "1"
                              },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4793c1f1-3d8b-4816-8327-447cc7804960" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="e629fbbb-6c9c-40a6-9e53-922105dc44ea"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Party Releationships_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="255bd05c-9e6e-4952-86db-5480c4050d42"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_async_resource_link_response" id="1025f9a9-351a-4363-9f3d-a22b27fc50c8"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_async_resource_link_response" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="3616aa42-7773-4100-b978-401a0f57e11c-0003" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get party relatiionship details" id="c1d621b9-c040-44cc-8287-8352f53f7692"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_async_resource_link_response#ResponseAsXml")

log.info("party relationship role: "+holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))


testRunner.testCase.testSuite.project.setPropertyValue("party_relationship_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("party_id", holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("target_id", holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8cc6f4a4-c52c-4f58-8968-b32a2d1ba7c6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetListOfAvailableSimCards" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="879d05c4-7699-4b12-a768-914ebd0ab5c3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="2e3b6bed-2f65-455d-99c8-a0ecc0a82109-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="fcdcd8cc-0d89-464d-b5fe-c143caedf80a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d782c5e4-8b1a-4c14-8749-5b237381aa18" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetListOfAvailableMSISDN" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="13299d9e-1cd4-44a8-ab59-56207f3e3a15"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d32eefa0-36fd-4cda-a85b-6ff9b3ad106c-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="1e0d2460-5eb0-4fd9-82b5-0226e525f023"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="" id="76296ff2-84e1-4e15-a333-31fc85c607b6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d32eefa0-36fd-4cda-a85b-6ff9b3ad106c-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="51729767-1b88-4504-adc1-0114727310ac" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Product Order" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="create optimi order" id="77b92fde-31a6-4708-845f-dc1b65ee0435"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="a5dade4c-a281-4f9b-a306-06b5a8db288c-0000"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
},
{
"type":"order-items",
"id":"Orderitem_29242"
},
{
"type":"order-items",
"id":"Orderitem_29243"
},
{
"type":"order-items",
"id":"Orderitem_29244"
},
{
"type":"order-items",
"id":"Orderitem_29245"
},
{
"type":"order-items",
"id":"Orderitem_29246"
}
]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29242",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29242"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29243",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29243"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29244",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29244"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29245",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29245"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29246",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29246"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_MobileCertificate_Permission": "false",
"CH_ContractLength": "12"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_SIM_Mix_4G_MobileID"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DirectoryServices"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29242",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_ROAMING_LIMIT-dataRoamingLimit": "22"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Data_Roaming_Limit"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29243",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DATA_CALL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29244",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-callingLineIdentificationRestriction": "PUBLIC"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_CLIR"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29245",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-explicitCallTransfer": "NO"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_ECT"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29246",
"attributes": {
"inputted-characteristics": {
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_BasicData"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 40.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 50.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="59079ab9-d2d4-4951-a753-283124e3d811"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f7b56ce4-2e1d-48a3-804f-f351d9d2d902" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create LL XL Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create LL XL order" id="3f59ecb0-1507-4ef0-9039-9cd86b2324eb"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create LL XL order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="aa878ea1-c322-4e97-ab69-789bcd257c1a-0000"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_LLXL",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_likkuva}",
"CH_ICC": "${#Project#simcard_available_likkuva}",
"CH_Language": "SWE",
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_LLXL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_likkuva}",
"CH_ICC": "${#Project#simcard_available_likkuva}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 2.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLXL4GA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 10.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLXL4G_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f2442ae6-7314-4694-98c6-ac0ee27828dc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="5350d9ba-2737-407d-a022-67e9ed97df43"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create LL XL order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fd91d6d2-7ad5-4062-b364-fcdc37172e4c" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Basic Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create optimi basic order" id="4b8c8d1b-797b-4946-9556-f3157a15944b"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi basic order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimibasic",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "achyut",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_OptimiBasic"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 10.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTPERA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 20.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTPER_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="09e6fcd7-1aed-40c3-9ff8-53f910cbaef1" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="73a02164-6607-4704-a330-30e31488f203"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi basic order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="475c4f3c-f42b-4b1f-89e0-65c5d87ad7ae" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Package Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create optimi package order" id="45444dd7-2046-4ff1-8768-1aab30a2e7ac"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi package order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_10815"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_10815",
"attributes": {
"reference-number": "${#Project#reference_number}_optimipackage",
"order-date": "2016-07-07T15:04:43",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_10815"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_10815",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10815"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_10975"
},
{
"type":"order-items",
"id":"Orderitem_10976"
},
{
"type":"order-items",
"id":"Orderitem_10977"
},
{
"type":"order-items",
"id":"Orderitem_10978"
},
{
"type":"order-items",
"id":"Orderitem_10979"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_10975",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10975"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10976",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10976"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10977",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10977"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10978",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10978"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_10979",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_10979"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10815",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_Nickname": "achyut",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10815"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_OptimiPackage"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10975",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10967"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_Voice1400"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10976",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10968"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_Sms75"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10977",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_10969"
},
{
"type": "order-prices",
"id": "OrderPrice_10970"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_Data21M"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10978",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "asfafafs",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_10979",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10815",
"attributes": {
"price": {
"tax-free-amount": 25,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTPAKA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10967",
"attributes": {
"price": {
"tax-free-amount": 25,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_OPTV1400_R"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10968",
"attributes": {
"price": {
"tax-free-amount": 20,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_OPTS75_R"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10969",
"attributes": {
"price": {
"tax-free-amount": 20,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_DAT21MA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_10970",
"attributes": {
"price": {
"tax-free-amount": 20.5,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PS_DAT21M_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b640909f-ffb9-4c13-8974-489f44335f55" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="9809ab76-33ad-42b4-9c40-3cbc91fc411b"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi package order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="c32d154a-e48f-47f2-a455-7e6ba56530a0" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create likkuva Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create likkuva order" id="edfd0882-7e49-4059-a3dc-d27c0d322634"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create likkuva order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_likkuva",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "achyut",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_LLL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 2.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLLA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 10.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLL_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="137b5401-9628-482a-9294-f3f066835cfb" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="28b548c0-90b0-4320-b4d3-ad7827f32dbd"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create likkuva order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="48bccfe7-823a-4e31-81f2-9cf636c21d78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create LL XXL Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create LL XXL order" id="963ff5d7-8128-491f-8428-13c453f468f4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create LL XXL order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_LLXXL",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Release13.1",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "FIN"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_LLXXL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 2.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLXXL4GA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 20.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLXXL4G_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f2442ae6-7314-4694-98c6-ac0ee27828dc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="dc01a998-8a11-431e-8d81-eb75a1a5c766"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create LL XXL order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="51a9c66e-57c5-4a04-9079-2935636a5a0e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create LL M Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create LL M order" id="7b74db9b-3391-4eca-8a07-f95175647f20"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create LL M order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_LLXXL",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Release13.1",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "FIN"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_LLXXL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 2.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLXXL4GA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 20.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_LLXXL4G_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="f2442ae6-7314-4694-98c6-ac0ee27828dc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="5fcb00de-572b-47fc-b53d-b3bb8ad7da35"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create LL M order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)
log.info("TestSuite Setup Script setting identification_id = '" + randomNumber + "'")

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info("TestSuite Setup Script setting customer_account_name = '" + customerAccountName + "'")

String formattedNames  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName",formattedNames)
log.info("TestSuite Setup Script setting formattedName = '" + formattedNames + "'")

String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info("TestSuite Setup Script setting individual_name = '" + individualName + "'")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)
log.info("TestSuite Setup Script setting reference_number = '" + refNumber + "'")

def identificationTypes = ['business-identity-code']
def random = new Random()
def randomKey =random.nextInt(identificationTypes.size()) 
testSuite.project.setPropertyValue("identificationType","${identificationTypes[randomKey]}")
log.info("TestSuite Setup Script setting identificationType = '" + "${identificationTypes[randomKey]}" + "'")

String randomNumber1 = org.apache.commons.lang.RandomStringUtils.random(7, false, true)
testSuite.project.setPropertyValue("identification_id_things",randomNumber1)
log.info("TestSuite Setup Script setting identification_id_things = '" + randomNumber1 + "'")

String formattedNames1  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName_things",formattedNames1)
log.info("TestSuite Setup Script setting formattedName_things = '" + formattedNames1 + "'")

String randomNum = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("createidentification_id",randomNum)
log.info("TestSuite Setup Script setting createidentification_id = '" + randomNum + "'")

// FEATURE RUBT-XXXX: Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript><con:tearDownScript><![CDATA[// FEATURE: Store all used property values to a given location for later use
//
def  props = new Properties()
def names = testSuite.project.getPropertyNames()
log.info("Storing properties to a file")
if (names) {
	names.each { name -> 
     	if (!name.equals("bssapi_runtime_properties")) {
          	def pValue = testSuite.project.getPropertyValue(name)
               log.info("   Save: " + name + " = " + pValue)
               if (pValue == null) {
               	pValue = ""
               }
               props.setProperty(name, pValue)
          }
	}
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     def projectPath = groovyUtils.projectPath
     def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
     def loc = propsFileLoc.replaceAll('"', '')
     propsFileLoc = loc
     if (!(new File(propsFileLoc)).exists()) {
     	if (projectPath.trim().length() > 0) {
          	propsFileLoc = projectPath + "\\" + propsFileLoc
         	}
	} else {
     	//log.info("Using given propertied file from: " + propsFileLoc)
     }
     testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
     File propFile = new File(propsFileLoc)
     props.store(propFile.newWriter(), null)
     log.info("Used properties saved to a file: " + propsFileLoc)
} else {
     log.info("There does not seem to have any project properties to write, check it.")
}

// FEATURE: Store requests and responses to a file for debugging purposes to given location
//
import java.text.SimpleDateFormat
def loggingEnabled = testSuite.project.getPropertyValue('message_logging_enabled')
if (loggingEnabled.length() > 0 && loggingEnabled.toLowerCase().equals("true")) {
	log.info("Message logging enabled.")
	def date = new Date()
	def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	projectPath = groovyUtils.projectPath
	if (projectPath.trim().length() > 0) {
		projectPath += "/"
	}
	//Write Request to XML File 
	def folderPath =  projectPath + 'bssapi_messaging_logs/' + testSuite.name.replaceAll(' ', '_') + '_' + dts + File.separator
	log.info("Available requests and responses stored as files to: " + folderPath) 
	new File(folderPath).mkdirs()
	
	// for each testCase in the testSuite
	testSuite.testCases.each { testCaseName, testCase ->
		// path for this testCase
	    	if (testCase != null && testCase.disabled == false) {
		    	def folderPathSuite = folderPath + testCaseName.replaceAll(' ', '_') + File.separator
		    	new File(folderPathSuite).mkdir()
		
		    	// for each testStep
		    	testCase.testSteps.each { testStepName, testStep ->       
		    		def idx = testCase.getTestStepIndexByName(testStepName)
		    		//log.info("TEST STEP INDEX: " + idx)
		    		if (testStep != null && testStep.disabled == false) {
			    		def steptype = testStep.config.type
			        	if(steptype == "restrequest") {
			          	def methodtype = testStep.getHttpRequest().getMethod().toString()
			               //log.info(methodtype.toString())
			       		if(methodtype == "POST") {
			        			def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_request.json')
			        			def value = testStep.getProperty('Request').getValue()
			        			if (value != null) {
			        				log.info("   Write: " + file.name)
			        				file.write(value)
			        			} else {
			        				log.info("   Skip : Value was NULL for POST response content: " + testCaseName + "." + testStepName)
			        			}
			       		}
			       		if (testStep != null) {
				        		if (testStep.getProperty('Response') != null) {
					        		// get the response and write to file 
					        		def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_response.json')
					        		def value = testStep.getProperty('Response').getValue()
					        		if (value != null) {
					        			log.info("   Write: " + file.name)
					        			file.write(value)
					        		} else {
					        			log.info("   Skip : Value was NULL for GET response content: " + testCaseName + "." + testStepName)
					        		}
				        		} else {
				        			log.info("No response available for " + testCaseName + "." + testStepName)
				        		}
			       		}
			        	}
		        	} else {
		       		//log.info(testStep.config.type)
		        	}
		    	}
	    }
	}
} else {
	log.info("Message logging disable by default. Set 'message_logging_enabled' to 'true', if request/responses is wanted to be stored as JSON files.")
}

// FEATURE RUBT-XXXX
// Removing X-Trace-Token headers from REST requests
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
log.info("Clearing X-Trace-Token headers from REST requests")
testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null && testCase.disabled == false) {
		testCase.testSteps.each { testStepName, testStep ->       
			if (testStep != null && testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					// Clearing X-Trace-Token header
				     def headers = testStep.getHttpRequest().getRequestHeaders()
			     	headers.remove("X-Trace-Token")
			     	testStep.getHttpRequest().setRequestHeaders(headers)
				}
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
]]></con:tearDownScript></con:testSuite><con:testSuite id="f82403b5-e235-4d3e-93f9-13266e0c410c" name="Entity Creation With Only Mandatory Parameters"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Organization" searchProperties="true" id="ffd96f19-d0df-4a2c-87d5-d3e985ab4097" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="4570a713-11f7-45f9-a470-313ebf266c0b"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="18888f9c-baaf-4973-912d-32093f6d9739-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"trading-name": "Thomas Construction",
"formatted-name": "Building Company",
"is-legal-entity": true,
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z" 
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="3c4d40ba-d5a7-491c-8d34-b653c5952b5f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="f2b6720d-99e6-468e-b550-b100732f8c11"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3b9440d2-9e8f-4433-bd7e-27960f5e4b0d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="12d9e089-073f-462d-9935-d75cf663fc28"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="09b27b16-8e3c-4304-aa1c-8d0edfc88418-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                 "account-type": "CONS",               
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00"                   
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00"
                   
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get customer account async uuid" id="b241e595-611e-422b-b804-e1599febe79d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create_Customer_Account#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="8dc2561c-f237-4e18-bb36-e171a3b1d7de"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f8e5bde8-653f-4b1b-ae13-625f089f543b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Billing Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Billing Account_Request" id="4d36fc2b-ba3f-4192-a7ad-3fa2ffd4310e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="5e68f807-dd4a-4cd5-bbd3-def3d31332d6-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "lifecycle-status": "active",
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
        "characteristics": {}
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
  "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
  }
               }
    }
   
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get billing account async uuid" id="23232274-8aff-4438-80a3-fdfb1739d248"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Billing Account_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("billing_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="a3b09d80-be90-496d-88cc-16d325d7a73c"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="31c1dcfe-8aa4-41a3-8a0c-7c056e3ecd4d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Individual" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="dd633f18-0bed-4f46-9753-78a818bc6afb"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="ba95505f-fc68-46ed-90f8-694c25ee48b8-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {               
                               
                "given-name": "Shyamson",               
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}"
              
            }
			}
           ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get individual async uuid" id="e78ddb78-6c6a-47b7-a7d3-d7344d40f44c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Individual_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="0e1ad3ec-d6e5-4b56-b2c0-1953a8176ac7"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cd33f87f-1a0e-41b0-83ca-544fc8b7cf93" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Party Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Party Releationships_Request" id="b4790411-d214-4045-bcdb-12d7c61c72fc"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="67fc1359-225a-4778-a43e-48ba477acd82-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z"
                   
                },
                "role": "contact"
             
                                             },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4793c1f1-3d8b-4816-8327-447cc7804960" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get party relationships async uuid" id="6d05de8c-9bb1-4a20-adcd-9b693b2fb5f5"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("party_rel_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="082f8fb5-f168-4de1-9ece-4e07edbec07b"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Party Releationships_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="80c5aa98-2bd6-4bb4-bb21-a387ad095183" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create things" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create things_Request" id="0dd34345-9621-49f1-995a-4f1bf27fabe3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create things_Request" id="0122f544-4c95-46ea-98d5-1cc223878342" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1291944c-7920-437c-bfd4-a3c43d077ee6-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "things-create",
    "relationships": {
      "new-instance": {
        "data": {
            "type": "things",
            "id": "temp-id-1"
          }
      }
    }
  },
  "included": [
    {
     "type": "things",
      "id": "temp-id-1",
      "attributes": {
        "formatted-name": "${#Project#formattedName_things}"
       
      }
      
      
    }

  ]
}
</con:request><con:originalUri>http://217.78.216.195/api/things</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d0f87388-f51d-4d63-8ab6-c4d5e9d752b6" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="34a5a88b-e4e4-4d7e-ace8-ca838274ddeb" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get things async uuid" id="2f46275b-86b8-498b-8f5e-2ad80a332173"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create things_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("things_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="e6e37950-660f-426a-b8ce-803b68f020e8"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create things_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5fb69fe7-06f0-4b07-820a-cbbe8a3e6ad1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Sales Agreement" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="create sales agreement_request" id="093673dd-98e4-4e4b-b137-d8bc02389b84"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="38fb3b5e-3095-4629-834c-8388f97b1fee-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement",
        "agreement-type": "service-agreement",
       
        "sales-info": {         
          "channel": "b2b-pos"
          
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "organizations",
            "id": "${#Project#org_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement async uuid" id="5baaba06-a344-4cbc-a742-2187a60226d3"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="a712bd06-34eb-4800-af66-984a3a392986"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)
log.info("TestSuite Setup Script setting identification_id = '" + randomNumber + "'")

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info("TestSuite Setup Script setting customer_account_name = '" + customerAccountName + "'")

String formattedNames  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName",formattedNames)
log.info("TestSuite Setup Script setting formattedName = '" + formattedNames + "'")

String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info("TestSuite Setup Script setting individual_name = '" + individualName + "'")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)
log.info("TestSuite Setup Script setting reference_number = '" + refNumber + "'")

def identificationTypes = ['business-identity-code']
def random = new Random()
def randomKey =random.nextInt(identificationTypes.size()) 
testSuite.project.setPropertyValue("identificationType","${identificationTypes[randomKey]}")
log.info("TestSuite Setup Script setting identificationType = '" + "${identificationTypes[randomKey]}" + "'")

String randomNumber1 = org.apache.commons.lang.RandomStringUtils.random(7, false, true)
testSuite.project.setPropertyValue("identification_id_things",randomNumber1)
log.info("TestSuite Setup Script setting identification_id_things = '" + randomNumber1 + "'")

String formattedNames1  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName_things",formattedNames1)
log.info("TestSuite Setup Script setting formattedName_things = '" + formattedNames1 + "'")

String randomNum = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("createidentification_id",randomNum)
log.info("TestSuite Setup Script setting createidentification_id = '" + randomNum + "'")

// FEATURE RUBT-XXXX: Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript><con:tearDownScript><![CDATA[// FEATURE: Store all used property values to a given location for later use
//
def  props = new Properties()
def names = testSuite.project.getPropertyNames()
log.info("Storing properties to a file")
if (names) {
	names.each { name -> 
     	if (!name.equals("bssapi_runtime_properties")) {
          	def pValue = testSuite.project.getPropertyValue(name)
               log.info("   Save: " + name + " = " + pValue)
               if (pValue == null) {
               	pValue = ""
               }
               props.setProperty(name, pValue)
          }
	}
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     def projectPath = groovyUtils.projectPath
     def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
     def loc = propsFileLoc.replaceAll('"', '')
     propsFileLoc = loc
     if (!(new File(propsFileLoc)).exists()) {
     	if (projectPath.trim().length() > 0) {
          	propsFileLoc = projectPath + "\\" + propsFileLoc
         	}
	} else {
     	//log.info("Using given propertied file from: " + propsFileLoc)
     }
     testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
     File propFile = new File(propsFileLoc)
     props.store(propFile.newWriter(), null)
     log.info("Used properties saved to a file: " + propsFileLoc)
} else {
     log.info("There does not seem to have any project properties to write, check it.")
}

// FEATURE: Store requests and responses to a file for debugging purposes to given location
//
import java.text.SimpleDateFormat
def loggingEnabled = testSuite.project.getPropertyValue('message_logging_enabled')
if (loggingEnabled.length() > 0 && loggingEnabled.toLowerCase().equals("true")) {
	log.info("Message logging enabled.")
	def date = new Date()
	def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	projectPath = groovyUtils.projectPath
	if (projectPath.trim().length() > 0) {
		projectPath += "/"
	}
	//Write Request to XML File 
	def folderPath =  projectPath + 'bssapi_messaging_logs/' + testSuite.name.replaceAll(' ', '_') + '_' + dts + File.separator
	log.info("Available requests and responses stored as files to: " + folderPath) 
	new File(folderPath).mkdirs()
	
	// for each testCase in the testSuite
	testSuite.testCases.each { testCaseName, testCase ->
		// path for this testCase
	    	if (testCase != null && testCase.disabled == false) {
		    	def folderPathSuite = folderPath + testCaseName.replaceAll(' ', '_') + File.separator
		    	new File(folderPathSuite).mkdir()
		
		    	// for each testStep
		    	testCase.testSteps.each { testStepName, testStep ->       
		    		def idx = testCase.getTestStepIndexByName(testStepName)
		    		//log.info("TEST STEP INDEX: " + idx)
		    		if (testStep != null && testStep.disabled == false) {
			    		def steptype = testStep.config.type
			        	if(steptype == "restrequest") {
			          	def methodtype = testStep.getHttpRequest().getMethod().toString()
			               //log.info(methodtype.toString())
			       		if(methodtype == "POST") {
			        			def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_request.json')
			        			def value = testStep.getProperty('Request').getValue()
			        			if (value != null) {
			        				log.info("   Write: " + file.name)
			        				file.write(value)
			        			} else {
			        				log.info("   Skip : Value was NULL for POST response content: " + testCaseName + "." + testStepName)
			        			}
			       		}
			       		if (testStep != null) {
				        		if (testStep.getProperty('Response') != null) {
					        		// get the response and write to file 
					        		def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_response.json')
					        		def value = testStep.getProperty('Response').getValue()
					        		if (value != null) {
					        			log.info("   Write: " + file.name)
					        			file.write(value)
					        		} else {
					        			log.info("   Skip : Value was NULL for GET response content: " + testCaseName + "." + testStepName)
					        		}
				        		} else {
				        			log.info("No response available for " + testCaseName + "." + testStepName)
				        		}
			       		}
			        	}
		        	} else {
		       		//log.info(testStep.config.type)
		        	}
		    	}
	    }
	}
} else {
	log.info("Message logging disable by default. Set 'message_logging_enabled' to 'true', if request/responses is wanted to be stored as JSON files.")
}

// FEATURE RUBT-XXXX
// Removing X-Trace-Token headers from REST requests
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
log.info("Clearing X-Trace-Token headers from REST requests")
testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null && testCase.disabled == false) {
		testCase.testSteps.each { testStepName, testStep ->       
			if (testStep != null && testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					// Clearing X-Trace-Token header
				     def headers = testStep.getHttpRequest().getRequestHeaders()
			     	headers.remove("X-Trace-Token")
			     	testStep.getHttpRequest().setRequestHeaders(headers)
				}
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
]]></con:tearDownScript></con:testSuite><con:testSuite id="836e93d3-8274-4961-a79c-d01b23872f92" name="Performance Test Flow Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Organization" searchProperties="true" id="b533af1b-c247-4c6d-aa20-48192a16d890" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="14ed1a0c-0976-462c-b4f9-4969f51db973"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "${#Project#formattedName}",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "${#Project#identification_id}",
"identification-type": "${#Project#identificationType}",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="51c89d75-31db-4efe-937e-738bfc44bd1d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="1744165c-6875-45c0-899c-5b7bfa72956c"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="7221cf64-0cf9-414d-a3d5-18c90daca38c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="d15edab3-f4ef-44bf-8c7b-0d119c12cfdf"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="2093c2ac-910e-43ae-b247-3fdab05e6615"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_link_response" id="3dd19c44-d6de-4822-93f9-6048e59cc939"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Contact Media link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="114a7d36-c2c4-480f-8967-7636e6ed00ad"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_contact_media_details" id="1974acdd-6d94-4764-9984-0c692b1f0a1a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("organization contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("org_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="d6e2e07d-c0c7-4f11-b7bc-8b92b5e144b1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_external_references_details" id="93dea18a-3faa-4728-a324-eef4305bbe4b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("organization external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("organization external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("org_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="91a4f43e-ef84-4622-8fef-62b8e7ef3a35"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_related_parties_details" id="a5a6b6d7-22f7-4b66-82d8-3ea69d479fab"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("organization related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("org_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_Organization_UUID_Request" id="aa2323e6-6a30-4f08-bcfc-b97dfb91e404"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Organization_UUID_Request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4152a659-2512-4b94-a9cb-f81cb0dca6a6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0cbc3a41-fe38-42c7-8524-8d117486f2e3" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="086b218b-f5e7-491a-95a5-8d7c7c41f989" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_uuid" id="5698433d-abbf-4dc2-b9c5-79c85f0785eb"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_Organization_UUID_Request#ResponseAsXml")

log.info("Organization UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Organization and Contact Media" id="c6f256a3-ac22-4283-a13b-ba998af4853a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations/{org_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Organization and Contact Media" id="d5743f05-1d64-4dc0-b461-bc43b603e263" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="27ae091e-cfad-4b10-9b09-88f8a8f866ee-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations/dcef65d4-e97a-45f3-b91f-6947efc4de48</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="858cc535-4163-4118-9499-1ac4e93982d4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="e55fc275-80a7-406a-899a-bb17f4cf625d" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="bb783a90-4fa8-4815-a4a1-abf5d0e66563" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="${#Project#org_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>include</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_contact_media_uuid" id="b5289f74-e90f-45db-a185-902b558aa199"><con:settings/><con:config><script>//@Grab(groupId="com.jayway.jsonpath",artifactId="json-path",version="2.2.0")
import static com.jayway.jsonpath.JsonPath.parse
def jsonResponse=testRunner.testCase.testSteps["Get Organization and Contact Media"].testRequest.response.contentAsString

def contact_media_uuid = parse(jsonResponse).read('$.included[?(@.attributes.role==\'billing\')].id')
log.info("Organization_Contact media UUID where role is billing:: "+contact_media_uuid)
testRunner.testCase.testSuite.project.setPropertyValue("org_contact_media_billing",contact_media_uuid[0])</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5bc644b6-18bd-42d7-a808-16e9dda899b5" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="71602485-435c-4b84-ac73-f9ba0e2e8ded"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "CONS",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get customer account async uuid" id="58957d0f-d118-4c30-ab66-0801654890f6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create_Customer_Account#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="44ffe754-0be3-401b-ac64-bcc29133e050"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="44d5d46e-5232-4260-88b9-bc7cbd234e7d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="1d3b0e9e-3731-4831-8a03-9f4bfe43dfd8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="c75a778f-e3bd-46a1-985d-5ec624d073d5"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer account_details" id="e7ca0329-22de-49b1-b9c4-5d1025a44aa9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("customer account type " + holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("customer account lifecycle status " + holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("customer account name " + holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("External References link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="41b2f6f9-c2be-4128-b5f5-71efebb4f43a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_external_references_details" id="54ee06c6-5a5a-4ead-848e-94ecaccc37f0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("customer account external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))

log.info("billing accounts link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account link response" id="0b78ba7a-8c1f-4e8c-a869-dc834b1ec80e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="8d622fe1-2f60-471f-946b-110c97398b8b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account related billing account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))

log.info("agreements link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_related_billing_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Agreements link response" id="333a5ba2-5d69-4600-9eff-8233a12f8c2a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Agreements link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_agreement_details" id="349cfa84-2126-40f4-bcee-14177582fb7f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Agreements link response#ResponseAsXml")


log.info("customer account -agreements.document-id" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
log.info("customer account -agreements.lifecycle-status" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
log.info("customer account -agreements.reference-number" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))


testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_id", holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_ref_number", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account With Name" id="8bb0f845-e741-47be-8bd7-b3f7c2649cf4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account With Name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b5a09ad1-8eab-4db5-8333-4cc77deeb65c-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/customer-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fb443920-4ed9-4eab-bb2a-cca87580b3a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2df4b4-2999-4df2-a255-a6279cbf3fb9" name="Contains"><con:configuration><token>account-id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e37a91b9-0167-4dfe-bea4-603635e03871" name="Script Assertion"><con:configuration><scriptText>
import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account value is [" + holder.getNodeValue('//*:attributes[1]/*:account') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_uuid" id="5731e5ef-c8cd-4752-9b44-18dbc767f1db"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account With Name#ResponseAsXml")

log.info("Customer Account UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("customer_account_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="62f86af1-850f-47f7-8ec8-ac3ff8604896" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Billing Account" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Billing Account_Request" id="97659463-2af5-4477-a804-fd0b75242d4f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
       "characteristics": {
       "account-description": "product usage in prepaid manned"
                            }
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
    "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
    },
        "billing-profile":{
          "data": { "type": "billing-profiles", "id": "temp-id-2" }
        }
      }
    },
    {
      "type": "billing-profiles",
      "id": "temp-id-2",
      "attributes": {
        "payment-method": "bank-transfer",
        "billing-format": "B2B_S",
        "payment-term": 14,
        "billing-cycle": 1,
    "overtime-interest-rate": 0,
    "invoice-group": "INV1",
    "billing-permissions": {
        "billing-allowed": "True",
        "service-number-itemization-allowed": "False",
        "overtime-interest-allowed": "False"
    },
    "characteristics": {
                             "edi-code": "0037987650004",
                             "einvoice-operator-id": "0037333222113",
                             "einvoice-reference": "0037000111224",
                             "billing-interval-start-date": "2016-12-19T16:00:37+02:00",
                             "billing-contract-description": "subscription activation"},
        "billing-interval": {
          "interval": "month",
          "count": 1
        },
        "billing-language": "fin",
        "bill-delivery-method": "f-invoice"
      },
      "relationships": {
        "bill-delivery-medium":{
          "data": { "type": "contact-media", "id": "${#Project#org_contact_media_billing}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get billing account async uuid" id="324d1ee9-bab6-433d-9811-25697e718fe5"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Billing Account_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("billing_acct_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="e8acb46c-792b-41a5-b24b-b915009b75ed"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="257d8bd1-2035-42c3-8651-e57b9a67b473"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="cd14f6c1-fb5e-4710-8c63-7cc754e40ff2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="92baa5db-18c2-403c-ae87-0ebfab4eefe6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="747c2495-3a70-4e3d-a611-7f51f1a63d10"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account UUID:: "+holder.getNodeValue("//*:id"))
log.info("Billing Accountid: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing account lifecycle status: "+holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("Billing account async customer account link: "+holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
log.info("Billing account async associated customer account link: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("billing_account_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_lifescycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_CustomerAccountLink_Validation" id="86708fa3-0bfb-4e22-932f-e8b909454bb4"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_CustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0007" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_details" id="4f421de7-5f5a-4be3-aae6-8673f395c979"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_CustomerAccountLink_Validation#ResponseAsXml")

log.info("billing account - Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("billing account - Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("billing account - Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_customer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

</script></con:config></con:testStep><con:testStep type="groovy" name="get_billing_associated_customer_account_details_link" id="aab38e22-5420-4096-8e97-f0e7da3401b3"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Customer Accountid:: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="40226349-64e2-4add-8805-c37b787fc1f1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_AssociatedCustomerAccountLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0010" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("name value is [" + holder.getNodeValue('//*:attributes[1]/*:name') + "]")
log.info("account-type value is [" + holder.getNodeValue('//*:attributes[1]/*:account-type') + "]")
log.info("account-id value is [" + holder.getNodeValue('//*:attributes[1]/*:account-id') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("external-references value is [" + holder.getNodeValue('//*:relationships[1]/*:external-references') + "]")
log.info("related-parties value is [" + holder.getNodeValue('//*:relationships[1]/*:related-parties') + "]")
log.info("billing-accounts value is [" + holder.getNodeValue('//*:relationships[1]/*:billing-accounts') + "]")
log.info("agreements value is [" + holder.getNodeValue('//*:relationships[1]/*:agreements') + "]")
log.info("id value is [" + holder.getNodeValue('//*:id[1]') + "]")


//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null

// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_associated_customer_account_details" id="e76d950d-4970-4a3e-a7b0-0a0e4c6a2138"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_AssociatedCustomerAccountLink_Validation#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Billing Account - Associated Customer Accountid:: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing Account - Associated Customer Account type:: "+holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("Billing Account - Associated Customer Account name:: "+holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("Billing account async external references link: "+holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_associatedcustomer_account_name", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="BillingAccount_External_ReferencesLink_Validation" id="bd55d9c0-fd46-47ce-95f3-5c869397c899"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="BillingAccount_External_ReferencesLink_Validation" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_external_references_details_of_biiling_account" id="0c63896c-8f75-4d5d-9c5a-600eb3fab594"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("BillingAccount_External_ReferencesLink_Validation#ResponseAsXml")

log.info("Billing Account - External References id:: "+holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("Billing Account - External References type:: "+holder.getNodeValue("//*:attributes[1]/*:reference-type"))


testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_id", "1")
testRunner.testCase.testSuite.project.setPropertyValue("billingaccount_ext_ref_type","test")

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account_Request" id="a61f4de6-2c6c-4788-ac66-c1974361d58d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account_Request" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="b9c5d66f-906e-4950-8b71-6c51f81ef2d7-0014" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="7ef0cfd2-8df9-4672-a41e-81e8c7f7e062" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("currency value is [" + holder.getNodeValue('//*:attributes[1]/*:currency') + "]")
log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("tax-region value is [" + holder.getNodeValue('//*:attributes[1]/*:tax-region') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")
log.info("customer-account value is [" + holder.getNodeValue('//*:relationships[1]/*:customer-account') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:currency)"]=='true'?log.info("assertion pass. attributes-->currency exist"):assertionList.add("attributes-->currency is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:tax-region)"]=='true'?log.info("assertion pass. attributes-->tax-region exist"):assertionList.add("attributes-->tax-region is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")


//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:tax-region"] != null
assert holder["//*:attributes[1]/*:currency"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null


// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="fd686603-556c-4bae-bf5b-52c4391927a9" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Individual" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="6bb84bc8-68de-4ab1-8764-76202790c56e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get individual async uuid" id="edd2f54e-baa6-454c-83ad-f7b3ea52195b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Individual_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="bff596ae-0174-47b3-93ad-f6d6916a7176"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="ff66d90c-b42d-42b4-afbf-b96db7960aa9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="9f359869-b708-4017-b500-c8980d17e22c"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="87adbd13-5202-404e-b780-4d1fc70090f9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_formattedname" id="9b2ffc37-d294-4b31-b359-b6c350201128"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual formatted Name " + holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
log.info("Identification link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_formattedName", holder.getNodeValue("//*:attributes[1]/*:formatted-name"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:identifications[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get identifications link response" id="d1cbc3ca-ec1f-46c2-9353-abe23713b201"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get identifications link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_identification_details" id="34728ebe-b7c3-458f-b727-0bdfb69c3100"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get identifications link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual identification id " + holder.getNodeValue("//*:attributes[1]/*:identification-id"))
log.info("individual identification type " + holder.getNodeValue("//*:attributes[1]/*:identification-type"))
log.info("Contact Media link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_identification_id", holder.getNodeValue("//*:attributes[1]/*:identification-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_identificationType", holder.getNodeValue("//*:attributes[1]/*:identification-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:contact-media[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Contact Media link response" id="40367071-5735-4012-bf5e-a530ff079002"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Contact Media link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_contact_media_details" id="f40d822d-7b92-4f3d-8a2e-c867444b5fc2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Contact Media link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual contact media role " + holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("individual contact media medium-type " + holder.getNodeValue("//*:attributes[1]/*:medium-type"))
log.info("external-references link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_contactmedia_mediumtype", holder.getNodeValue("//*:attributes[1]/*:medium-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="77717759-d93d-41f2-bcf8-5ee1ed3a755a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_external_references_details" id="061f286b-1c97-4bdc-a406-6d4be3076af6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("individual external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("individual external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))
log.info("related-parties link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("ind_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:related-parties[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Parties link response" id="af73941c-bb08-4a34-9423-1fba1b97be9f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Parties link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0013"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_ind_related_parties_details" id="cc9685e3-bd13-4735-933a-bddd816c9b68"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Parties link response#ResponseAsXml")

log.info("individual related parties role " + holder.getNodeValue("//*:attributes[1]/*:role"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_related_party_role", holder.getNodeValue("//*:attributes[1]/*:role"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="5f569ef2-746c-45b6-9b60-bec71d7652e1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="bcd5f510-5336-45d6-a131-e4e794d693da-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="0fdc5798-5fed-4270-941e-8ed840e488f7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="84778664-6cab-418c-b97d-e8777d6c914b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Customer Account For Termination" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create_Customer_Account" id="85ed03f1-ba41-4059-a2e2-4e79c284d16f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "CONS",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get customer account- terminate async uuid" id="3a804c66-3039-44d2-a53a-1ec062e1be21"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create_Customer_Account#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_terminate_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="7dfe040f-0db1-4ccb-96fe-ee0e5459db62"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="ea705da2-7ce3-471c-9743-320696f6e21e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="0aadf4c7-a761-4a42-8bb8-d22a0dd0143b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="1db7a96d-dee0-4365-8a32-923c9cb6a656"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer account_details" id="af97a149-b94f-4b04-9e57-5931ed95ae4a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account id for termination " + holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("customer account type " + holder.getNodeValue("//*:attributes[1]/*:account-type"))
log.info("customer account lifecycle status " + holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("customer account name for termination " + holder.getNodeValue("//*:attributes[1]/*:name"))

log.info("External References link in Async resource: " + holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_account_id_for_termination", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_type", holder.getNodeValue("//*:attributes[1]/*:account-type"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_account_name_for_termination", holder.getNodeValue("//*:attributes[1]/*:name"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:external-references[1]/*:links[1]/*:related"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get External References link response" id="a7d0ee4b-028d-408e-8a2b-ef9c55920bd3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get External References link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0007"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_external_references_details" id="8ad31f40-20f7-4565-8d1a-72c8996c1c31"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get External References link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account external references id " + holder.getNodeValue("//*:attributes[1]/*:reference-id"))
log.info("customer account external references type " + holder.getNodeValue("//*:attributes[1]/*:reference-type"))

log.info("billing accounts link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_id", holder.getNodeValue("//*:attributes[1]/*:reference-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_ext_ref_type", holder.getNodeValue("//*:attributes[1]/*:reference-type"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account link response" id="5b80c6f9-58bf-4ca9-8d1c-f434ced11b67"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0009"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_details" id="b56f10f3-af4c-43ea-a248-162cab56357a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account link response#ResponseAsXml")
def holder1 = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("customer account related billing account id " + holder.getNodeValue("//*:attributes[1]/*:account-id"))

log.info("agreements link in Async resource: " + holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_related_billing_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder1.getNodeValue("//*:relationships[1]/*:agreements[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Agreements link response" id="1dcca407-1b52-4a0a-9f7d-770d812b3c24"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Agreements link response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0011"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_agreement_details" id="2d6c3eae-5dea-4693-9c25-6dcc89d93875"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Agreements link response#ResponseAsXml")


log.info("customer account -agreements.document-id" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
log.info("customer account -agreements.lifecycle-status" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
log.info("customer account -agreements.reference-number" + holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))


testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_id", holder.getNodeValue("//*:attributes[1]/*:agreements[1]//*:document-id"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_lifecycle_status", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:lifecycle-status"))
testRunner.testCase.testSuite.project.setPropertyValue("cust_acc_agreement_ref_number", holder.getNodeValue("//*:attributes[1]/*:agreements[1]/*:reference-number"))

</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account With Name" id="58d8a79f-f36e-44ce-9d9d-ce5311ced425"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account With Name" id="98e6e9b3-e011-4c3b-9aa7-8c0338acbeaa" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="103670d0-9a06-46e6-8476-00b82eccebf5-0013" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/customer-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fb443920-4ed9-4eab-bb2a-cca87580b3a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="2e2df4b4-2999-4df2-a255-a6279cbf3fb9" name="Contains"><con:configuration><token>account-id</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e37a91b9-0167-4dfe-bea4-603635e03871" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ name &quot;${#Project#cust_account_name_for_termination}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_uuid" id="dc0c5318-4f07-44ce-aaf0-5c96c7b0f0b1"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account With Name#ResponseAsXml")

log.info("Customer Account UUID created for termination:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("customer_account_uuid_for_termination", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="5fedf3d8-6f56-44d2-bb68-5655bf600031" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Terminate Customer" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Customer terminate" id="6649e9af-0ace-42fe-84be-87d5154c3522"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-terminate" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Customer terminate" id="cb1378db-6a77-40d6-b718-01fa73f0add9" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="c3763844-ce9b-4f32-b7ba-0cfda5e79cdc-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "customer-accounts-terminate",

    "attributes": {
      "end-datetime": "2020-04-23T18:25:43.511Z"
    },
    "relationships": {
      "instance": {
        "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid_for_termination}" }
      }
    }
  }
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-terminate</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="84ce84c1-9808-4974-b3eb-d32c7afa33a5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get terminate customer async uuid" id="8035b191-9799-4538-8419-7a23ba0fb761"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Customer terminate#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("terminate_cust_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="084e30e2-2388-4ef9-b533-71efd27f3227" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Customer terminate"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="10221fa3-e763-4141-9943-ca403f2f0eef" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Party Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Create Party Releationships_Request" id="98a2eaec-3446-40ff-9015-7e9363dfde63"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="29e4d230-03a7-48b3-b560-bc778308a424-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "employee"
                },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4793c1f1-3d8b-4816-8327-447cc7804960" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get party relationships async uuid" id="eccf9536-a61c-4cb1-8996-f97071ca8ee8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("party_rel_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="c4c2941d-3d2c-4cf5-803a-68454e0dd545"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Party Releationships_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="b150e79f-abd7-4e6c-b1f0-67b11ec21ecb"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Party Releationships_Request#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_async_resource_link_response" id="e6a4388f-9ba1-4fdd-a18b-32e991642af7"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_async_resource_link_response" id="616aed5d-4827-45c6-a778-6f03ec3d6410" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="29e4d230-03a7-48b3-b560-bc778308a424-0004" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/billing-accounts</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="63d41f84-f80d-4457-851f-a94ebb8416c4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="" value="billing_async_custacclink"/>
  <con:entry key="async_link_validation" value="${#Project#billing_async_custacclink}"/>
  <con:entry key="filter" value="(EQ customer-account.name &quot;${#Project#customer_account_name}&quot;)"/>
</con:parameters><con:parameterOrder><con:entry/></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Get party relatiionship details" id="56e0360a-87fb-46ff-bd8b-1d7b266a221a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_async_resource_link_response#ResponseAsXml")

log.info("party relationship role: "+holder.getNodeValue("//*:attributes[1]/*:role"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
log.info("party relationship role: "+holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))


testRunner.testCase.testSuite.project.setPropertyValue("party_relationship_role", holder.getNodeValue("//*:attributes[1]/*:role"))
testRunner.testCase.testSuite.project.setPropertyValue("party_id", holder.getNodeValue("//*:relationships[1]/*:party[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("target_id", holder.getNodeValue("//*:relationships[1]/*:target[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7de8bd34-8b73-4a16-9890-035d5283fb43" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account - All related identifications.contact-media,related-parties" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="89d72931-f99d-434a-8897-e03d38a5a3fa"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 2" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="df0b1342-8574-4c9b-8f1e-c5128cc78868-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="filter" value="(EQ account-id  &quot;${#Project#cust_account_id}&quot;)"/>
  <con:entry key="include" value="related-parties.party.identifications,related-parties.party.contact-media,related-parties.party.related-parties.party,related-parties.party.related-parties.party.identifications,related-parties.party.related-parties.party.contact-media"/>
</con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="cfc960cd-fc8f-4bde-ac54-26e62e0e1a0e" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Customer Account using account-id" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="809f1963-2af0-412e-8244-7f7596df9aeb"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d38deb79-170f-4743-9b17-e5e9ca61fbeb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="35294b47-2c8c-45df-8e7d-655908429041-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a7360d7-5872-48d5-8990-2bde3ff13945" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="59d5f276-2120-45b4-ad3d-d70cf6c4eb32" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:account-type)"]=='true'? log.info("assertion pass. attributes-->account-type exist"):assertionList.add("attributes-->account-type is missing")
holder["exists(//*:attributes[1]/*:account-id)"]=='true'?log.info("assertion pass. attributes-->account-id exist"):assertionList.add("attributes-->account-id is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'?log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'?log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:external-references)"]=='true'?log.info("assertion pass. relationships-->external-references exist"):assertionList.add("relationships-->external-references is missing")
holder["exists(//*:relationships[1]/*:related-parties)"]=='true'?log.info("assertion pass. relationships-->related-parties exist"):assertionList.add("relationships-->related-parties is missing")
holder["exists(//*:relationships[1]/*:billing-accounts)"]=='true'?log.info("assertion pass. relationships-->billing-accounts exist"):assertionList.add("relationships-->billing-accounts is missing")
holder["exists(//*:relationships[1]/*:agreements)"]=='true'?log.info("assertion pass. relationships-->agreements exist"):assertionList.add("relationships-->agreements is missing")
holder["exists(//*:id[1])"]=='true'?log.info("assertion pass. id exist"):assertionList.add("id is missing")
("meta-->created-by-->actor-id is missing")
holder["exists(//*:type[1])"]=='true'?log.info("assertion pass. type exist"):assertionList.add("type is missing")

//to validate that account-id, account-type,characteristics,lifecycle-status,related-parties and valid-for are not NULL
assert holder["//*:attributes[1]/*:account-id"] != null
assert holder["//*:attributes[1]/*:account-type"] != null
assert holder["//*:attributes[1]/*:characteristics"] != null
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:relationships[1]/*:related-parties"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null


// to validate that account-type should be one among [private, soho, corporate, government]
String account_type=holder.getNodeValue('//*:attributes[1]/*:account-type')
assert ["CONS", "COMP", "YKS", "KAM","PKM","TUK","WEL","DNA","DNK","SYV","HUU"].contains(account_type)==true

// to validate that lifecycle-status is one among [pending, active, inactive, suspended]
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["pending", "active", "inactive", "suspended"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ account-id  &quot;${#Project#cust_account_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="3d2d882d-8d82-4a1f-8c7b-2dc47dbff9cf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Specifications with Bundling Items, Bundled Items, offerings for Optimi" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="f78f26d1-7bbc-4d8f-9e06-424735530455"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/specifications/PO_Optimi" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="53c6849e-2517-49c7-b5f5-6a7926f09222" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="6535d1fd-80be-4c67-9d7d-c1f0630119d2-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/specifications/PO_Optimi</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="58722a07-fe33-43a1-bd3e-f65eb0e5ad9d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="5a4aac02-1a22-4d90-baad-189bfe99a055" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:spec-subtype)"]=='true'? log.info("assertion pass. attributes-->spec-subtype exist"):assertionList.add("attributes-->spec-subtype is missing")
holder["exists(//*:attributes[1]/*:spec-type)"]=='true'?log.info("assertion pass. attributes-->spec-type exist"):assertionList.add("attributes-->spec-type is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


holder["exists(//*:attributes[1]/*:feature-characteristics)"]=='true'?log.info("assertion pass. attributes-->feature-characteristics exist"):assertionList.add("attributes-->feature-characteristics is missing")
holder["exists(//*:attributes[1]/*:instance-characteristics)"]=='true'?log.info("assertion pass. attributes-->instance-characteristics exist"):assertionList.add("attributes-->instance-characteristics is missing")
holder["exists(//*:attributes[1]/*:input-characteristics)"]=='true'?log.info("assertion pass. attributes-->input-characteristics exist"):assertionList.add("attributes-->input-characteristics is missing")

holder["exists(//*:attributes[1]/*:categories)"]=='true'? log.info("assertion pass. attributes-->categories exist"):assertionList.add("attributes-->categories is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="include" value="bundling-items,bundled-items,offerings" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>include</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4f208a06-3091-4fcd-9e4c-23945f0008e2" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Create Optimi Product Order" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="create optimi order" id="7404c3cc-9886-46b2-9508-8e4e6d57bcfc"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/vnd.api+json" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 30.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 40.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="4ffef9ae-dc6a-42a7-803a-b2578b7459d8"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)
log.info("TestSuite Setup Script setting identification_id = '" + randomNumber + "'")

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info("TestSuite Setup Script setting customer_account_name = '" + customerAccountName + "'")

String formattedNames  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName",formattedNames)
log.info("TestSuite Setup Script setting formattedName = '" + formattedNames + "'")

String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info("TestSuite Setup Script setting individual_name = '" + individualName + "'")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)
log.info("TestSuite Setup Script setting reference_number = '" + refNumber + "'")

def identificationTypes = ['business-identity-code']
def random = new Random()
def randomKey =random.nextInt(identificationTypes.size()) 
testSuite.project.setPropertyValue("identificationType","${identificationTypes[randomKey]}")
log.info("TestSuite Setup Script setting identificationType = '" + "${identificationTypes[randomKey]}" + "'")

String randomNumber1 = org.apache.commons.lang.RandomStringUtils.random(7, false, true)
testSuite.project.setPropertyValue("identification_id_things",randomNumber1)
log.info("TestSuite Setup Script setting identification_id_things = '" + randomNumber1 + "'")

String formattedNames1  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName_things",formattedNames1)
log.info("TestSuite Setup Script setting formattedName_things = '" + formattedNames1 + "'")

String randomNum = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("createidentification_id",randomNum)
log.info("TestSuite Setup Script setting createidentification_id = '" + randomNum + "'")

// FEATURE RUBT-XXXX: Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript><con:tearDownScript><![CDATA[// FEATURE: Store all used property values to a given location for later use
//
def  props = new Properties()
def names = testSuite.project.getPropertyNames()
log.info("Storing properties to a file")
if (names) {
	names.each { name -> 
     	if (!name.equals("bssapi_runtime_properties")) {
          	def pValue = testSuite.project.getPropertyValue(name)
               log.info("   Save: " + name + " = " + pValue)
               if (pValue == null) {
               	pValue = ""
               }
               props.setProperty(name, pValue)
          }
	}
     def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
     def projectPath = groovyUtils.projectPath
     def propsFileLoc = testSuite.project.getPropertyValue("bssapi_runtime_properties")
     def loc = propsFileLoc.replaceAll('"', '')
     propsFileLoc = loc
     if (!(new File(propsFileLoc)).exists()) {
     	if (projectPath.trim().length() > 0) {
          	propsFileLoc = projectPath + "\\" + propsFileLoc
         	}
	} else {
     	//log.info("Using given propertied file from: " + propsFileLoc)
     }
     testSuite.project.setPropertyValue("bssapi_runtime_properties", propsFileLoc)
     File propFile = new File(propsFileLoc)
     props.store(propFile.newWriter(), null)
     log.info("Used properties saved to a file: " + propsFileLoc)
} else {
     log.info("There does not seem to have any project properties to write, check it.")
}

// FEATURE: Store requests and responses to a file for debugging purposes to given location
//
import java.text.SimpleDateFormat
def loggingEnabled = testSuite.project.getPropertyValue('message_logging_enabled')
if (loggingEnabled.length() > 0 && loggingEnabled.toLowerCase().equals("true")) {
	log.info("Message logging enabled.")
	def date = new Date()
	def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
	
	groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
	projectPath = groovyUtils.projectPath
	if (projectPath.trim().length() > 0) {
		projectPath += "/"
	}
	//Write Request to XML File 
	def folderPath =  projectPath + 'bssapi_messaging_logs/' + testSuite.name.replaceAll(' ', '_') + '_' + dts + File.separator
	log.info("Available requests and responses stored as files to: " + folderPath) 
	new File(folderPath).mkdirs()
	
	// for each testCase in the testSuite
	testSuite.testCases.each { testCaseName, testCase ->
		// path for this testCase
	    	if (testCase != null && testCase.disabled == false) {
		    	def folderPathSuite = folderPath + testCaseName.replaceAll(' ', '_') + File.separator
		    	new File(folderPathSuite).mkdir()
		
		    	// for each testStep
		    	testCase.testSteps.each { testStepName, testStep ->       
		    		def idx = testCase.getTestStepIndexByName(testStepName)
		    		//log.info("TEST STEP INDEX: " + idx)
		    		if (testStep != null && testStep.disabled == false) {
			    		def steptype = testStep.config.type
			        	if(steptype == "restrequest") {
			          	def methodtype = testStep.getHttpRequest().getMethod().toString()
			               //log.info(methodtype.toString())
			       		if(methodtype == "POST") {
			        			def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_request.json')
			        			def value = testStep.getProperty('Request').getValue()
			        			if (value != null) {
			        				log.info("   Write: " + file.name)
			        				file.write(value)
			        			} else {
			        				log.info("   Skip : Value was NULL for POST response content: " + testCaseName + "." + testStepName)
			        			}
			       		}
			       		if (testStep != null) {
				        		if (testStep.getProperty('Response') != null) {
					        		// get the response and write to file 
					        		def file = new File(folderPathSuite + String.format("%04d", idx) + "_" + testStepName.replaceAll(' ', '_') + '_response.json')
					        		def value = testStep.getProperty('Response').getValue()
					        		if (value != null) {
					        			log.info("   Write: " + file.name)
					        			file.write(value)
					        		} else {
					        			log.info("   Skip : Value was NULL for GET response content: " + testCaseName + "." + testStepName)
					        		}
				        		} else {
				        			log.info("No response available for " + testCaseName + "." + testStepName)
				        		}
			       		}
			        	}
		        	} else {
		       		//log.info(testStep.config.type)
		        	}
		    	}
	    }
	}
} else {
	log.info("Message logging disable by default. Set 'message_logging_enabled' to 'true', if request/responses is wanted to be stored as JSON files.")
}

// FEATURE RUBT-XXXX
// Removing X-Trace-Token headers from REST requests
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
log.info("Clearing X-Trace-Token headers from REST requests")
testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null && testCase.disabled == false) {
		testCase.testSteps.each { testStepName, testStep ->       
			if (testStep != null && testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					// Clearing X-Trace-Token header
				     def headers = testStep.getHttpRequest().getRequestHeaders()
			     	headers.remove("X-Trace-Token")
			     	testStep.getHttpRequest().setRequestHeaders(headers)
				}
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
]]></con:tearDownScript></con:testSuite><con:testSuite id="9e15014b-8f64-4cc2-9a89-045b025b3609" name="Catalog Domain Entity Validations"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="75c980a8-8b62-4cbe-89f6-54a19f26b6bf" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Calalog Prices" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="696d72f2-50c6-4965-a04d-1e36fbd03454"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/catalog-prices" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="08e56f10-00c3-4a98-b773-6690f65d67b8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/catalog-prices</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1cce54e6-b741-4fdf-8296-019e26d918ed" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="baa81154-70ff-4adf-a16f-d84f9081fa42" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:price)"]=='true'? log.info("assertion pass. attributes-->price exist"):assertionList.add("attributes-->price is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:price-specification)"]=='true'?log.info("assertion pass. relationships-->price-specification exist"):assertionList.add("relationships-->price-specification is missing")
holder["exists(//*:relationships[1]/*:target)"]=='true'?log.info("assertion pass. relationships-->target exist"):assertionList.add("relationships-->target is missing")

//to validate that price,price-specification,target and valid-for are not NULL
assert holder["//*:attributes[1]/*:price"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:relationships[1]/*:price-specification"] != null
assert holder["//*:relationships[1]/*:target"] != null

assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="af00b035-e5cf-4096-a87c-246588e516ee" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Commercial Enrichments" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="aa6764ee-557e-43c2-a3f9-dd48da680c64"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/commercial-enrichments" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="57355ead-a957-41e1-a830-9cffbccc97cb" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/commercial-enrichments</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f9ee3f94-ab0a-416a-888b-939b084a5737" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="10456e44-6a1b-4919-8204-da48feb6f9a8" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:descriptions)"]=='true'? log.info("assertion pass. attributes-->descriptions exist"):assertionList.add("attributes-->descriptions is missing")
holder["exists(//*:attributes[1]/*:media)"]=='true'? log.info("assertion pass. attributes-->media exist"):assertionList.add("attributes-->media is missing")
holder["exists(//*:attributes[1]/*:names)"]=='true'? log.info("assertion pass. attributes-->names exist"):assertionList.add("attributes-->names is missing")
holder["exists(//*:relationships[1]/*:target)"]=='true'?log.info("assertion pass. relationships-->target exist"):assertionList.add("relationships-->target is missing")

//to validate that price,price-specification,target and valid-for are not NULL
assert holder["//*:attributes[1]/*:descriptions"] != null
assert holder["//*:attributes[1]/*:names"] != null
assert holder["//*:relationships[1]/*:target"] != null

assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="a23734b3-6daa-46c1-b09f-c252bb3a6e5d" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Compatibility Limitations" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="07b6d791-635d-4996-9774-8ca001acf9d1"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/compatibility-limitations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="1ca98f63-f8af-4470-bcbd-1fd5329221c9" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/compatibility-limitations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9e0ef03d-a4a4-45f1-8548-d6ad035a6bd1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="102b1951-a5f3-434d-af79-497ab45e4338" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:related-area)"]=='true'? log.info("assertion pass. attributes-->related-area exist"):assertionList.add("attributes-->related-area is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:source-item)"]=='true'?log.info("assertion pass. relationships-->source-item exist"):assertionList.add("relationships-->source-item is missing")

//to validate that price,price-specification,target and valid-for are not NULL
assert holder["//*:attributes[1]/*:related-area"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:relationships[1]/*:source-item"] != null

assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d8bf0af6-087f-4b2b-9ba7-afa181d38e78" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Price Specifications" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="e60f2eb9-efbc-41b2-9b75-c78663bad386"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/price-specifications" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="f65995f0-0718-4e6a-8d92-87da79e84c8e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/price-specifications</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="b25303db-5ea8-4afb-9e20-d827b5fb6f6d" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d34a1f74-1e30-41d9-9027-5499182a95e5" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:price-type)"]=='true'? log.info("assertion pass. attributes-->price-type exist"):assertionList.add("attributes-->price-type is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'? log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")
holder["exists(//*:relationships[1]/*:target)"]=='true'?log.info("assertion pass. relationships-->target exist"):assertionList.add("relationships-->target is missing")

//to validate that price-type,name,target and valid-for are not NULL
assert holder["//*:attributes[1]/*:name"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:price-type"] != null
assert holder["//*:relationships[1]/*:target"] != null

assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d5965f1f-7648-4390-af62-86fe1f4ad926" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Product Offering Groups" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="aa211aff-a4ad-431f-b08d-22219d87cfd6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/product-offering-groups" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="8a65d01c-79aa-457a-a8c7-9f66bdb8f9d0" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/product-offering-groups</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="36de31bc-293d-4e3d-bfd8-f42796e429d1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e63e61c2-3805-4125-87c0-4f35c02154c5" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:relationships[1]/*:bundled-items)"]=='true'?log.info("assertion pass. relationships-->bundled-items exist"):assertionList.add("relationships-->bundled-items is missing")

//to validate that name and bundled-items are not NULL
assert holder["//*:attributes[1]/*:name"] != null
assert holder["//*:relationships[1]/*:bundled-items"] != null

assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="4f41b074-7c89-4a08-bac8-948aaff0fd36" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Product Offerings" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="d1f5ba00-088a-4ff9-a1fa-f9f605fc9d2a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/product-offerings" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="883ea21b-4c1f-4185-af72-acfe244691f6" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/product-offerings</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ed71e341-ede8-4c02-be38-d0ba0db4e215" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="b3efe71e-987d-484b-82ba-739df8d39020" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")

//to validate that name is not NULL
assert holder["//*:attributes[1]/*:name"] != null

assert assertionList.isEmpty() : assertionList.toString()

log.info(context.expand(messageExchange.getEndpoint()))</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="f5dd8833-baac-40b3-a4cc-6b96bb0eeda7" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Specifications" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="88c5dffe-46b9-4766-af7d-c91914ae6a5a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/specifications" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="a41cba65-8466-453e-8dab-ca5303f4091a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/specifications</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="fafbeed7-d180-4ef7-9598-f67940955be8" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="77322b75-07b0-4776-a9b7-9f7745a28f8a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:name)"]=='true'? log.info("assertion pass. attributes-->name exist"):assertionList.add("attributes-->name is missing")
holder["exists(//*:attributes[1]/*:spec-subtype)"]=='true'? log.info("assertion pass. attributes-->spec-subtype exist"):assertionList.add("attributes-->spec-subtype is missing")
holder["exists(//*:attributes[1]/*:spec-type)"]=='true'?log.info("assertion pass. attributes-->spec-type exist"):assertionList.add("attributes-->spec-type is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


holder["exists(//*:attributes[1]/*:feature-characteristics)"]=='true'?log.info("assertion pass. attributes-->feature-characteristics exist"):assertionList.add("attributes-->feature-characteristics is missing")
holder["exists(//*:attributes[1]/*:instance-characteristics)"]=='true'?log.info("assertion pass. attributes-->instance-characteristics exist"):assertionList.add("attributes-->instance-characteristics is missing")
holder["exists(//*:attributes[1]/*:input-characteristics)"]=='true'?log.info("assertion pass. attributes-->input-characteristics exist"):assertionList.add("attributes-->input-characteristics is missing")

holder["exists(//*:attributes[1]/*:categories)"]=='true'? log.info("assertion pass. attributes-->categories exist"):assertionList.add("attributes-->categories is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="9a8c9548-b4d1-46b4-ad93-49b07e8dd7d5" name="Agreements Domain Entity Validations"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="c94cbea7-db79-48be-a5d7-e2d189fb16d6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Agreement Items" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="bf873c12-71e1-412b-9950-36e409933402"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/agreement-items" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="663eb752-c82f-42f3-b81a-ede52b9f7e0b" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/agreement-items</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="987ae010-f7e7-4f72-9415-ccf0288756b7" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="00aceea4-e94b-4e70-944f-ba2ec182d87c" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:relationships[1]/*:product)"]=='true'? log.info("assertion pass. relationships-->product exist"):assertionList.add("relationships-->product is missing")
holder["exists(//*:relationships[1]/*:agreement)"]=='true'? log.info("assertion pass. relationships-->agreement exist"):assertionList.add("relationships-->agreement is missing")
holder["exists(//*:attributes[1]/*:order-date)"]=='true'? log.info("assertion pass. attributes-->order-date exist"):assertionList.add("attributes-->order-date is missing")
holder["exists(//*:attributes[1]/*:order-id)"]=='true'?log.info("assertion pass. attributes-->order-id exist"):assertionList.add("attributes-->order-id is missing")

//to validate that product, agreement,order-date and order-id are not NULL
assert holder["//*:attributes[1]/*:order-id"] != null
assert holder["//*:attributes[1]/*:order-date"] != null
assert holder["//*:relationships[1]/*:product"] != null
assert holder["//*:relationships[1]/*:agreement"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="d155cf82-5b64-4116-ab17-47231d245110" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Agreements" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="bbf9c6a3-5fb5-4399-9b64-25e8ad9772ec"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/agreements" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="d5edc407-5828-4fd6-b8ef-f04ae2d6ae69" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/agreements</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="1bdba48d-cfd6-4072-84d1-b90d33fba835" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4c8bd007-0d49-4f36-83bc-704f13c36a7c" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:relationships[1]/*:customer-account)"]=='true'? log.info("assertion pass. relationships-->customer-account exist"):assertionList.add("relationships-->customer-account is missing")
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:reference-number)"]=='true'? log.info("assertion pass. attributes-->reference-number exist"):assertionList.add("attributes-->reference-number is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

//to validate that customer-account,lifecycle-status,reference-number and valid-for are not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:attributes[1]/*:reference-number"] != null
assert holder["//*:relationships[1]/*:customer-account"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="7a119dc6-8c22-44be-87ed-19be0e029346" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Get Charging Relationships" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="Method 1 - Request 1" id="1592f79e-5f9b-4ee3-bbcd-696678ea89f6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/charging-relationships" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Method 1 - Request 1" id="1c0214e6-e2e3-449e-8299-54e4f9a505b2" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/charging-relationships</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="932141a9-7a8b-4512-91e1-c0df3f519863" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="d4a24ea8-cba0-4792-bfbd-413b6dcb3957" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
def holder = new XmlHolder(messageExchange.responseContentAsXml)

def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:relationships[1]/*:billing-account)"]=='true'? log.info("assertion pass. relationships-->billing-account exist"):assertionList.add("relationships-->billing-account is missing")
holder["exists(//*:relationships[1]/*:product)"]=='true'? log.info("assertion pass. relationships-->product exist"):assertionList.add("relationships-->product is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

//to validate that billing-account,product and valid-for are not NULL
assert holder["//*:attributes[1]/*:valid-for"] != null
assert holder["//*:relationships[1]/*:product"] != null
assert holder["//*:relationships[1]/*:billing-account"] != null</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:testSuite id="9db8656c-221f-415e-9e40-764127628239" name="DNA B2B Regression Test Suite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="ba24c0d6-5c0f-40c5-9bcd-055334c58831" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-42778-Suscription_Language_Change" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="get-products-with-filter-specification-id" id="02a9f4ef-d64b-4cb0-9bbe-b9d3cad6b2ac"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get-products-with-filter-specification-id" id="2f78827a-056a-49c4-ad5c-b4c84cf30ad7" mediaType="application/json"><con:settings/><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/products</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get-first-product-uuid" id="cd80f9c4-d17d-4aba-9604-ecffc6205bc9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("get-products-with-filter-specification-id#ResponseAsXml")
testRunner.testCase.testSuite.project.setPropertyValue("subscription_language_change_po_optimistic_product_id",holder.getNodeValue("//*:id"))


log.info holder.getNodeValue("//*:id")
</script></con:config></con:testStep><con:testStep type="restrequest" name="update-subscription-language-to-english" id="5b1b97c9-b3eb-4afc-b43f-2ed83f2c58a6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products-update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="update-subscription-language-to-english" id="4cf00a3a-919a-428d-bcb8-9df5d0aef309" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
	"data": {
		"type": "products-update",
		"attributes": {
			"characteristics": {
				"CH_Language": "ENG"
			}
		},
		"relationships": {
			"instance": {
				"data": {
					"type": "products",
					"id": "${#TestCase#subscription_language_change_po_optimistic_product_id}"
				}
			}
		}
	}
}</con:request><con:originalUri>http://217.78.216.195/api/products-update</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="69e7fb9b-ceb0-46c3-8eea-1f81298a4079" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay" id="6d3a689e-1d72-44ee-b325-0c7d7bb979ef"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="get-product-and-verify-language-change-english" id="c62418b3-8500-47fb-8b3a-e73ad824c819"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products/{product_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get-product-and-verify-language-change-english" id="f82ec0c5-c0db-4a1d-b019-b050238aed8a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/products/6690fd32-7dc9-4bef-9034-65bbdc2eff9c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a54c5f5a-f980-4b58-b4f7-5b5df564ec35" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1badb53c-8b1d-46cb-bf5d-9db424f0ae59" name="JsonPath Match"><con:configuration><path>$data.attributes.characteristics.CH_Language</path><content>ENG</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="product_uuid" value="${#TestCase#subscription_language_change_po_optimistic_product_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>product_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="update-subscription-language-to-finnish" id="add39716-4bd3-4c94-9264-ad83b4c10d7e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products-update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="update-subscription-language-to-finnish" id="4cf00a3a-919a-428d-bcb8-9df5d0aef309" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
	"data": {
		"type": "products-update",
		"attributes": {
			"characteristics": {
				"CH_Language": "FIN"
			}
		},
		"relationships": {
			"instance": {
				"data": {
					"type": "products",
					"id": "${#TestCase#subscription_language_change_po_optimistic_product_id}"
				}
			}
		}
	}
}</con:request><con:originalUri>http://217.78.216.195/api/products-update</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="69e7fb9b-ceb0-46c3-8eea-1f81298a4079" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="delay" name="Delay 1" id="71478886-f76f-4cc6-aa97-07f30ba2cc0b"><con:settings/><con:config><delay>1000</delay></con:config></con:testStep><con:testStep type="restrequest" name="get-product-and-verify-language-change-finnish" id="62f431cc-5078-4998-9c4f-e5100e3a453e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products/{product_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get-product-and-verify-language-change-finnish" id="f82ec0c5-c0db-4a1d-b019-b050238aed8a" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/products/6690fd32-7dc9-4bef-9034-65bbdc2eff9c</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a54c5f5a-f980-4b58-b4f7-5b5df564ec35" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="JsonPath Match" id="1badb53c-8b1d-46cb-bf5d-9db424f0ae59" name="JsonPath Match"><con:configuration><path>$data.attributes.characteristics.CH_Language</path><content>FIN</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="product_uuid" value="${#TestCase#subscription_language_change_po_optimistic_product_id}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>product_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties><con:property><con:name>subscription_language_change_po_optimistic_product_id</con:name><con:value>6690fd32-7dc9-4bef-9034-65bbdc2eff9c</con:value></con:property></con:properties></con:testCase><con:testCase id="39e29d14-3f26-44f7-b08f-2acd9f0a77dc" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-1784 - Sales Agreement - spec to sales - org" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="96c9dbfc-79e5-477f-85da-f08a24c3d12c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "${#Project#formattedName}",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "${#Project#identification_id}",
"identification-type": "${#Project#identificationType}",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="2222149e-20aa-4846-afd4-969f604a5c59"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="719edd11-a282-4da0-aa29-e8e02bbf6a85"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get_Organization_UUID_Request" id="b7f397d5-b5b7-4768-86c4-115224e992f6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get_Organization_UUID_Request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0003" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4152a659-2512-4b94-a9cb-f81cb0dca6a6" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="0cbc3a41-fe38-42c7-8524-8d117486f2e3" name="Contains"><con:configuration><token>formatted-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="086b218b-f5e7-491a-95a5-8d7c7c41f989" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("is-legal-entity value is [" + holder.getNodeValue('//*:attributes[1]/*:is-legal-entity') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("trading-name value is [" + holder.getNodeValue('//*:attributes[1]/*:trading-name') + "]")
log.info("valid-for value is [" + holder.getNodeValue('//*:attributes[1]/*:valid-for') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_uuid" id="97a1624f-f84d-4f42-8c52-05bd6257acc9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get_Organization_UUID_Request#ResponseAsXml")

log.info("Organization UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales agreement_without_parent_request" id="2c2a7f6a-40ab-444b-9bd5-85e4b0fa58fa"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_without_parent_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0005" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement_without_parent",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "organizations",
            "id": "${#Project#org_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement uuid and async uuid - without parent" id="f4f09462-dd0d-4f94-9bf5-aa1568d47a73"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_without_parent_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

log.info("sale agreement uuid " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))


</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="7c13e75a-c1dc-4f1d-8846-ab527b6a33f0"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_without_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales agreement_with_parent_request" id="1046651a-ca6a-4c27-9ecb-9d2be0ce744b"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_with_parent_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0008" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement_withparent",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-07-12T8:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        },
        "parent-agreement": {
          "data": {
            "type": "sales-agreements",
            "id": "${#Project#sales_agreement_uuid}"
          }
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-07-12T08:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "organizations",
            "id": "${#Project#org_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement uuid and async uuid - with parent" id="f6da4643-f13d-4718-b787-3acbc67ddec5"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_with_parent_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))
log.info("sale agreement with parent uuid  " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_withparent_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="5e605f48-a485-480f-abc7-8b23018a62e5"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_with_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create spec to sales agreement" id="c1e62d27-9234-4490-90ea-7e486ee34d2d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/spec-to-sales-agreement-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create spec to sales agreement" id="ae9618f7-cc95-440f-b29c-f6b3d2777624" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0011" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "spec-to-sales-agreement-relationships-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "spec-to-sales-agreement-relationships", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "spec-to-sales-agreement-relationships",
      "id": "temp-id-1",
      "attributes": {
        "valid-for": {
          "start-datetime": "2017-07-15T07:49:37Z"
        }
      },
      "relationships": {
        "agreement": {
          "data": {
            "type": "sales-agreements",
            "id": "${#Project#sales_agreement_withparent_uuid}"
          }
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_OptimiPackage"
           }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/spec-to-sales-agreement-relationships-create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5f3e7bc5-6710-4fe6-ab6e-18a44f4e2c9b" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5e03d175-4400-49fe-a606-da90cdfb75f4" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 3" id="3549e407-5f3a-48f7-9b57-b2e402192338"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_with_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="f1194dff-cc62-48b7-9929-2d7af64c1f6e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0013"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7cb0959d-1348-4a6e-8075-7329dc4ed690" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="90503db5-5711-4e21-830d-7aa2d592ea3f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="c39460d2-9c0a-4b06-98ee-518f63c96632"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d-0015"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f9f15321-183b-4418-aeab-ef36e4bf1263" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3ad73ade-42b9-48d7-9e6f-19ad40bc3526" name="Contains"><con:configuration><token>${#Project#sales_agreement_withparent_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad275e40-58c3-419a-9b64-99b85700fd42" name="Contains 1"><con:configuration><token>${#Project#sales_agreement_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="29c15075-c8e2-4cfb-a108-e05298eba173" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-1784 - Sales Agreement - spec to sales - ind" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="cee420d8-b9b6-4377-b6ea-c65d23e08960"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get individual async uuid" id="657e90da-c682-491f-b547-07ed14ddd6e4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Individual_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="2aa2c392-627c-43ec-8455-804e993bcad2"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="cf4b43cf-3a50-4706-9bf2-ee1d35ee845d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0003" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="2c3f6b38-ed35-43b1-9dde-accbcf23b064"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales agreement_without_parent_request" id="f9571934-c8c2-4a71-88b5-a24103edaa10"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_without_parent_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0005" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement_without_parent",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement uuid and async uuid - without parent" id="a5512941-f9f1-4977-b10f-16ba63431de9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_without_parent_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

log.info("sale agreement uuid " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))


</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="6b6b5bb6-a159-49d7-98e3-272b305d574a"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_without_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales agreement_with_parent_request" id="a6be28be-0d03-4dc0-b833-5acf54989b88"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_with_parent_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0008" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement_withparent",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-07-12T8:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        },
        "parent-agreement": {
          "data": {
            "type": "sales-agreements",
            "id": "${#Project#sales_agreement_uuid}"
          }
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-07-12T08:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement uuid and async uuid - with parent" id="21d07418-2972-4439-8b63-330ee8ae7448"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_with_parent_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))
log.info("sale agreement with parent uuid  " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_withparent_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="7a3bf2f0-5c1b-49e4-8aa3-47112ab19a7b"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_with_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create spec to sales agreement" id="f67e4207-30dc-4276-8fb9-833f80da9c44"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/spec-to-sales-agreement-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create spec to sales agreement" id="ae9618f7-cc95-440f-b29c-f6b3d2777624" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0011" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "spec-to-sales-agreement-relationships-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "spec-to-sales-agreement-relationships", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "spec-to-sales-agreement-relationships",
      "id": "temp-id-1",
      "attributes": {
        "valid-for": {
          "start-datetime": "2017-07-15T07:49:37Z"
        }
      },
      "relationships": {
        "agreement": {
          "data": {
            "type": "sales-agreements",
            "id": "${#Project#sales_agreement_withparent_uuid}"
          }
        },
        "specification": {
          "data": {
            "type": "specifications",
            "id": "PO_OptimiPackage"
           }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/spec-to-sales-agreement-relationships-create</con:originalUri><con:assertion type="GroovyScriptAssertion" id="5f3e7bc5-6710-4fe6-ab6e-18a44f4e2c9b" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="5e03d175-4400-49fe-a606-da90cdfb75f4" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 3" id="c65e994a-c573-4e35-b9f8-db9a4696cbb8"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_with_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="a4203b62-2ed4-407a-bd9c-62b34bed1c16"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0013"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7cb0959d-1348-4a6e-8075-7329dc4ed690" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="9474da1e-0bbe-460b-93c5-ee23f3158e2d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="7efcd32e-d551-41fd-9054-7a600c9904d0"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="fe7b8082-1ead-4682-8aa6-1757a4ec1e8d-0015"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f9f15321-183b-4418-aeab-ef36e4bf1263" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="3ad73ade-42b9-48d7-9e6f-19ad40bc3526" name="Contains"><con:configuration><token>${#Project#sales_agreement_withparent_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad275e40-58c3-419a-9b64-99b85700fd42" name="Contains 1"><con:configuration><token>${#Project#sales_agreement_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="53016667-af23-46aa-956e-1a8c980101f6" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-1784 - Sales Agreement - sales price" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Create Individual_Request" id="f02465d8-d2a8-4fa4-9d91-3d59a27c0fa6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "IND-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get individual async uuid" id="c929a5f1-ec02-4ffd-a5a3-58f5ae36fb80"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Individual_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("ind_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="1cc91384-89d5-4fed-8751-3143c1258416"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="ffb5137f-ef54-4cc0-8250-7ec1c1900eb0"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0003" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="b7a0bb4f-11f3-4784-8176-356961788133"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales agreement_without_parent_request" id="03428353-5672-4e29-b1dc-077d61ddab1d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_without_parent_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0005" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement_without_parent",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-06-17T16:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement uuid and async uuid - without parent" id="64fe5261-00c3-47d3-9be5-d7c2f2e404b0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_without_parent_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

log.info("sale agreement uuid " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))


</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="8c66e4e2-ed13-4fb1-b435-acde445d1000"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_without_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales agreement_with_parent_request" id="5eac5d59-40ab-4995-a303-58e7147aab1a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-agreements-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales agreement_with_parent_request" id="4e0376d3-e534-47fb-abb3-fdd0699e5c45" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0008" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
    "type": "sales-agreements-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-agreements", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-agreements",
      "id": "temp-id-1",
      "attributes": {
        "reference-number": "${#Project#reference_number}_salesagreement_withparent",
        "agreement-type": "service-agreement",
        "description": "Service level with Qvantel Finland Oy",
        "sales-info": {
          "chain-id": "SALES_B2B",
          "dealer-id": "HKI_OFFICE_17",
          "salesperson-id": "jsmith",
          "channel": "b2b-pos",
          "sales-type": "acquisition"
        },
        "characteristics": {
          "version": "1.0",
          "tags": "qvantel, new-sales, b2b, helsinki"
        },
        "valid-for": {
          "start-datetime": "2016-07-12T8:00:00Z"
        }
      },
      "relationships": {
        "related-parties": {
          "data": [
            { "type": "party-relationships", "id": "temp-id-2" }
          ]
        },
        "parent-agreement": {
          "data": {
            "type": "sales-agreements",
            "id": "${#Project#sales_agreement_uuid}"
          }
        }
      }
    },
    {
      "type": "party-relationships",
      "id":"temp-id-2",
      "attributes": {
        "valid-for": {
          "start-datetime": "2016-07-12T08:00:00Z"
        }
      },
      "relationships": {
        "party": {
          "data": {
            "type": "individuals",
            "id": "${#Project#individual_uuid}"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/sales-agreements-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30998bc3-1a05-4581-9fc3-8f81934efa44" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="fc79158e-0599-4a6a-b6f2-4644ce74182a" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get sales agreement uuid and async uuid - with parent" id="2b256100-305d-473f-a67b-c0613f021f85"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("create sales agreement_with_parent_request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))
log.info("sale agreement with parent uuid  " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_async_uuid", holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("sales_agreement_withparent_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="3e7ac469-748b-4cd2-aabc-820524a976df"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales agreement_with_parent_request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create sales price" id="99d8c267-508f-4edd-aca1-bcc26bcdc4a9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sales-prices-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create sales price" id="e1f4255a-c1dd-4812-926a-5afb7bbda5e6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0011" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "sales-prices-create",
    "relationships": {
      "new-instance": {
        "data": { "type": "sales-prices", "id": "temp-id-1" }
      }
    }
  },
  "included": [
    {
      "type": "sales-prices",
      "id": "temp-id-1",
      "attributes": {
        "price": {
          "currency": "EUR",
          "tax-free-amount": 5.95
        },
        "valid-for": {
          "meta": {
            "type": "valid-for-datetime"
          },
          "start-datetime": "2017-10-06T07:49:37Z"
        }
      },
      "relationships": {
        "target": {
          "data": {
            "type": "sales-agreements",
            "id": "${#Project#sales_agreement_uuid}"
          }
        },
        "price-specification": {
          "data": {
            "type": "price-specifications",
            "id": "${#Project#pricespecification}"
           }
        }
      }
    }
  ]
}
</con:request><con:originalUri>http://217.78.216.195/api/sales-prices-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d03c2a6-d1b2-47c2-9e43-56ade5bbf3ab" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="41374452-385a-46b0-8e96-472a438fbc47" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 3" id="497d275d-e496-4d71-aed2-f8410dda5874"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create sales price"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="40bdb6e5-dd98-4ec1-82c4-c605c3ec97fc"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0013"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7cb0959d-1348-4a6e-8075-7329dc4ed690" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="3cde6e93-6c36-4fcb-894d-1fb048364e9d"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="7cdbb537-39be-4ccb-b55b-e0f529666b02"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="20cdfafe-0e78-4743-9fc5-218e5fa7bb99-0015"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f9f15321-183b-4418-aeab-ef36e4bf1263" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ad275e40-58c3-419a-9b64-99b85700fd42" name="Contains 1"><con:configuration><token>${#Project#sales_agreement_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="e0f234f0-8283-49c3-a27d-17f9ff9b8834" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-1845-Create_Contact_Persons" searchProperties="true" disabled="true"><con:settings/><con:testStep type="groovy" name="setup-script-define-relation" id="6b2ae7ad-98e5-4d09-a0ed-ec4593bdf00a"><con:settings/><con:config><script>context.testCase.setPropertyValue("sub_role","main") 
context.testCase.setPropertyValue("rank","1") 
context.relation=[["main","2"],["marketing","1"], ["marketing","2"],["delivery","1"],["delivery","2"],["billing","1"],["billing","2"]] 
log.info("setupscript+++"+ context.relation.size()) 
log.info("setupscript+++"+context.relation[0][0])
context.testCase.setPropertyValue("size",context.relation.size().toString()) </script></con:config></con:testStep><con:testStep type="groovy" name="generate-random-testdata" id="47eb6d44-1499-42f4-bf7a-6815b01b7b2e"><con:settings/><con:config><script>//generating test data for organization create
String randomString = org.apache.commons.lang.RandomStringUtils.random(4, true, true)
String randomNumber=new Date().format('yyyyMMddssmm')[4..-1]

log.info("randomString++++"+ randomString)
log.info("randomNumber++++"+randomNumber)

context.testCase.setPropertyValue("org_id","35"+randomNumber)
context.testCase.setPropertyValue("trading_name","trading "+randomString)
context.testCase.setPropertyValue("org_formatted_name","fn "+randomString)
context.testCase.setPropertyValue("org_contact_media_id1","1"+randomNumber)
context.testCase.setPropertyValue("org_contact_media_id2","2"+randomNumber)
context.testCase.setPropertyValue("org_identification_id","36"+randomNumber)
context.testCase.setPropertyValue("org_identification_att_id","37"+randomNumber)


//generating test data for individual
context.testCase.setPropertyValue("individual_id","38"+randomNumber)
context.testCase.setPropertyValue("ind_identification_id","39"+randomNumber)
context.testCase.setPropertyValue("given_name","GN "+randomString)
context.testCase.setPropertyValue("additional_name","AN "+randomString)
context.testCase.setPropertyValue("family_name","FAM "+randomString)
context.testCase.setPropertyValue("ind_formatted_name","User-FN-LN "+randomString)
context.testCase.setPropertyValue("ind_contact_media_id1","3"+randomNumber)
context.testCase.setPropertyValue("ind_contact_media_id2","4"+randomNumber)

//generate test data for party relationship
context.testCase.setPropertyValue("party_relationship_id","40"+randomNumber)

context.relation1=[["main","2"],
			    ["marketing","1"],
			    ["marketing","2"],
			    ["delivery","1"],
			    ["delivery","2"],
			    ["billing","1"],
			    ["billing","2"]]</script></con:config></con:testStep><con:testStep type="restrequest" name="create-organization" id="1dcfd0a5-f1e7-495f-92dd-cf0d1f7fe06c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create-organization" mediaType="application/json" postQueryString="false" id="dcc8b480-cffa-4bee-9115-91ae79a16972"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding/><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
	"data": {
		"type": "organizations-create",
		"relationships": {
			"new-instance": {
				"data": {
					"type": "organizations",
					"id": "${#TestCase#org_id}"
				}
			}
		}
	},
	"included": [
		{
			"type": "organizations",
			"id": "${#TestCase#org_id}",
			"attributes": {
				"privacy-settings": {
					"third-party-marketing": true,
					"own-marketing": false
				},
				"characteristics": {
					"empty": "start"
				},
				"trading-name": "${#TestCase#trading_name}",
				"formatted-name": "${#TestCase#org_formatted_name}",
				"organization-type": "private-company",
				"is-legal-entity": true,
				"language": "fin",
				"valid-for": {
					"start-datetime": "1950-01-01T00:00:00Z",
					"end-datetime": "2050-12-31T23:59:59Z"
				}
			},
			"relationships": {
				"contact-media": {
					"data": [
						{
							"type": "contact-media",
							"id": "${#TestCase#org_contact_media_id1}"
						},
						{
							"type": "contact-media",
							"id": "${#TestCase#org_contact_media_id2}"
						}
					]
				},
				"identifications": {
					"data": [
						{
							"type": "identifications",
							"id": "${#TestCase#org_identification_id}"
						}
					]
				}
			}
		},
		{
			"type": "identifications",
			"id": "${#TestCase#org_identification_id}",
			"attributes": {
				"identification-id": "${#TestCase#org_identification_att_id}",
				"identification-type": "business-identity-code",
				"valid-for": {
					"start-datetime": "1900-01-01T00:00:00Z",
					"end-datetime": "9999-12-31T23:59:59Z"
				}
			}
		},
		{
			"type": "contact-media",
			"id": "${#TestCase#org_contact_media_id1}",
			"attributes": {
				"medium": {
					"street": "Albertinkatu",
					"city": "Helsinki",
					"country": "FI",
					"postal-code": "12345"
				},
				"medium-type": "postal-address",
				"role": "primary",
				"valid-for": {
					"start-datetime": "1900-01-01T00:00:00Z",
					"end-datetime": "9999-12-31T23:59:59Z"
				}
			}
		},
		{
			"type": "contact-media",
			"id": "${#TestCase#org_contact_media_id2}",
			"attributes": {
				"medium": {
					"street": "Kamppi",
					"city": "Helsinki",
					"country": "FI",
					"postal-code": "12345"
				},
				"medium-type": "postal-address",
				"role": "billing",
				"valid-for": {
					"start-datetime": "1900-01-01T00:00:00Z",
					"end-datetime": "9999-12-31T23:59:59Z"
				}
			}
		}
	]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="62ba1d2a-b108-43a6-9545-e0b9181c815b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4163720c-7c70-4f2c-b191-628d3ded5a76" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="8a99f3f6-21b0-407b-ac69-ec8dc467aa17"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create-organization"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="create-individual" id="89e26992-2d1c-46c2-8159-e393e13a3ddd"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create-individual" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "${#TestCase#individual_id}"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "${#TestCase#individual_id}",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "${#TestCase#given_name}",
                "additional-name": "${#TestCase#additional_name}",
                "family-name": "${#TestCase#family_name}",
                "formatted-name": "${#TestCase#ind_formatted_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "${#TestCase#ind_contact_media_id1}"
                        },
                        {
                            "type": "contact-media",
                            "id": "${#TestCase#ind_contact_media_id2}"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "${#TestCase#ind_identification_id}"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "${#TestCase#ind_contact_media_id1}",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "${#TestCase#ind_contact_media_id2}",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "${#TestCase#ind_identification_id}",
            "attributes": {
                "identification-id": "SSN-${#TestCase#ind_identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="15ce97b1-5653-4fc8-abd5-518dc9b6a0be" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="3a456c36-0743-45a8-a5a6-f3664fa0dcfd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="c4ee545b-9798-4037-aba9-90bb9903ca38"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create-individual"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="get-organization-request" id="22702ebd-ce35-4002-8cee-64a96bc07c94"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get-organization-request" id="739a2624-3f9a-427a-962c-997b55df7d9c" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations</con:originalUri><con:assertion type="GroovyScriptAssertion" id="d8310eec-f775-4172-a97f-1c4e2322d70d" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:is-legal-entity)"]=='true'?log.info("assertion pass. attributes-->is-legal-entity exist"):assertionList.add("attributes-->is-legal-entity is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:trading-name)"]=='true'?log.info("assertion pass. attributes-->trading-name exist"):assertionList.add("attributes-->trading-name is missing")
holder["exists(//*:attributes[1]/*:valid-for)"]=='true'?log.info("assertion pass. attributes-->valid-for exist"):assertionList.add("attributes-->valid-for is missing")


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" id="ed9a07db-b2ab-43eb-913e-48a049d995fc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;${#TestCase#org_identification_att_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>filter</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="get-individuals-request" id="787276ed-3429-4b7f-a282-4cacab67548e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get-individuals-request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="f06e4116-507e-451c-8750-548fdb3e2b68" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0d0b39e4-b408-4ee9-8dc1-6bc646c99077" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'? log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'? log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#TestCase#ind_identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_ind_uuid" id="5ffdb0fa-f4fd-4acf-860d-a1da36d7713b"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("get-organization-request#ResponseAsXml")

def holder2 = groovyUtils.getXmlHolder("get-individuals-request#ResponseAsXml")

context.testCase.setPropertyValue("org_uuid",holder.getNodeValue("//*:id"))
context.testCase.setPropertyValue("individual_uuid",holder2.getNodeValue("//*:id"))

log.info holder.getNodeValue("//*:id")
</script></con:config></con:testStep><con:testStep type="restrequest" name="create-party-relationship" id="fcfae0b7-5ef9-4712-b333-692cbb193e45"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create-party-relationship" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#TestCase#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#TestCase#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "contact",
                "sub-role":"${#TestCase#sub_role}",
                "rank": "${#TestCase#rank}"
                              },
            "type": "party-relationships",
            "id": "${#TestCase#party_relationship_id}"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "${#TestCase#party_relationship_id}"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d3b3be97-34a2-498e-8e30-5fda417c1080" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="2ca8056b-674e-4ae3-8df9-f25fda6e6abf" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="42e3b582-8b33-40f8-91db-c0c8529325d5"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create-party-relationship"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="get-related-parties-for-org" id="439cef1f-109c-478f-b7f4-4d051febb1be"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations/{org_uuid}/related-parties" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="get-related-parties-for-org" id="948a74c0-7292-427f-8049-3c6a696c7706" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://217.78.216.195:3010</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/organizations/2d403bb1-d51c-4cac-a69d-1e381466d9a6/related-parties</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2b76af9a-6963-4cf9-9bd4-df09e30ea874" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="61b7f3c8-f608-4dce-801c-8ea9a6d8dee6" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:role)"]=='true'? log.info("assertion pass. attributes-->role exist"):assertionList.add("attributes-->role is missing")
holder["exists(//*:attributes[1]/*:sub-role)"]=='true'? log.info("assertion pass. attributes-->sub-role exist"):assertionList.add("attributes-->sub-role is missing")
holder["exists(//*:attributes[1]/*:rank)"]=='true'? log.info("assertion pass. attributes-->rank exist"):assertionList.add("attributes-->rank is missing")
holder.getNodeValue('//*:attributes[1]/*:rank')==context.expand('${#TestCase#rank}')?log.info('rank is created/saved as expected'):assertionList.add("rank is not sent as expected")
holder.getNodeValue('//*:attributes[1]/*:sub-role')==context.expand('${#TestCase#sub_role}')?log.info('sub_role is created/saved as expected'):assertionList.add("sub_role is not sent as expected")
holder.getNodeValue('//*:relationships/*:party/*:data/*:id')==context.expand('${#TestCase#individual_uuid}')?log.info('party relation is created successfully'):assertionList.add("party relation is not created as expected")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="org_uuid" value="${#TestCase#org_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>org_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="conditional_go_to_contact-persons" id="063cf221-59ab-4b54-b7bf-a9a111466f63"><con:settings/><con:config><script>int _size=context.expand('${#TestCase#size}').toInteger()

log.info("Created Party relationship with subrole: "+context.expand('${#TestCase#sub_role}')+ " and rank: " +context.expand('${#TestCase#rank}'))

if(_size>0){
	
	context.testCase.setPropertyValue("sub_role",context.relation1[_size-1][0])
     context.testCase.setPropertyValue("rank",context.relation1[_size-1][1])

	testRunner.gotoStepByName("generate-random-testdata")
	_size=_size-1
      context.testCase.setPropertyValue("size",_size.toString())
}



</script></con:config></con:testStep><con:properties><con:property><con:name>sub_role</con:name><con:value>main</con:value></con:property><con:property><con:name>rank</con:name><con:value>2</con:value></con:property><con:property><con:name>org_uuid</con:name><con:value>510986ce-d635-4ba3-994e-f07c1e15a249</con:value></con:property><con:property><con:name>individual_uuid</con:name><con:value>56f00d39-9020-43aa-94b0-d78cd17510c1</con:value></con:property><con:property><con:name>org_identification_id</con:name><con:value>3602130847</con:value></con:property><con:property><con:name>ind_identification_id</con:name><con:value>3902130847</con:value></con:property><con:property><con:name>org_id</con:name><con:value>3502130847</con:value></con:property><con:property><con:name>trading_name</con:name><con:value>trading 74Hr</con:value></con:property><con:property><con:name>org_formatted_name</con:name><con:value>fn 74Hr</con:value></con:property><con:property><con:name>org_contact_media_id1</con:name><con:value>102130847</con:value></con:property><con:property><con:name>org_contact_media_id2</con:name><con:value>202130847</con:value></con:property><con:property><con:name>org_identification_att_id</con:name><con:value>3702130847</con:value></con:property><con:property><con:name>individual_id</con:name><con:value>3802130847</con:value></con:property><con:property><con:name>given_name</con:name><con:value>GN 74Hr</con:value></con:property><con:property><con:name>family_name</con:name><con:value>FAM 74Hr</con:value></con:property><con:property><con:name>ind_contact_media_id2</con:name><con:value>402130847</con:value></con:property><con:property><con:name>party_relationship_id</con:name><con:value>4002130847</con:value></con:property><con:property><con:name>additional_name</con:name><con:value>AN 74Hr</con:value></con:property><con:property><con:name>ind_formatted_name</con:name><con:value>User-FN-LN 74Hr</con:value></con:property><con:property><con:name>ind_contact_media_id1</con:name><con:value>302130847</con:value></con:property><con:property><con:name>size</con:name><con:value>0</con:value></con:property></con:properties></con:testCase><con:testCase id="dbe32cd4-8c0b-4143-8ece-aff6d44945f1" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-54153- Things Edit" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Create things_Request" id="8716b055-037f-4361-bc40-1daeafb6d8e9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create things_Request" id="0122f544-4c95-46ea-98d5-1cc223878342" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "things-create",
    "relationships": {
      "new-instance": {
        "data": {
            "type": "things",
            "id": "temp-id-1"
          }
      }
    }
  },
  "included": [
    {
     "type": "things",
      "id": "temp-id-1",
      "attributes": {
        "formatted-name": "${#Project#formattedName_things}",
        "characteristics": {
          "operator": "DNA Modems-4-you"
        }
      },
      
      "relationships": {
        "contact-media": {
          "data": [
            { "type": "contact-media", "id": "temp-id-9" }
          ]
        }
      }
    },
    {
      "type": "identifications",
      "id": "temp_5",
      "attributes": {
        "identification-id": "${#Project#identification_id_things}",
        "identification-type": "${#Project#identificationType}",
        "valid-for": {
         "start-datetime": "2000-10-06T07:49:37Z"
        }
      }
    },
    {
      "type": "contact-media",
      "id": "temp-id-9",
      "attributes": {
        "medium": {
          "city": "Vantaa",
          "country": "FI",
          "postal-code": "01760",
          "street": "Kajaaninkatu 13",
          "address-register-id":"12341155123"
        },
        "medium-type": "postal-address",
        "role": "work",
        "valid-for": {
          "start-datetime": "2012-12-06T07:49:37Z"
        }
      }
    }
  ]
}
</con:request><con:originalUri>http://217.78.216.195/api/things</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="7b1d8842-35d3-457e-bdc5-de0053cbbe7c" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ce33c75f-9e3e-499f-b91e-2661b05b8774" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get things async uuid" id="812debfd-2591-4caf-98db-282bf0328622"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create things_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("things_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="472d69fa-cf07-40cc-801c-60336ec0623d"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create things_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="023e3ecd-e529-4b36-969f-42b7d5c2aaf9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0003"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="2ab06804-17cb-43d5-8a1f-4cbc122d44c4"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

log.info("things uuid : " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("things_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="3af69044-23ed-45a8-9ac1-cd4a2b1ab2e2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0005"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_uuid" id="86d6f560-0661-4824-ab59-918c3eaf8664"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("things uuid: " + holder.getNodeValue("//*:id"))


testRunner.testCase.testSuite.project.setPropertyValue("things_uuid", holder.getNodeValue("//*:id"))

log.info("things - formatted name: " + holder.getNodeValue("//*:attributes//*:formatted-name"))

log.info("things - characteristics - operator: " + holder.getNodeValue("//*:attributes//*:characteristics//*:operator"))
log.info("things - characteristics - location: " + holder.getNodeValue("//*:attributes//*:characteristics//*:location"))


testRunner.testCase.testSuite.project.setPropertyValue("things_formatted_name", holder.getNodeValue("//*:attributes//*:formatted-name"))
testRunner.testCase.testSuite.project.setPropertyValue("things_char_operator", holder.getNodeValue("//*:attributes//*:characteristics//*:operator"))

testRunner.testCase.testSuite.project.setPropertyValue("things_char_location", holder.getNodeValue("//*:attributes//*:characteristics//*:location"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Update things - formatted name" id="82a2b940-440a-4140-b201-d711b06f8f6c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things-update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update things - formatted name" id="de2644f7-bc2a-4e5a-b415-38b13ccd6a3e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0007" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "things-update",
    "attributes": {
      "formatted-name": "${#Project#formattedName_things}_updated"
    },
    "relationships": {
      "instance": {
        "data": { "type": "things", "id": "${#Project#things_uuid}" }
      }
    }
  }
}
</con:request><con:originalUri>http://217.78.216.195/api/things-update</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="391ca13b-17df-4f88-8245-a96193e7cf3c" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ca1f045f-8e57-473c-9369-2bb6e266a451" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get things update async uuid - formatted name" id="415dfab5-fc12-4dc3-9d06-0586dee8ccb0"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Update things - formatted name#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("things_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="cf453068-f847-42d6-8125-6954068aa024"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create things_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status 1" id="017774f8-8af6-4711-9a74-5c3b15e0c5f5"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status 1" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response 1" id="e2fb56e1-3519-4281-afce-344122f559f7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status 1#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

log.info("things uuid : " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("things_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response 1" id="94b659b8-5183-4361-89a5-2c9b034ee304"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response 1" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0012"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_update_uuid" id="f3c92072-e26a-4cab-8b97-5d9d57ef2b46"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response 1#ResponseAsXml")

log.info("things uuid: " + holder.getNodeValue("//*:id"))

log.info("things update - formatted name: " + holder.getNodeValue("//*:attributes//*:formatted-name"))

testRunner.testCase.testSuite.project.setPropertyValue("things_update_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("things_update_formatted_name", holder.getNodeValue("//*:attributes//*:formatted-name"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get things using uuid - updated formatted name validation" id="f6815be2-c9bc-46e3-be6d-c71385ca780a"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things/{things_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get things using uuid - updated formatted name validation" id="2e0ed89c-550f-4287-9009-965d3ee1ce82" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0014" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/things/96a4d266-2ea0-4f90-8859-c7776bd02889</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a567d045-d02e-448a-9f31-5ba42503691f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="05b985b0-2881-44ed-b4bf-7406cc137020" name="Contains"><con:configuration><token>${#Project#things_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c22cd48d-84b9-4f48-8da9-418516ec2e18" name="Contains 1"><con:configuration><token>${#Project#things_update_formatted_name}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="things_uuid" value="${#Project#things_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>things_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Update things - characteristics" id="c4714249-9f71-4f5e-8569-2a2a53af3f86"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things-update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Update things - characteristics" id="de2644f7-bc2a-4e5a-b415-38b13ccd6a3e" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0015" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "things-update",
    "attributes": {
      "characteristics": {
        "location": "11th floor",
        "operator": "Cool Drinks Oy"
      }
    },
    "relationships": {
      "instance": {
        "data": { "type": "things", "id": "${#Project#things_uuid}" }
      }
    }
  }
}
</con:request><con:originalUri>http://217.78.216.195/api/things-update</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="391ca13b-17df-4f88-8245-a96193e7cf3c" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ca1f045f-8e57-473c-9369-2bb6e266a451" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get things update async uuid -characteristics" id="65efea42-b568-4461-886e-dbecc644d25a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Update things - formatted name#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("things_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="9695cd24-4d21-481f-9138-5156a37bf9a4"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create things_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status 2" id="894f914e-c897-43b7-85ff-93ffe8c939fa"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status 2" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0018"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response 2" id="36e45a00-1efe-43ae-8457-d60fd59a253a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status 2#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

log.info("things uuid : " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("things_uuid", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:data[1]/*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response 2" id="37d2de21-193a-47e3-b1de-0cb9fc90a770"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response 2" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0020"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_things_update_uuid_characteristics" id="cb34cdcd-14a3-4e10-bad8-0067ce3f4634"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response 2#ResponseAsXml")

log.info("things uuid: " + holder.getNodeValue("//*:id"))

log.info("things update - characteristics - operator: " + holder.getNodeValue("//*:attributes//*:characteristics//*:operator"))
log.info("things update - characteristics - location: " + holder.getNodeValue("//*:attributes//*:characteristics//*:location"))

testRunner.testCase.testSuite.project.setPropertyValue("things_update_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("things_update_char_operator", holder.getNodeValue("//*:attributes//*:characteristics//*:operator"))

testRunner.testCase.testSuite.project.setPropertyValue("things_update_char_location", holder.getNodeValue("//*:attributes//*:characteristics//*:location"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get things using uuid - updated characteristics validation" id="8e856803-c8c1-4d70-8de9-899057adf596"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/things/{things_uuid}" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get things using uuid - updated characteristics validation" id="2e0ed89c-550f-4287-9009-965d3ee1ce82" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="244c6277-1af1-48e5-93a1-3b3fd09dc7c5-0022" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/things/96a4d266-2ea0-4f90-8859-c7776bd02889</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="a567d045-d02e-448a-9f31-5ba42503691f" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="05b985b0-2881-44ed-b4bf-7406cc137020" name="Contains"><con:configuration><token>${#Project#things_uuid}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="c22cd48d-84b9-4f48-8da9-418516ec2e18" name="Contains 1"><con:configuration><token>${#Project#things_update_char_operator}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Simple Contains" id="636169b2-6bc8-40df-9180-aa71f0c6f3e3" name="Contains 2"><con:configuration><token>${#Project#things_update_char_location}</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="things_uuid" value="${#Project#things_uuid}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>things_uuid</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:setupScript/><con:properties/></con:testCase><con:testCase id="43e0ae2b-3f8e-497e-9296-e02d4e4fcf92" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-2275- Edit and Remove Nickname" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GetAvailableSimCards" id="81eb6adc-d49a-4a18-9d59-d98204e005a4" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableSimCards" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="ac33961d-2fce-4e17-9cb2-428e85c3f42a" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableSimCards#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAvailableMSISDN" id="16e0cd2e-02f0-43ed-835f-cfc82d46bf5c" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableMSISDN" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0002" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="41bbe7e1-a7fb-4670-ad2b-0697a5be71f0" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableMSISDN#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create optimi order" id="338536cb-59df-49ba-a465-2255b5f2ddef"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="c9ffb56e-57c3-4968-bcfc-28a7157376a8-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
},
{
"type":"order-items",
"id":"Orderitem_29242"
},
{
"type":"order-items",
"id":"Orderitem_29243"
},
{
"type":"order-items",
"id":"Orderitem_29244"
},
{
"type":"order-items",
"id":"Orderitem_29245"
},
{
"type":"order-items",
"id":"Orderitem_29246"
}
]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29242",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29242"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29243",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29243"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29244",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29244"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29245",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29245"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29246",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29246"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_MobileCertificate_Permission": "false",
"CH_ContractLength": "12"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_SIM_Mix_4G_MobileID"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DirectoryServices"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29242",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_ROAMING_LIMIT-dataRoamingLimit": "22"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Data_Roaming_Limit"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29243",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DATA_CALL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29244",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-callingLineIdentificationRestriction": "PUBLIC"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_CLIR"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29245",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-explicitCallTransfer": "NO"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_ECT"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29246",
"attributes": {
"inputted-characteristics": {
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_BasicData"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 40.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 50.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="65593f70-de71-40ef-b276-1bc504ecd834"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="dabc8766-cce8-4edb-8250-cf5dcd472492"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="c9ffb56e-57c3-4968-bcfc-28a7157376a8-0006"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="e91e9f79-4682-4395-9640-6985f94a2e8f"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="7e1dc064-3a9f-4bb3-94b8-118ea9d21777"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="c9ffb56e-57c3-4968-bcfc-28a7157376a8-0008"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_link" id="aae62186-a203-4080-aad8-dd1edae85ac8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account Link Response" id="0587cb52-569e-430f-94d4-a7b8fb1dcf19"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="c9ffb56e-57c3-4968-bcfc-28a7157376a8-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_link" id="be8c1aab-6291-4b51-8db9-b94c6de5fb6e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account Link Response" id="080d3c49-4533-4511-9b8a-37113f0df211"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="c9ffb56e-57c3-4968-bcfc-28a7157376a8-0012"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_related_products_link" id="62996264-3ad0-471f-b402-a204e4da64e9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Products Link Response" id="dc4fe0ac-c604-46c8-b0b1-91821ceec313"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Products Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="c9ffb56e-57c3-4968-bcfc-28a7157376a8-0014"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_main_product_uuid" id="81f8bf23-6c7b-42ae-a633-72e994e21dad"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Products Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("main_product_uuid", holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="update nickname for optimi" id="9fe04da0-aa86-4f13-a351-5ac6b5b5b720"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products-update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="update nickname for optimi" id="19d4fa44-38f5-4156-838c-479bb9216bea" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="d4721bb5-8af9-4a40-885c-5e35ce1ee706-0006" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "products-update",
    "attributes": {
    "lifecycle-status": "active",
      "characteristics": {
      "CH_Nickname":"Test123"
      }
    },
    "relationships": {
      "instance": {
        "data": { "type": "products", "id": "${#Project#main_product_uuid}" }
      }
    }
  }
}</con:request><con:originalUri>http://52.51.43.237/api/products-update</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="d1d9a495-8294-4075-9781-1f4a74ad1474" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="5f2f7a9b-e9e6-47ee-a3ae-f5ce0b4a7681"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "update nickname for optimi"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="764ed0d9-7c47-4234-a9b0-f88e890f527a" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-830-CLIR_Actication" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="Create Organizations-Request" id="363c1956-5804-49a4-8484-8363118001ee"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/organizations-create" methodName="Organizations-create" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Organizations-Request" mediaType="application/json" postQueryString="false" id="a79d6101-168b-4c2e-8e0d-21727c08ef93"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0000" xmlns="http://eviware.com/soapui/config"/></con:setting><con:setting id="com.eviware.soapui.impl.support.AbstractHttpRequest@follow-redirects">true</con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "organizations-create",
"relationships": {
"new-instance": {
"data": {
"type": "organizations",
"id": "6632128"
}
}
}
},
"included": [
{
"type": "organizations",
"id": "6632128",
"attributes": {
"privacy-settings": {
"third-party-marketing": true,
"own-marketing": false
},
"characteristics": {
"empty": "start"
},
"trading-name": "Thomas Construction",
"formatted-name": "${#Project#formattedName}",
"organization-type": "private-company",
"is-legal-entity": true,
"language": "fin",
"valid-for": {
"start-datetime": "1950-01-01T00:00:00Z",
"end-datetime": "2050-12-31T23:59:59Z"
}
},
"relationships": {
"contact-media": {
"data": [
{"type": "contact-media","id": "2234"},{"type": "contact-media","id": "7331"}]},
"identifications": {
"data": [
{"type": "identifications","id": "270485"}
]
}
}
},
{
"type": "identifications",
"id": "270485",
"attributes": {
"identification-id": "${#Project#identification_id}",
"identification-type": "${#Project#identificationType}",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "2234",
"attributes": {
"medium": {
"street": "Albertinkatu",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "primary",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
},
{
"type": "contact-media",
"id": "7331",
"attributes": {
"medium": {
"street": "Kamppi",
"city": "Helsinki",
"country": "FI",
"postal-code": "12345"
},
"medium-type": "postal-address",
"role": "billing",
"valid-for": {
"start-datetime": "1900-01-01T00:00:00Z",
"end-datetime": "9999-12-31T23:59:59Z"
}
}
}
]
}</con:request><con:originalUri>http://217.78.216.195/api/organizations-create</con:originalUri><con:assertion type="Simple Contains" name="Contains" id="1d87903e-8877-4f55-a839-a9a399c49040"><con:configuration><token>accepted</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="Valid HTTP Status Codes" name="Valid HTTP Status Codes" id="6f3b167e-b2b4-473a-bc38-75c72dc5c776"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="e6b99c53-3cfc-4be5-84cf-b0d25c4a89da" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_org_async_uuid" id="dc7b370c-f76d-44f2-b026-25db7c4d4bad"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create Organizations-Request#ResponseAsXml")

log.info("Organization Async UUID:: " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("org_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="bf9b7fa1-5970-4c54-9c64-375ef6442da7"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Organizations-Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create_Customer_Account" id="45cf8100-ab57-41ed-97d3-83315d4ce850"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/customer-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create_Customer_Account" id="878049ef-3622-4803-a6c4-74cab32f5488" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0003" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "customer-accounts-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "customer-accounts",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "customer-accounts",
            "id": "temp-id-1",
            "attributes": {
                "name": "${#Project#customer_account_name}",
                "account-type": "CONS",
                "characteristics": {
                    "size": "more than 100 employees",
                    "yearly-earnings": "5M"
                },
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2018-08-03T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "related-parties": {
                    "data": [
                        {
                            "type": "party-relationships",
                            "id": "temp-id-2"
                        }
                    ]
                }
            }
        },
        {
            "type": "party-relationships",
            "id": "temp-id-2",
            "attributes": {
                "valid-for": {
                    "start-datetime": "2016-08-03T13:38:36.518+00:00",
                    "end-datetime": "2017-11-06T13:38:36.518+00:00"
                }
            },
            "relationships": {
                "party": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            }  
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/customer-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="182a883e-3bc3-4f2a-aba6-1d959e882a2b" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="68914dae-5309-4e4b-b623-beee9c4a33fc" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null
String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion1" id="539d9111-ff43-4489-a41f-f383bb4bd0f8"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create_Customer_Account"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create Billing Account_Request" id="e25c46d9-72f3-4f76-87bb-45807a85cb14"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0005" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "lifecycle-status": "active",
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
       "characteristics": {
       "account-description": "product usage in prepaid manned"
                            }
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
    "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
    },
        "billing-profile":{
          "data": { "type": "billing-profiles", "id": "temp-id-2" }
        }
      }
    },
    {
      "type": "billing-profiles",
      "id": "temp-id-2",
      "attributes": {
        "payment-method": "bank-transfer",
        "billing-format": "B2B_S",
        "payment-term": 14,
        "billing-cycle": 1,
    "overtime-interest-rate": 0,
    "invoice-group": "INV1",
    "billing-permissions": {
        "billing-allowed": "True",
        "service-number-itemization-allowed": "False",
        "overtime-interest-allowed": "False"
    },
    "characteristics": {
                             "edi-code": "0037987650004",
                             "einvoice-operator-id": "0037333222113",
                             "einvoice-reference": "0037000111224",
                             "billing-interval-start-date": "2016-12-19T16:00:37+02:00",
                             "billing-contract-description": "subscription activation"},
        "billing-interval": {
          "interval": "month",
          "count": 1
        },
        "billing-language": "fin",
        "bill-delivery-method": "f-invoice"
      },
      "relationships": {
        "bill-delivery-medium":{
          "data": { "type": "contact-media", "id": "${#Project#org_contact_media_billing}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion3" id="08a26842-95d9-4d1b-b7a0-941880b0f70b"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create Individual_Request" id="731419db-d69c-4705-b288-ff9c72348c30"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0007" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="Create Party Releationships_Request" id="0880cb41-7558-44ea-8703-c5eb3b7ed32e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/party-relationships-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Party Releationships_Request" id="91123240-cfa0-4464-a44b-7f7f74cc20b6" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0008" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "included": [
        {
            "relationships": {
                "party": {
                    "data": {
                        "type": "individuals",
                        "id": "${#Project#individual_uuid}"
                    }
                },
                "target": {
                    "data": {
                        "type": "organizations",
                        "id": "${#Project#org_uuid}"
                    }
                }
            },
            "attributes": {
                "valid-for": {
                    "start-datetime": "2015-01-01T00:00:00Z",
                    "end-datetime": "2017-12-31T23:59:59Z"
                },
                "role": "contact",
                "sub-role":"main",
                "rank": "1"
                              },
            "type": "party-relationships",
            "id": "68947"
        }
    ],
    "data": {
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "party-relationships",
                    "id": "68947"
                }
            }
        },
        "type": "party-relationships-create"
    }
}</con:request><con:originalUri>http://217.78.216.195/api/party-relationships-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="9816a163-b6cf-4f3f-85e6-7345e8ffc7bc" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4793c1f1-3d8b-4816-8327-447cc7804960" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion4" id="5861ca7c-7071-4dec-bdb8-6fb356f9f14e"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Party Releationships_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Available SIM Cards" id="75bbe89e-8f63-4189-9d50-aa24d0233a46"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Available SIM Cards" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0010" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="bb94780b-4804-4b74-aeca-a4c3c4e3e1ab"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Available MSISDNs" id="da62405a-07e2-4590-88fd-8690c3827636"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Available MSISDNs" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0012" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="ac3eeab4-feef-4625-8e5f-38be50dfc15e"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Method 1 - Request 1#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Create Optimi order" id="e0532190-c492-414e-936f-4ac01f79eaee"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 3" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="adac68d9-852a-4e6f-8053-1980f73dc230-0014"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
}]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DNACertSimMix"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PS_DirectoryServices"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 30.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 40.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="bf58179a-57a2-415c-9dd0-218ff83ccf84" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-2061- Change User" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GetAvailableSimCards" id="d27523ea-8141-424b-9d17-36f18480422c" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableSimCards" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="c0bf4841-a008-4bd9-add2-132acc806a8e" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableSimCards#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAvailableMSISDN" id="19211403-8cd5-4286-a476-3a8c668e4aee" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableMSISDN" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0002" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="529dd7b9-571f-4544-9a34-d2addcc06b34" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableMSISDN#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create optimi order" id="0321220e-77fd-413b-96c3-d63f700c7a50"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
},
{
"type":"order-items",
"id":"Orderitem_29242"
},
{
"type":"order-items",
"id":"Orderitem_29243"
},
{
"type":"order-items",
"id":"Orderitem_29244"
},
{
"type":"order-items",
"id":"Orderitem_29245"
},
{
"type":"order-items",
"id":"Orderitem_29246"
}
]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29242",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29242"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29243",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29243"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29244",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29244"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29245",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29245"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29246",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29246"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_MobileCertificate_Permission": "false",
"CH_ContractLength": "12"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_SIM_Mix_4G_MobileID"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DirectoryServices"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29242",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_ROAMING_LIMIT-dataRoamingLimit": "22"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Data_Roaming_Limit"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29243",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DATA_CALL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29244",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-callingLineIdentificationRestriction": "PUBLIC"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_CLIR"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29245",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-explicitCallTransfer": "NO"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_ECT"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29246",
"attributes": {
"inputted-characteristics": {
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_BasicData"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 40.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 50.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="6a15c679-fbfa-4156-adce-38c3b05c3f02"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="2cecfbc1-4d94-4cda-8ee9-54c18f8a34ca"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0006"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="5c487321-1c01-4521-b914-61cfccdf2988"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="808f38a5-ebbd-4522-8b26-f85ffd0a69d9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0008"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_link" id="b379f68b-5a45-4b09-9a5f-fcbe2509ec85"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account Link Response" id="5ebd0d43-537f-47a0-9188-54f5a8764c9e"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_link" id="716bd811-6d85-4019-9d30-67e27506cb44"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account Link Response" id="90112148-ba37-4b49-bc82-c49c2d7bb644"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0012"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_related_products_link" id="1df9c953-884f-4420-95b5-4a01365b89ad"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Products Link Response" id="d53ebd3e-a9a9-4add-b77d-e758dd13cf19"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Products Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0014"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_main_product_uuid" id="43fa739a-fcec-4c93-aa65-cf536e8e51e8"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Products Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("main_product_uuid", holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create Individual_Request" id="44f7e1db-766f-457c-9975-38c57f0b6270"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create Individual_Request" id="77f1d775-b587-432e-9a05-0c9ad9771759" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0016" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
    "data": {
        "type": "individuals-create",
        "relationships": {
            "new-instance": {
                "data": {
                    "type": "individuals",
                    "id": "temp-id-1"
                }
            }
        }
    },
    "included": [
        {
            "type": "individuals",
            "id": "temp-id-1",
            "attributes": {
                "characteristics": {
                    "CIA": "Employed"
                },
                "privacy-settings": {
                    "public-profile": false
                },
                "country-of-birth": "US",
                "date-of-birth": "1973-11-06T07:49:37Z",
                "given-name": "Shyamson",
                "additional-name": "Prashanth",
                "family-name": "Perumalla",
                "formatted-name": "User-FN-LN-${#Project#individual_name}",
                "gender": "male",
                "honorific-prefix": "Mr.",
                "honorific-suffix": "Ph.D",
                "language": "eng",
                "marital-status": "single",
                "nationality": "US",
                "place-of-birth": "Dallas"
            },
            "relationships": {
                "contact-media": {
                    "data": [
                        {
                            "type": "contact-media",
                            "id": "temp_9"
                        },
                        {
                            "type": "contact-media",
                            "id": "temp_10"
                        },
                         {
                            "type": "contact-media",
                            "id": "temp_6"
                        },

                        {
                            "type": "contact-media",
                            "id": "temp_7"
                        }
                    ]
                },
                "identifications": {
                    "data": [
                        {
                            "type": "identifications",
                            "id": "temp_5"
                        }
                    ]
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_6",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "00100",
                    "street": "Kaivokato 3",
                    "address-register-id": "553301"
                },
                "medium-type": "postal-address",
                "role": "primary",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        {
            "type": "contact-media",
            "id": "temp_7",
            "attributes": {
                "medium": {
                    "city": "Helsinki",
                    "country": "FI",
                    "postal-code": "12345",
                    "street": "Kalasatama,5th Avenue,25A",
                    "address-register-id": "553302"
                },
                "medium-type": "postal-address",
                "role": "billing",
                "valid-for": {
                    "start-datetime": "1994-12-06T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },
        
        {
            "type": "contact-media",
            "id": "temp_9",
            "attributes": {
                "medium-type": "telephone-number",
                "role": "work",
                "medium": {
                    "msisdn": "0441234567"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        }, 
 {
            "type": "contact-media",
            "id": "temp_10",
            "attributes": {
                "medium-type": "email-address",
                "role": "primary",
                "medium": {
                    "email": "contactus4marketingqueries@miscrosoft.online.com"
                },
                "valid-for": {
                    "start-datetime": "2010-04-03T13:38:36.518+00:00",
                    "end-datetime": "2020-04-03T13:38:36.518+00:00"
                }
            }
        },

        {
            "type": "identifications",
            "id": "temp_5",
            "attributes": {
                "identification-id": "SSN-${#Project#identification_id}",
                "identification-type": "personal-identity-code",
                "valid-for": {
                    "start-datetime": "2020-04-26T13:38:36.518+00:00",
                    "end-datetime": "2021-04-25T13:38:36.518+00:00"
                }
            }
        }
    ]
}</con:request><con:originalUri>http://217.78.216.195/api/individuals-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="6ce1a1e3-a03e-41ce-a9e1-a00bdfa747fa" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="0e48fe93-2161-4946-84db-6d9da909bacd" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="5304b386-be61-45f9-82dc-e97d5efe7e89"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create Individual_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Individual_Request" id="64768612-1d7e-4971-9991-4d1b24021f58"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/individuals" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Individual_Request" id="0151680c-225d-4d58-b6ff-d9babb516412" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0018" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/individuals</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="64bd98ad-a792-445c-8f3f-dde3e5f0f793" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="Simple Contains" id="ef965786-94fc-4291-ba65-cb8d9e800c7a" name="Contains"><con:configuration><token>given-name</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ac14dc23-5336-413b-987d-64af338bed0e" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("characteristics value is [" + holder.getNodeValue('//*:attributes[1]/*:characteristics') + "]")
log.info("formatted-name value is [" + holder.getNodeValue('//*:attributes[1]/*:formatted-name') + "]")
log.info("family-name value is [" + holder.getNodeValue('//*:attributes[1]/*:family-name') + "]")
log.info("privacy-settings value is [" + holder.getNodeValue('//*:attributes[1]/*:privacy-settings') + "]")
log.info("given-name value is [" + holder.getNodeValue('//*:attributes[1]/*:given-name') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:characteristics)"]=='true'? log.info("assertion pass. attributes-->characteristics exist"):assertionList.add("attributes-->characteristics is missing")
holder["exists(//*:attributes[1]/*:formatted-name)"]=='true'? log.info("assertion pass. attributes-->formatted-name exist"):assertionList.add("attributes-->formatted-name is missing")
holder["exists(//*:attributes[1]/*:family-name)"]=='true'?log.info("assertion pass. attributes-->family-name exist"):assertionList.add("attributes-->family-name is missing")
holder["exists(//*:attributes[1]/*:privacy-settings)"]=='true'?log.info("assertion pass. attributes-->privacy-settings exist"):assertionList.add("attributes-->privacy-settings is missing")
holder["exists(//*:attributes[1]/*:given-name)"]=='true'?log.info("assertion pass. attributes-->given-name exist"):assertionList.add("attributes-->given-name is missing")

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="filter" value="(EQ identifications.identification-id &quot;SSN-${#Project#identification_id}&quot;)" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_individual_uuid" id="10004c00-6275-4fb9-937a-3b28913f76b2"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Individual_Request#ResponseAsXml")

log.info("Individual UUID:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("individual_uuid", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="Change user" id="758c4a01-a701-42d3-877a-71b92a37b45c"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Change user" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="bedd3f31-9370-497d-935d-18f94219d251-0020"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "orders-create",
    "relationships": {
      "new-instance": {
        "data": {
          "id": "temp-orders-id-1",
          "type": "orders"
        }
      }
    }
  },
  "included": [
    {
      "id": "temp-orders-id-1",
      "type": "orders",
      "attributes": {
        "reference-number": "Change_user-230220171749",
        "order-date": "2016-10-31T15:06:41Z",
        "sales-info": {
          "channel": "Dummy-Channel-Value",
          "sales-type": "acquisition"
        }
      },
      "relationships": {
        "order-items": {
          "data": [
            {
              "id": "temp-order-items-id-1",
              "type": "order-items"
            }
          ]
        },
        "customer-account": {
          "data": {
            "id": "${#Project#customer_account_uuid}",
            "type": "customer-accounts"
          }
        }
      }
    }, {
      "id": "temp-order-items-id-1",
      "type": "order-items",
      "attributes": {
        "action": "create",
        "quantity": 1
      },
      "relationships": {
        "order-product": {
          "data": {
            "id": "temp-order-products-id-1",
            "type": "order-products"
          }
        }
      }
    }, {
      "id": "temp-order-products-id-1",
      "type": "order-products",
      "attributes": {
        "inputted-characteristics": {
		"CH_New_User": "${#Project#individual_uuid}",
		"CH_Inventory_Id": "${#Project#main_product_uuid}"

     }
      },
      "relationships": {
        "product-offering": {
          "data": {
            "id": "PO_change_user",
            "type": "product-offerings"
          }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="0ec006e2-8001-49bb-8364-58709cb749e5"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Change user"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="55c77541-7a59-4323-a5ee-ef9abaf49786" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-42810- Mobile Certification" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="GetAvailableSimCards" id="6a27c68a-44a9-476b-94fa-3eeee7401ccd" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableSimCards" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="56961426-5dee-47e8-8b5c-c7773abb2274" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableSimCards#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAvailableMSISDN" id="59af4ff5-984a-4047-a72d-cdd6a9a3bc29" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableMSISDN" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0002" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="1910ac54-bd46-4901-8c88-1931c34aea7b" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableMSISDN#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create optimi order" id="3909407a-c6d9-4897-ac63-b15e9db236dc"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
},
{
"type":"order-items",
"id":"Orderitem_29242"
},
{
"type":"order-items",
"id":"Orderitem_29243"
},
{
"type":"order-items",
"id":"Orderitem_29244"
},
{
"type":"order-items",
"id":"Orderitem_29245"
},
{
"type":"order-items",
"id":"Orderitem_29246"
}
]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29242",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29242"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29243",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29243"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29244",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29244"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29245",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29245"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29246",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29246"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_MobileCertificate_Permission": "false",
"CH_ContractLength": "12"
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_MSISDN": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_SIM_Mix_4G_MobileID"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DirectoryServices"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29242",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_ROAMING_LIMIT-dataRoamingLimit": "22"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Data_Roaming_Limit"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29243",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DATA_CALL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29244",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-callingLineIdentificationRestriction": "PUBLIC"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_CLIR"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29245",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-explicitCallTransfer": "NO"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_ECT"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29246",
"attributes": {
"inputted-characteristics": {
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_BasicData"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 40.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 50.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="7926cb5f-2d23-4b72-9648-bce336331d55"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="62f48f19-20d7-445b-8c17-fda7ef643924"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0006"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="faa593c2-0b24-4a6f-b46a-cc2f8dee6856"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="f4f5f6d8-e9e3-44d9-a3cd-a77951785318"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0008"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_link" id="a3772089-d783-4748-8f22-845e636a4e88"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account Link Response" id="0e05d1eb-9f86-4cec-b511-c9b3fb6b8f4f"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_link" id="22df001e-c04b-468f-9bc5-5cd3fe7ce0b7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account Link Response" id="d8ca3e07-ed80-4d34-8e88-175e074309f0"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0012"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_related_products_link" id="6b0fb109-9c70-499f-851f-25d3a08e8c1a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Products Link Response" id="408440d4-9659-4b15-b034-1c4c509372ef"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Products Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0014"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_main_product_uuid" id="3196032d-0958-47e2-a499-2f0f113a5bae"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Products Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("main_product_uuid", holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Mobile certificate activations" id="0f391dee-b4c4-49cf-b085-d8e21e0f1a44"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/products-update" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Mobile certificate activations" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="16de04d9-64e3-430b-a44f-90a19d9757aa-0016"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "products-update",
    "attributes": {
      "lifecycle-status": "active",
      "characteristics": {
      	   "CH_MobileCertificate_Permission": "true"
      }
    },
    "relationships": {
      "instance": {
        "data": { "type": "products", "id": "${#Project#main_product_uuid}" }
      }
    }
  }
}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="63468261-45dc-47cf-a903-ebefc02aa72b"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Mobile certificate activations"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="1b087d17-8d9c-4620-87dd-6668fed0aa79" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="RUBT-2073- Change Payer" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="GetAvailableSimCards" id="4cf14243-a5c2-4564-bfe2-d081681a19a4" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/sim-cards" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableSimCards" id="78e23b63-79bf-4188-8f81-e096ea89455e" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0000" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/sim-cards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="adc81e78-3a13-4fcf-89cd-e1c49c0f934e" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getsimcard" id="92004ddd-86a1-40a8-b98f-c575e83b1306" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableSimCards#ResponseAsXml")

log.info("available simcard:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("simcard_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="GetAvailableMSISDN" id="dccfb967-c170-44ef-a0f7-250764a96673" disabled="true"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/msisdns" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="GetAvailableMSISDN" id="8e737353-7eeb-4acc-9b28-b52570c60c0d" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="1d4cec2d-518f-460f-9ea5-85e88ad08246-0002" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/api/msisdns</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="2a8d4839-5168-4161-b9f7-3d95b052e6bc" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="getmsisdn" id="73af08b0-0100-489f-a58d-f00d4e29c760" disabled="true"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("GetAvailableMSISDN#ResponseAsXml")

log.info("available msisdn:: "+holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("msisdn_available_optimi", holder.getNodeValue("//*:id"))</script></con:config></con:testStep><con:testStep type="restrequest" name="create optimi order" id="8b414eaa-b1c4-4e19-b5ff-722a88d76011"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="create optimi order" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0004"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
"data": {
"type": "orders-create",
"relationships": {
"new-instance": {
"data": {
"type": "orders",
"id": "Orders_29055"
}
}
}
},
"included": [
{
"type": "orders",
"id": "Orders_29055",
"attributes": {
"reference-number": "${#Project#reference_number}_optimi",
"order-date": "2016-07-15T11:55:18",
"sales-info": {
"channel": "webshop",
"sales-type": "acquisition"
}
},
"relationships": {
"order-items": {
"data": [
{
"type": "order-items",
"id": "OrderItem_29055"
}
]
},
"customer-account": {
"data": {
"type": "customer-accounts",
"id": "${#Project#customer_account_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "OrderItem_29055",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29055"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
},
"child-order-items":{
"data":[
{
"type":"order-items",
"id":"Orderitem_29240"
},
{
"type":"order-items",
"id":"Orderitem_29241"
},
{
"type":"order-items",
"id":"Orderitem_29242"
},
{
"type":"order-items",
"id":"Orderitem_29243"
},
{
"type":"order-items",
"id":"Orderitem_29244"
},
{
"type":"order-items",
"id":"Orderitem_29245"
},
{
"type":"order-items",
"id":"Orderitem_29246"
}
]
}
}
},
{
"type": "order-items",
"id": "Orderitem_29240",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29240"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29241",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29241"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29242",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29242"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29243",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29243"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29244",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29244"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29245",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29245"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-items",
"id": "Orderitem_29246",
"attributes": {
"lifecycle-status": "acknowledged",
"quantity":1
},
"relationships": {
"order-product": {
"data": {
"type": "order-products",
"id": "OrderProduct_29246"
}
},
"billing-account": {
"data": {
"type": "billing-accounts",
"id": "${#Project#billing_account_uuid}"
}
},
"user": {
"data": {
"type": "individuals",
"id": "${#Project#individual_uuid}"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29055",
"attributes": {
"inputted-characteristics": {
"CH_CostCenter": "ffasas",
"CH_Nickname": "Test",
"CH_NumberResource": "${#Project#msisdn_available_optimi}",
"CH_ICC": "${#Project#simcard_available_optimi}",
"CH_Language": "SWE",
"CH_MobileCertificate_Permission": "false",
"CH_BillingPermission": {"billing-allowed": "False"}
}
},
"relationships": {
"custom-prices": {
"data": [
{
"type": "order-prices",
"id": "OrderPrice_29055"
},
{
"type": "order-prices",
"id": "OrderPrice_29228"
}]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Optimi"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29240",
"attributes": {
"inputted-characteristics": {
"CH_ICC": "${#Project#simcard_available_optimi}"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_SIM_Mix_4G_MobileID"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29241",
"attributes": {
"inputted-characteristics": {
"CH_owner_privacy": "address",
"CH_user_privacy": "name"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DirectoryServices"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29242",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_ROAMING_LIMIT-dataRoamingLimit": "22"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_Data_Roaming_Limit"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29243",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_DATA_CALL-speed": "9600 bit/s"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_DATA_CALL"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29244",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-callingLineIdentificationRestriction": "PUBLIC"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_CLIR"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29245",
"attributes": {
"inputted-characteristics": {
"CH_CFSS_MOBILE_VOICE-explicitCallTransfer": "NO"
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_ECT"
}
}
}
},
{
"type": "order-products",
"id": "OrderProduct_29246",
"attributes": {
"inputted-characteristics": {
}
},
"relationships": {
"custom-prices": {
"data": [
]
},
"product-offering": {
"data": {
"type": "product-offerings",
"id": "PO_BasicData"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29055",
"attributes": {
"price": {
"tax-free-amount": 40.36,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPTA_OT"
}
}
}
},
{
"type": "order-prices",
"id": "OrderPrice_29228",
"attributes": {
"price": {
"tax-free-amount": 50.9,
"currency": "EUR"
}
},
"relationships": {
"price-specification": {
"data": {
"type": "price-specifications",
"id": "P_PO_OPT_R"
}
}
}
}
]}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion" id="5d8d26cc-911a-4c6e-b212-32c34570efd6"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "create optimi order"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function life-cycle status" id="ade43cbf-50b9-45da-be3a-57a019f835cd"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0006"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_async_resource_link_response" id="ad3ecdb5-f40b-4ce7-8092-4f95c09e0c09"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get async function resource response" id="2166752f-9d25-4153-b3ec-a78b0be29eb3"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0008"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_customer_account_link" id="0d7771ee-9baa-4c80-95a9-b33c35910e1a"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get async function resource response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Customer Account Link Response" id="974d833f-a766-4221-b762-7430ef01bb77"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Customer Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0010"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account_link" id="e04375f2-8329-47f6-8664-94f34b808ae9"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Customer Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:billing-accounts[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Billing Account Link Response" id="268506b0-694b-46b0-871a-66b3fbcda5e2"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Billing Account Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0012"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_related_products_link" id="fd1cd7b1-d978-4f06-854e-4112230dfcb7"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Billing Account Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:related-products[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get Related Products Link Response" id="fc8ac180-927b-48f7-a6cf-f4706ec820c9"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get Related Products Link Response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0014"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_main_product_uuid" id="4a604df3-23a6-486d-b2a6-30a6ec84a2b6"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get Related Products Link Response#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("main_product_uuid", holder.getNodeValue("//*:relationships[1]/*:product[1]/*:data[1]/*:id"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Create  new Billing Account_Request" id="b9787996-d40a-4c4f-99df-3043307113b8"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/billing-accounts-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Create  new Billing Account_Request" id="f1b3869d-b39c-400f-895d-e8de4c3f3ed8" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0016" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
  "data": {
    "type": "billing-accounts-create",
    "relationships": {
      "new-instance": {
        "data": {
          "type": "billing-accounts",
          "id": "temp-id-1"
        }
      }
    }
  },
  "included": [
    {
      "type": "billing-accounts",
      "id": "temp-id-1",
      "attributes": {
        "currency": "EUR",
        "tax-region": "domestic",
        "valid-for": {
          "start-datetime": "2011-08-03T08:33:37+02:00"
        },
       "characteristics": {
       "account-description": "product usage in prepaid manned"
                            }
      },
      "relationships": {
        "customer-account": {
          "data": { "type": "customer-accounts", "id": "${#Project#customer_account_uuid}" }
        },
    "associated-customer-account": {
          "data": {
          "type": "customer-accounts","id": "${#Project#customer_account_uuid}" }
    },
        "billing-profile":{
          "data": { "type": "billing-profiles", "id": "temp-id-2" }
        }
      }
    },
    {
      "type": "billing-profiles",
      "id": "temp-id-2",
      "attributes": {
        "payment-method": "bank-transfer",
        "billing-format": "B2B_S",
        "payment-term": 14,
        "billing-cycle": 1,
    "overtime-interest-rate": 0,
    "invoice-group": "INV1",
    "billing-permissions": {
        "billing-allowed": "True",
        "service-number-itemization-allowed": "False",
        "overtime-interest-allowed": "False"
    },
    "characteristics": {
                             "edi-code": "0037987650004",
                             "einvoice-operator-id": "0037333222113",
                             "einvoice-reference": "0037000111224",
                             "billing-interval-start-date": "2016-12-19T16:00:37+02:00",
                             "billing-contract-description": "subscription activation"},
        "billing-interval": {
          "interval": "month",
          "count": 1
        },
        "billing-language": "fin",
        "bill-delivery-method": "f-invoice"
      },
      "relationships": {
        "bill-delivery-medium":{
          "data": { "type": "contact-media", "id": "${#Project#org_contact_media_billing}" }
        }
      }
    }
  ]
}</con:request><con:originalUri>http://217.78.216.195/api/billing-accounts-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="400f39dc-393e-4fe5-8413-e757a92c5ab5" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="1a9cdefa-e64e-4eea-809a-8825e5bea6c3" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

log.info("lifecycle-status value is [" + holder.getNodeValue('//*:attributes[1]/*:lifecycle-status') + "]")
log.info("function value is [" + holder.getNodeValue('//*:attributes[1]/*:function') + "]")
log.info("requested-at value is [" + holder.getNodeValue('//*:attributes[1]/*:requested-at') + "]")

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true

assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get billing account async uuid" id="0a670928-8553-4738-b74a-cd50900f0ffe"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Create  new Billing Account_Request#ResponseAsXml")

log.info("METADATA::" + testRunner.testCase.name + "::quality.information::Async UUID = " + holder.getNodeValue("//*:id"))

testRunner.testCase.testSuite.project.setPropertyValue("billing_acct2_async_uuid", holder.getNodeValue("//*:id"))
</script></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 2" id="52aab7b4-d590-463e-a5a9-68c6b9920a9d"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Create  new Billing Account_Request"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get BA2 async function life-cycle status" id="6d3b8d5f-e03d-40b1-a7ce-e181914f85c6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get BA2 async function life-cycle status" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0019"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_BA2_async_resource_link_response" id="3afee891-9add-4fa8-8012-c8fdd75e1195"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get BA2 async function life-cycle status#ResponseAsXml")

log.info("Async resource link:: " + holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))

testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:resource[1]/*:links[1]/*:related"))
</script></con:config></con:testStep><con:testStep type="restrequest" name="Get BA2 async function resource response" id="5fd123e4-72b8-4d6c-97a5-f25f10974fe6"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/${#Project#async_function_status_link}" methodName="Tracking async process status by related link" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Get BA2 async function resource response" id="741db27e-afb1-4b91-8ff0-13c379e4d17f" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0021"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request/><con:originalUri>http://217.78.216.195/</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/><con:parameterOrder/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="get_billing_account2_details" id="e0c48718-021d-4708-a4c3-81eabb1a3fba"><con:settings/><con:config><script>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern
import com.eviware.soapui.model.iface.MessageExchange
import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def holder = groovyUtils.getXmlHolder("Get BA2 async function resource response#ResponseAsXml")

log.info("Billing Account 2 UUID:: "+holder.getNodeValue("//*:id"))
log.info("Billing Accountid_2: "+holder.getNodeValue("//*:attributes[1]/*:account-id"))
log.info("Billing account 2 lifecycle status: "+holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))
log.info("Billing account 2 async customer account link: "+holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))
log.info("Billing account  2async associated customer account link: "+holder.getNodeValue("//*:relationships[1]/*:associated-customer-account[1]/*:links[1]/*:related"))


testRunner.testCase.testSuite.project.setPropertyValue("billing_account2_uuid", holder.getNodeValue("//*:id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_account2_id", holder.getNodeValue("//*:attributes[1]/*:account-id"))
testRunner.testCase.testSuite.project.setPropertyValue("billing_Account2_lifescycle_status", holder.getNodeValue("//*:attributes[1]/*:lifecycle-status"))

testRunner.testCase.testSuite.project.setPropertyValue("BA2_async_function_status_link", holder.getNodeValue("//*:relationships[1]/*:customer-account[1]/*:links[1]/*:related"))


</script></con:config></con:testStep><con:testStep type="restrequest" name="Change Payer" id="7773ab30-0397-4536-b3d3-b961f2dab50d"><con:settings/><con:config service="http://217.78.216.195:3010" resourcePath="/api/orders-create" methodName="Method 1" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Change Payer" id="9266df29-c9c7-428b-bc62-777afb72c936" mediaType="application/json" postQueryString="false"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="Content-Type" value="application/vnd.api+json"/>
  &lt;con:entry key="X-Trace-Token" value="e80f0f6d-78e1-488b-ac18-76deeea9fc86-0023"/>
&lt;/xml-fragment></con:setting></con:settings><con:endpoint>http://${#Project#target_host}:${#Project#target_port}</con:endpoint><con:request>{
 "data": {
  "type": "orders-create",
  "relationships": {
   "new-instance": {
    "data": {
     "id": "temp-orders-id-1",
     "type": "orders"
    }
   }
  }
 },
 "included": [
  {
   "id": "temp-orders-id-1",
   "type": "orders",
   "attributes": {
    "reference-number": "Change_Payer_${#Project#reference_number}",
    "order-date": "2016-10-31T15:06:41Z",
    "sales-info": {
     "channel": "Dummy-Channel-Value",
     "sales-type": "acquisition"
    }
   },
   "relationships": {
    "order-items": {
     "data": [
      {
       "id": "temp-order-items-id-1",
       "type": "order-items"
      }
     ]
    },
    "customer-account": {
     "data": {
      "id": "${#Project#customer_account_uuid}",
      "type": "customer-accounts"
     }
    }
   }
  }, {
   "id": "temp-order-items-id-1",
   "type": "order-items",
   "attributes": {
    "action": "create",
    "quantity": 1
   },
   "relationships": {
    "order-product": {
     "data": {
      "id": "temp-order-products-id-1",
      "type": "order-products"
     }
    }
   }
  }, {
   "id": "temp-order-products-id-1",
   "type": "order-products",
   "attributes": {
    "inputted-characteristics": {
    "CH_Old_Billing_Accounts_Id": "${#Project#billing_account_uuid}",
    "CH_New_Billing_Accounts_Id": "${#Project#billing_account2_uuid}",
    "CH_Inventory_Id": "${#Project#main_product_uuid}"
    }
   },
   "relationships": {
    "product-offering": {
     "data": {
      "id": "PO_change_payer",
      "type": "product-offerings"
     }
    }
   }
  }
 ]
}</con:request><con:originalUri>http://217.78.216.195/api/orders-create</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3d18ce04-27f1-48ed-ba46-a30bfdc69ceb" name="Valid HTTP Status Codes"><con:configuration><codes>202</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="4ee2f140-a37f-4ba8-8ea3-a6dad34a4a01" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.JsonBuilder 
import java.util.regex.Matcher
import java.util.regex.Pattern

def holder = new XmlHolder(messageExchange.responseContentAsXml)
def assertionList=[]

//to validate that response contains attribues as per the specifications.
holder["exists(//*:attributes[1]/*:lifecycle-status)"]=='true'? log.info("assertion pass. attributes-->lifecycle-status exist"):assertionList.add("attributes-->lifecycle-status is missing")
holder["exists(//*:attributes[1]/*:function)"]=='true'? log.info("assertion pass. attributes-->function exist"):assertionList.add("attributes-->function is missing")
holder["exists(//*:attributes[1]/*:requested-at)"]=='true'?log.info("assertion pass. attributes-->requested-at exist"):assertionList.add("attributes-->requested-at is missing")

//to validate that lifecycle-status is not NULL
assert holder["//*:attributes[1]/*:lifecycle-status"] != null

String lifecycle_status=holder.getNodeValue('//*:attributes[1]/*:lifecycle-status')
assert ["accepted", "in-progress", "completed"].contains(lifecycle_status)==true


assert assertionList.isEmpty() : assertionList.toString()</scriptText></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters/></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Poll completion 1" id="b1acd377-35aa-4d53-a0e8-4a4eaf1d8f7f"><con:settings/><con:config><script>import com.eviware.soapui.support.GroovyUtils 

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)

// Edit here the test step response which async status is to be polled
def testStepName = "Change Payer"

def holder = groovyUtils.getXmlHolder(testStepName + "#ResponseAsXml")
def endpoint = testRunner.testCase.getTestStepByName(testStepName).getHttpRequest().getEndpoint()
def asyncLink = holder.getNodeValue("//*:related")
log.info("Async function link: " + endpoint + asyncLink)
log.info("PERF::" + testRunner.testCase.name + "::create-function::quality.measure.response.size.byte = " + (testRunner.testCase.testSteps[testStepName].testRequest.response.rawResponseData.length))
testRunner.testCase.testSuite.project.setPropertyValue("endpoint", endpoint);
testRunner.testCase.testSuite.project.setPropertyValue("async_function_status_link", holder.getNodeValue("//*:related"))
testRunner.testCase.testSuite.project.setPropertyValue("current_poller_testcase_name", testRunner.testCase.name)

def proj = testRunner.testCase.testSuite.project
def testCase = proj.testSuites["BSSAPI Helper Test Suite"].testCases["Helper: Poll async function completion"]
def result = testCase.run(null, false)
if( result.status.toString() == "FAILED" ) {
    assert false, "BSSAPI: Error when polling async function completion status. Test failed."    
}
</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/><con:setupScript>String randomNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("identification_id",randomNumber)
log.info("TestSuite Setup Script setting identification_id = '" + randomNumber + "'")

String customerAccountName = org.apache.commons.lang.RandomStringUtils.random(5, true, false)
testSuite.project.setPropertyValue("customer_account_name",customerAccountName)
log.info("TestSuite Setup Script setting customer_account_name = '" + customerAccountName + "'")

String formattedNames  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName",formattedNames)
log.info("TestSuite Setup Script setting formattedName = '" + formattedNames + "'")

String individualName = org.apache.commons.lang.RandomStringUtils.random(6, true, false)
testSuite.project.setPropertyValue("individual_name",individualName)
log.info("TestSuite Setup Script setting individual_name = '" + individualName + "'")

String refNumber = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("reference_number",refNumber)
log.info("TestSuite Setup Script setting reference_number = '" + refNumber + "'")

def identificationTypes = ['business-identity-code']
def random = new Random()
def randomKey =random.nextInt(identificationTypes.size()) 
testSuite.project.setPropertyValue("identificationType","${identificationTypes[randomKey]}")
log.info("TestSuite Setup Script setting identificationType = '" + "${identificationTypes[randomKey]}" + "'")

String randomNumber1 = org.apache.commons.lang.RandomStringUtils.random(7, false, true)
testSuite.project.setPropertyValue("identification_id_things",randomNumber1)
log.info("TestSuite Setup Script setting identification_id_things = '" + randomNumber1 + "'")

String formattedNames1  = org.apache.commons.lang.RandomStringUtils.random(9, true, true)
testSuite.project.setPropertyValue("formattedName_things",formattedNames1)
log.info("TestSuite Setup Script setting formattedName_things = '" + formattedNames1 + "'")

String randomNum = org.apache.commons.lang.RandomStringUtils.random(9, false, true)
testSuite.project.setPropertyValue("createidentification_id",randomNum)
log.info("TestSuite Setup Script setting createidentification_id = '" + randomNum + "'")

// FEATURE RUBT-XXXX: Adding unique X-Trace-Token header to all requests with configurable prefix
// This will iterate over each enabled test case and test steps
//
// FEATURE RUBT-XXXX CODE START
def tokenPrefix = testSuite.project.getPropertyValue("x_trace_token_prefix")
if (tokenPrefix == null || tokenPrefix.trim().length() == 0) {
	tokenPrefix = ""
} else {
	tokenPrefix += "--"
}

testSuite.testCases.each { testCaseName, testCase ->
    	if (testCase != null &amp;&amp; testCase.disabled == false) {
		def tc_base_uuid = java.util.UUID.randomUUID()
		testCase.testSteps.each { testStepName, testStep ->       
			def idx = testCase.getTestStepIndexByName(testStepName)
			if (testStep != null &amp;&amp; testStep.disabled == false) {
				def steptype = testStep.config.type
				if (steptype == "restrequest") {
					def xtracetoken = tokenPrefix + tc_base_uuid + "-" + String.format("%04d", idx)
					testCase.testSuite.project.setPropertyValue(testCase.name.toLowerCase().replaceAll(' ', '_').replaceAll(',', '_') + "_x-trace-token", (tokenPrefix + tc_base_uuid))
					log.info("METADATA::" + testCase.name + "::" + testStepName + "::quality.tracking.x-trace-token = " + xtracetoken)
		               def headers = testStep.getHttpRequest().getRequestHeaders()
		               def list = []
		               list.add(xtracetoken)
		               headers["X-Trace-Token"] = list;
		               testStep.getHttpRequest().setRequestHeaders(headers)
				} else {
					// log.info("Teststep [" + testStepName + "] type not request")
				}
			} else {
				// log.info("Teststep [" + testStepName + "] disabled.")
			}
		}
    	}
}
// FEATURE RUBT-XXXX CODE END
</con:setupScript></con:testSuite><con:restMockService id="dd3c8082-37c0-42fe-bdbe-14b02a375b63" port="8080" path="/" host="QSSLP249-PC"><con:settings/><con:properties/></con:restMockService><con:properties><con:property><con:name>identification_id</con:name><con:value>613280471</con:value></con:property><con:property><con:name>formattedName</con:name><con:value>K0P0qScT7</con:value></con:property><con:property><con:name>org_async_uuid</con:name><con:value>141195</con:value></con:property><con:property><con:name>org_uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">0c2b1239-52d9-49d2-b454-207beb959b64</con:value></con:property><con:property><con:name>org_contact_media_billing</con:name><con:value>8ca55fec-7d99-4a70-9557-60cfa8b76e50</con:value></con:property><con:property><con:name>customer_account_name</con:name><con:value>cBrcT</con:value></con:property><con:property><con:name>target_host</con:name><con:value>217.78.216.195</con:value></con:property><con:property><con:name>target_port</con:name><con:value>3010</con:value></con:property><con:property><con:name>customer_account_uuid</con:name><con:value>bbc22725-9d0c-409d-a80f-f9f30eab04b3</con:value></con:property><con:property><con:name>billing_account_uuid</con:name><con:value>c6a6decf-3e29-4031-a6cd-4d4cf07e08e5</con:value></con:property><con:property><con:name>individual_name</con:name><con:value>NkKslm</con:value></con:property><con:property><con:name>individual_uuid</con:name><con:value>7bff1bb1-df2f-44d4-ae56-59150fae2d6e</con:value></con:property><con:property><con:name>reference_number</con:name><con:value>809998462</con:value></con:property><con:property><con:name>msisdn_available_optimi</con:name><con:value>3584499930046</con:value></con:property><con:property><con:name>simcard_available_optimi</con:name><con:value>8935806151010003046</con:value></con:property><con:property><con:name>identificationType</con:name><con:value>business-identity-code</con:value></con:property><con:property><con:name>org_async_status_link</con:name><con:value>/api/async-functions/46777a96-ea9f-4f73-861e-15c881aff551</con:value></con:property><con:property><con:name>async_function_status_link</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">/api/async-functions/141187/resource</con:value></con:property><con:property><con:name>current_poller_testcase_name</con:name><con:value>Create Party Relationships</con:value></con:property><con:property><con:name>endpoint</con:name><con:value>http://${#Project#target_host}:${#Project#target_port}</con:value></con:property><con:property><con:name>billing_account_id</con:name><con:value>10008127</con:value></con:property><con:property><con:name>billing_lifescycle_status</con:name><con:value>active</con:value></con:property><con:property><con:name>billing_async_custacclink</con:name><con:value>/api/billing-accounts/a9af3b61-7c3a-4e9f-8d23-99102a2f8051/customer-account</con:value></con:property><con:property><con:name>billing_async_associatedcustacclink</con:name><con:value>/api/billing-accounts/a9af3b61-7c3a-4e9f-8d23-99102a2f8051/associated-customer-account</con:value></con:property><con:property><con:name>billing_async_externalreferenceslink</con:name><con:value>/api/billing-accounts/af8e0534-b2cd-466d-87f3-cafed52cf175/external-references</con:value></con:property><con:property><con:name>customer_account_id</con:name><con:value>11089</con:value></con:property><con:property><con:name>customer_account_type</con:name><con:value>corporate</con:value></con:property><con:property><con:name>associatedcustomer_account_id</con:name><con:value>11060</con:value></con:property><con:property><con:name>associatedcustomer_account_type</con:name><con:value>corporate</con:value></con:property><con:property><con:name>associatedcustomer_account_name</con:name><con:value>DRrGg</con:value></con:property><con:property><con:name>bssapi_runtime_properties</con:name><con:value>D:\DNA\D:\DNA\D:\DNA\D:\DNA\D:\DNA\E:\Stash\products\bssapi\api\soapui\E:\Stash\products\bssapi\api\soapui\E:\Stash\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\D:\STASH\feature-bssapibranch\products\bssapi\api\soapui\C:\Work\stash\testautomation\products\bssapi\api\soapui\bssapi_runtime.properties</con:value></con:property><con:property><con:name>ind_formattedName</con:name><con:value>User-FN-LN-NkKslm</con:value></con:property><con:property><con:name>ind_identification_id</con:name><con:value>SSN-613280471</con:value></con:property><con:property><con:name>ind_identificationType</con:name><con:value>personal-identity-code</con:value></con:property><con:property><con:name>ind_contactmedia_role</con:name><con:value>primary</con:value></con:property><con:property><con:name>ind_contactmedia_mediumtype</con:name><con:value>postal-address</con:value></con:property><con:property><con:name>ind_ext_ref_id</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">80035033</con:value></con:property><con:property><con:name>ind_ext_ref_type</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">customer-number</con:value></con:property><con:property><con:name>ind_related_party_role</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>org_contactmedia_role</con:name><con:value>primary</con:value></con:property><con:property><con:name>org_contactmedia_mediumtype</con:name><con:value>postal-address</con:value></con:property><con:property><con:name>org_ext_ref_id</con:name><con:value>80035032</con:value></con:property><con:property><con:name>org_ext_ref_type</con:name><con:value>customer-number</con:value></con:property><con:property><con:name>org_related_party_role</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>billingaccount_customer_account_id</con:name><con:value>10017832</con:value></con:property><con:property><con:name>billingaccount_customer_account_type</con:name><con:value>CONS</con:value></con:property><con:property><con:name>billingaccount_customer_account_name</con:name><con:value>cBrcT</con:value></con:property><con:property><con:name>billingaccount_associatedcustomer_account_id</con:name><con:value>10017832</con:value></con:property><con:property><con:name>billingaccount_associatedcustomer_account_type</con:name><con:value>CONS</con:value></con:property><con:property><con:name>billingaccount_associatedcustomer_account_name</con:name><con:value>cBrcT</con:value></con:property><con:property><con:name>customer_account_lifecycle_status</con:name><con:value>active</con:value></con:property><con:property><con:name>cust_acc_ext_ref_id</con:name><con:value>80035032</con:value></con:property><con:property><con:name>cust_acc_ext_ref_type</con:name><con:value>customer-number</con:value></con:property><con:property><con:name>cust_acc_related_billing_id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cust_acc_agreement_id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cust_acc_agreement_lifecycle_status</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cust_acc_agreement_ref_number</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>cust_account_id</con:name><con:value>10017832</con:value></con:property><con:property><con:name>cust_account_type</con:name><con:value>CONS</con:value></con:property><con:property><con:name>cust_account_lifecycle_status</con:name><con:value>active</con:value></con:property><con:property><con:name>cust_account_name</con:name><con:value>cBrcT</con:value></con:property><con:property><con:name>billingaccount_ext_ref_id</con:name><con:value>1</con:value></con:property><con:property><con:name>billingaccount_ext_ref_type</con:name><con:value>test</con:value></con:property><con:property><con:name>party_relationship_role</con:name><con:value>contact</con:value></con:property><con:property><con:name>party_id</con:name><con:value>7bff1bb1-df2f-44d4-ae56-59150fae2d6e</con:value></con:property><con:property><con:name>target_id</con:name><con:value>0c2b1239-52d9-49d2-b454-207beb959b64</con:value></con:property><con:property><con:name>identification_id_things</con:name><con:value>9044756</con:value></con:property><con:property><con:name>formattedName_things</con:name><con:value>SynA2u0eK</con:value></con:property><con:property><con:name>things_contactmedia_role</con:name><con:value>work</con:value></con:property><con:property><con:name>things_contactmedia_mediumtype</con:name><con:value>postal-address</con:value></con:property><con:property><con:name>things_ext_ref_id</con:name><con:value>80033697</con:value></con:property><con:property><con:name>things_ext_ref_type</con:name><con:value>customer-number</con:value></con:property><con:property><con:name>things_related_party_role</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>create_contactmedia_role</con:name><con:value>primary</con:value></con:property><con:property><con:name>create_contactmedia_mediumtype</con:name><con:value>telephone-number</con:value></con:property><con:property><con:name>create_contactmedia_party_id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>create_contactmedia_party_formattedname</con:name><con:value>aFAKAXqJd</con:value></con:property><con:property><con:name>createidentification_id</con:name><con:value>563313542</con:value></con:property><con:property><con:name>create_identification_id</con:name><con:value>267589481</con:value></con:property><con:property><con:name>create_identification_type</con:name><con:value>business-identity-code</con:value></con:property><con:property><con:name>create_identification_party_id</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>create_identification_party_formattedname</con:name><con:value>aFAKAXqJd</con:value></con:property><con:property><con:name>msisdn_available_likkuva</con:name><con:value>3584576066071</con:value></con:property><con:property><con:name>simcard_available_likkuva</con:name><con:value>8935806151010001102</con:value></con:property><con:property><con:name>msisdn_available</con:name><con:value> </con:value></con:property><con:property><con:name>simcard_available</con:name><con:value> </con:value></con:property><con:property><con:name>customer_account_uuid_for_termination</con:name><con:value>d7b7c3ee-2117-4f08-abd3-e64f043f50d5</con:value></con:property><con:property><con:name>cust_account_name_for_termination</con:name><con:value>zqBoT</con:value></con:property><con:property><con:name>cust_account_id_for_termination</con:name><con:value>10000751</con:value></con:property><con:property><con:name>message_logging_enabled</con:name><con:value>false</con:value></con:property><con:property><con:name>cust_acct_async_uuid</con:name><con:value>141184</con:value></con:property><con:property><con:name>terminate_cust_async_uuid</con:name><con:value>9938</con:value></con:property><con:property><con:name>billing_acct_async_uuid</con:name><con:value>141185</con:value></con:property><con:property><con:name>ind_async_uuid</con:name><con:value>141186</con:value></con:property><con:property><con:name>cust_acc_terminate_async_uuid</con:name><con:value>9936</con:value></con:property><con:property><con:name>party_rel_async_uuid</con:name><con:value>141187</con:value></con:property><con:property><con:name>things_async_uuid</con:name><con:value>131860</con:value></con:property><con:property><con:name>sales_agreement_async_uuid</con:name><con:value>338f6df1-de52-45ab-83af-ac66dc40fd87</con:value></con:property><con:property><con:name>contact_media_async_uuid</con:name><con:value>9958</con:value></con:property><con:property><con:name>identification_async_uuid</con:name><con:value xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">9959</con:value></con:property><con:property><con:name>x_trace_token_prefix</con:name><con:value/></con:property><con:property><con:name>create_things_x-trace-token</con:name><con:value>604c80b4-a23d-4cac-8403-58f6d36d9732</con:value></con:property><con:property><con:name>create_party_relationships_x-trace-token</con:name><con:value>2e954754-8e66-47fc-ac22-1feb533db4c7</con:value></con:property><con:property><con:name>create_billing_account_x-trace-token</con:name><con:value>e350426b-48cc-4e66-b2a1-6727ffd5b953</con:value></con:property><con:property><con:name>create_identification_x-trace-token</con:name><con:value>302ee2f6-e6da-4b82-b1d7-7b4ea113ca71</con:value></con:property><con:property><con:name>create_contact_media_x-trace-token</con:name><con:value>ec32ff22-11e2-4444-a26b-c0c5e8e43301</con:value></con:property><con:property><con:name>create_individual_x-trace-token</con:name><con:value>7d269d46-5a02-4651-98ec-2ccbd508f1e1</con:value></con:property><con:property><con:name>create_customer_account_x-trace-token</con:name><con:value>f1012b4d-52c0-4380-a5c6-be702dc1d41a</con:value></con:property><con:property><con:name>create_organization_x-trace-token</con:name><con:value>fd058ac0-11ca-437f-9ad5-0d657166de6e</con:value></con:property><con:property><con:name>create_ll_xl_product_order_x-trace-token</con:name><con:value>aa878ea1-c322-4e97-ab69-789bcd257c1a</con:value></con:property><con:property><con:name>create_optimi_product_order_x-trace-token</con:name><con:value>a5dade4c-a281-4f9b-a306-06b5a8db288c</con:value></con:property><con:property><con:name>create_sales_agreement_x-trace-token</con:name><con:value>9e8f7c66-b45e-4341-a716-233a2a10ab34</con:value></con:property><con:property><con:name>create_customer_account_for_termination_x-trace-token</con:name><con:value>103670d0-9a06-46e6-8476-00b82eccebf5</con:value></con:property><con:property><con:name>get_customer_account_-_all_related_identifications.contact-media_related-parties_x-trace-token</con:name><con:value>df0b1342-8574-4c9b-8f1e-c5128cc78868</con:value></con:property><con:property><con:name>get_customer_account_using_account-id_x-trace-token</con:name><con:value>35294b47-2c8c-45df-8e7d-655908429041</con:value></con:property><con:property><con:name>get_specifications_with_bundling_items__bundled_items__offerings_for_optimi_x-trace-token</con:name><con:value>6535d1fd-80be-4c67-9d7d-c1f0630119d2</con:value></con:property><con:property><con:name>terminate_customer_x-trace-token</con:name><con:value>c3763844-ce9b-4f32-b7ba-0cfda5e79cdc</con:value></con:property><con:property><con:name>get_customer_account_using_agreements.document-id_x-trace-token</con:name><con:value>1dcc583c-7799-4278-bced-76c4ea9bb1de</con:value></con:property><con:property><con:name>get_individual_using_related-parties.role_x-trace-token</con:name><con:value>da3288cd-f267-4d51-bdd9-d4dfc63b6ed5</con:value></con:property><con:property><con:name>get_customer_account_using_customer_account-name_x-trace-token</con:name><con:value>8f6f93b6-e572-417e-a71f-0347b131ef11</con:value></con:property><con:property><con:name>get_organisation_using_contact-media.role_x-trace-token</con:name><con:value>78bfe8a4-7448-4567-b744-d272997ddc35</con:value></con:property><con:property><con:name>get_individual_using_identifications.identification-type_x-trace-token</con:name><con:value>757bd3ae-7df9-407e-b733-71bd10c221c3</con:value></con:property><con:property><con:name>get_individual_using_identifications.identification-id_x-trace-token</con:name><con:value>e6db13e3-8f4a-4840-b0a7-9c4805e52ad8</con:value></con:property><con:property><con:name>get_individual_using_external-references.reference-type_x-trace-token</con:name><con:value>d1704cd2-f061-4e84-a24a-42dc9669b019</con:value></con:property><con:property><con:name>get_billing_account_using_customer_account-type_x-trace-token</con:name><con:value>5554fd71-1292-48eb-a269-b0008dda80fe</con:value></con:property><con:property><con:name>get_individual_using_contact-media.role_x-trace-token</con:name><con:value>796a6e51-e876-4aea-9a37-9ed76c5969f7</con:value></con:property><con:property><con:name>get_billing_account_using_customer_account-name_x-trace-token</con:name><con:value>402c9392-8e97-45c3-8c41-11f75beaf83f</con:value></con:property><con:property><con:name>get_customer_account_using_external-references.reference-type_x-trace-token</con:name><con:value>0c524d18-c2b7-48c2-859e-867a34fe60ac</con:value></con:property><con:property><con:name>get_party_relationships_using_target.id_x-trace-token</con:name><con:value>8791646b-a63a-4d3e-a763-916cefccbe07</con:value></con:property><con:property><con:name>get_billing_account_using_associated_customer_account-name_x-trace-token</con:name><con:value>c1af01ff-1a58-4430-afdd-09e4d171a7ee</con:value></con:property><con:property><con:name>get_individual_using_external-references.reference-id_x-trace-token</con:name><con:value>030ac85b-fbe5-4932-b365-fae32d2fbd6e</con:value></con:property><con:property><con:name>get_billing_account_using_external-references.reference-id_x-trace-token</con:name><con:value>c928c410-2e9a-4b64-a688-43bd39e31907</con:value></con:property><con:property><con:name>get_organisation_using_formatted-name_x-trace-token</con:name><con:value>0e5d3c65-2b73-49a9-944e-7e4360242948</con:value></con:property><con:property><con:name>get_individual_using_formatted-name_x-trace-token</con:name><con:value>4828b52c-a513-40d5-9a02-c495e15761ac</con:value></con:property><con:property><con:name>get_organisation_using_identifications.identification-id_x-trace-token</con:name><con:value>d07bc0b7-28fc-4d7e-a148-d377d9f32913</con:value></con:property><con:property><con:name>get_customer_account_using_customer_account-type_x-trace-token</con:name><con:value>b969bd8b-973e-4522-a6a0-8a68228376bc</con:value></con:property><con:property><con:name>get_customer_account_using_agreements.lifecycle-status_x-trace-token</con:name><con:value>d7214e08-b826-4f54-8732-7d80e940b2e3</con:value></con:property><con:property><con:name>get_billing_account_using_customer_account-id_x-trace-token</con:name><con:value>33ece278-dda5-4876-9eb8-c1a8575393ee</con:value></con:property><con:property><con:name>get_organisation_using_identifications.identification-type_x-trace-token</con:name><con:value>4d64d22f-775b-48da-a6b4-4d007383de1a</con:value></con:property><con:property><con:name>get_billing_account_using_associated_customer_account-type_x-trace-token</con:name><con:value>69d6e67a-7fb6-4ed0-9675-e916abc4b65f</con:value></con:property><con:property><con:name>get_customer_account_using_agreements.reference-number_x-trace-token</con:name><con:value>87706753-6a76-4743-9875-62219435fc5d</con:value></con:property><con:property><con:name>get_party_relationships_using_party.id_x-trace-token</con:name><con:value>3eff499c-dd22-4f70-9ce0-80f3046e9751</con:value></con:property><con:property><con:name>get_billing_account_using_associated_customer_account-id_x-trace-token</con:name><con:value>54049fff-59a3-44ee-ba64-c75552745819</con:value></con:property><con:property><con:name>get_billing_account_using_lifecycle-status_x-trace-token</con:name><con:value>8e4a20cb-deee-40e1-9c6c-22cb60e47356</con:value></con:property><con:property><con:name>get_billing_account_using_account-id_x-trace-token</con:name><con:value>0fc1db80-4c79-4076-9964-5ca991457496</con:value></con:property><con:property><con:name>get_customer_account_using_lifecycle-status_x-trace-token</con:name><con:value>5a566ada-c4f2-44e0-9708-254a506e843e</con:value></con:property><con:property><con:name>get_organisation_using_external-references.reference-type_x-trace-token</con:name><con:value>c496efe2-b801-4e37-91ae-d99475b75814</con:value></con:property><con:property><con:name>get_organisation_using_external-references.reference-id_x-trace-token</con:name><con:value>12599d01-33f9-46b9-8ca9-17c7a51d3aa7</con:value></con:property><con:property><con:name>get_organisation_using_contact-media.medium-type_x-trace-token</con:name><con:value>c4c11f1d-a382-48cf-b5d8-a120dc577b2e</con:value></con:property><con:property><con:name>get_customer_account_using_external-references.reference-id_x-trace-token</con:name><con:value>4c0ff9d1-cc2e-46be-b6a6-2ee54b3d1ac3</con:value></con:property><con:property><con:name>get_organisation_using_related-parties.role_x-trace-token</con:name><con:value>988d5432-2a40-41e1-9d3b-0cfbfa0ff717</con:value></con:property><con:property><con:name>get_customer_account_using_billing_account-id_x-trace-token</con:name><con:value>7c2d2d21-9e35-4906-ba97-16b2fede0c9b</con:value></con:property><con:property><con:name>get_party_relationships_using_role_x-trace-token</con:name><con:value>c5e53403-42b9-4dab-b549-40cfc9f5a5cd</con:value></con:property><con:property><con:name>get_individual_using_contact-media.medium-type_x-trace-token</con:name><con:value>5c69b2eb-ac26-4368-862e-97b6ce434991</con:value></con:property><con:property><con:name>get_billing_account_using_external-references.reference-type_x-trace-token</con:name><con:value>d7ae75b4-d118-46d3-8c4f-67632db455a8</con:value></con:property><con:property><con:name>rubt-1784_-_sales_agreement_x-trace-token</con:name><con:value>9ada8500-6e7d-446e-bfca-453ab0b770f1</con:value></con:property><con:property><con:name>sales_agreement_uuid</con:name><con:value>5307970e-ed3a-4699-be35-c7c6f5fe6ed4</con:value></con:property><con:property><con:name>sales_agreement_withparent_uuid</con:name><con:value>99f7d69a-b102-4aac-a8ae-660e67c0e422</con:value></con:property><con:property><con:name>rubt-1784_-_sales_agreement_-_spec_to_sales_-_org_x-trace-token</con:name><con:value>aa0f6a59-ad0d-4fbc-a110-e8e28698ea7d</con:value></con:property><con:property><con:name>rubt-1784_-_sales_agreement_-_spec_to_sales_-_ind_x-trace-token</con:name><con:value>fe7b8082-1ead-4682-8aa6-1757a4ec1e8d</con:value></con:property><con:property><con:name>rubt-1784_-_sales_agreement_-_sales_price_x-trace-token</con:name><con:value>20cdfafe-0e78-4743-9fc5-218e5fa7bb99</con:value></con:property><con:property><con:name>subscription_language_change_po_optimistic_product_id</con:name><con:value>6690fd32-7dc9-4bef-9034-65bbdc2eff9c</con:value></con:property><con:property><con:name>rubt-54153-_things_edit_x-trace-token</con:name><con:value>244c6277-1af1-48e5-93a1-3b3fd09dc7c5</con:value></con:property><con:property><con:name>things_uuid</con:name><con:value>905df139-7843-42b9-a1b1-1d868ccf5d54</con:value></con:property><con:property><con:name>getlistofavailablesimcards_x-trace-token</con:name><con:value>2e3b6bed-2f65-455d-99c8-a0ecc0a82109</con:value></con:property><con:property><con:name>getlistofavailablemsisdn_x-trace-token</con:name><con:value>d32eefa0-36fd-4cda-a85b-6ff9b3ad106c</con:value></con:property><con:property><con:name>things_update_uuid</con:name><con:value>905df139-7843-42b9-a1b1-1d868ccf5d54</con:value></con:property><con:property><con:name>things_formatted_name</con:name><con:value>DREeAuA00</con:value></con:property><con:property><con:name>things_update_formatted_name</con:name><con:value>DREeAuA00_updated</con:value></con:property><con:property><con:name>things_update_characteristics</con:name><con:value>Cool Drinks Oy</con:value></con:property><con:property><con:name>things_update_char_operator</con:name><con:value>Cool Drinks Oy</con:value></con:property><con:property><con:name>things_update_char_location</con:name><con:value>11th floor</con:value></con:property><con:property><con:name>things_char_operator</con:name><con:value>DNA Modems-4-you</con:value></con:property><con:property><con:name>things_char_location</con:name><con:value xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:property><con:property><con:name>rubt-2275-_edit_and_remove_nickname_x-trace-token</con:name><con:value>c9ffb56e-57c3-4968-bcfc-28a7157376a8</con:value></con:property><con:property><con:name>rubt-830-clir_actication_x-trace-token</con:name><con:value>adac68d9-852a-4e6f-8053-1980f73dc230</con:value></con:property><con:property><con:name>main_product_uuid</con:name><con:value>ed535f50-56b3-4575-9eb1-8d0ecf6bd7a5</con:value></con:property><con:property><con:name>rubt-2061-_change_user_x-trace-token</con:name><con:value>bedd3f31-9370-497d-935d-18f94219d251</con:value></con:property><con:property><con:name>rubt-42810-_mobile_certification_x-trace-token</con:name><con:value>16de04d9-64e3-430b-a44f-90a19d9757aa</con:value></con:property><con:property><con:name>rubt-2073-_change_payer_x-trace-token</con:name><con:value>e80f0f6d-78e1-488b-ac18-76deeea9fc86</con:value></con:property><con:property><con:name>billing_acct2_async_uuid</con:name><con:value>1960</con:value></con:property><con:property><con:name>billing_account2_uuid</con:name><con:value>5df3efaf-2a77-48d4-9eff-e93465e036a5</con:value></con:property><con:property><con:name>billing_account2_id</con:name><con:value>10000193</con:value></con:property><con:property><con:name>billing_Account2_lifescycle_status</con:name><con:value>active</con:value></con:property><con:property><con:name>BA2_async_function_status_link</con:name><con:value>/api/billing-accounts/5df3efaf-2a77-48d4-9eff-e93465e036a5/customer-account</con:value></con:property></con:properties><con:afterLoadScript>import com.eviware.soapui.SoapUI
import com.eviware.soapui.model.testsuite.TestRunner

def utils = new com.eviware.soapui.support.GroovyUtils(context)

def pathConfig = "./" + "config.ini"
File confFile = new File(pathConfig)
if (confFile.exists()) {
	log.info("Using config file from: " + pathConfig);
	def config = new Properties()
	config.load(new FileInputStream(pathConfig))
	props = project

	// Setting used properties file
	props.setPropertyValue("bssapi_runtime_properties", config.getProperty("properties_file"))
	props.setPropertyValue("msisdn_available_optimi", config.getProperty("msisdn_available_optimi"))
	props.setPropertyValue("simcard_available_optimi", config.getProperty("simcard_available_optimi"))
	props.setPropertyValue("msisdn_available_likkuva", config.getProperty("msisdn_available_likkuva"))
	props.setPropertyValue("simcard_available_likkuva", config.getProperty("simcard_available_likkuva"))
	
	log.info("   Set: bssapi_runtime_properties = " + project.getPropertyValue("bssapi_runtime_properties"))
	log.info("   Set: msisdn_available_optimi = " + project.getPropertyValue("msisdn_available_optimi"))
	log.info("   Set: simcard_available_optimi = " + project.getPropertyValue("simcard_available_optimi"))
	log.info("   Set: msisdn_available_likkuva = " + project.getPropertyValue("msisdn_available_likkuva"))
	log.info("   Set: simcard_available_likkuva = " + project.getPropertyValue("simcard_available_likkuva"))

	// Add here other properties which need to be set from the file
	//props.setPropertyValue("&lt;project prepoerty>", config.getProperty("&lt;property name from config.ini file>"))
	//log.info("   Set: &lt;project prepoerty> = " + project.getPropertyValue("&lt;project prepoerty>"))


	// Finally save the project file
	project.save()
} else {
	log.info("Not using external config file. Using project defaults")
	// Setting used properties file
	//project.setPropertyValue("bssapi_runtime_properties", "bssapi_runtime.properties")
	//project.setPropertyValue("msisdn_available", " ")
	//project.setPropertyValue("simcard_available", " ")
	//log.info("   Set: bssapi_runtime_properties = " + project.getPropertyValue("bssapi_runtime_properties"))
	//log.info("   Set: msisdn_available_optimi = " + project.getPropertyValue("msisdn_available_optimi"))
	//log.info("   Set: simcard_available_optimi = " + project.getPropertyValue("simcard_available_optimi"))
	//log.info("   Set: msisdn_available_likkuva = " + project.getPropertyValue("msisdn_available_likkuva"))
	//log.info("   Set: simcard_available_likkuva = " + project.getPropertyValue("simcard_available_likkuva"))
}</con:afterLoadScript><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>